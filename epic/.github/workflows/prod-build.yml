name: prod-deploy

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request_target:
    branches:
      - production
    types: [closed]

jobs:
  prod_build:
    if: github.event.pull_request.merged == true
    name: Production Image Build
    runs-on: prod-runner

    permissions:
      id-token: write
      statuses: write
      contents: write

    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN }}

      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Check outputs
        run: echo ${{ steps.vars.outputs.sha_short }}

      # Set up AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::189103209548:role/github-actions-role
          aws-region: ap-southeast-2

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: production/epic
          IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
          DATABASE_URL: ${{ secrets.DATABASE_URL_PROD }}
          NEXT_PUBLIC_GDPR_SECRET_KEY: ${{ secrets.NEXT_PUBLIC_GDPR_SECRET_KEY_PROD }}
          NEXT_PUBLIC_GDPR_SECRET_IV: ${{ secrets.NEXT_PUBLIC_GDPR_SECRET_IV_PROD }}
          NEXT_PUBLIC_TINY_MCE_API_KEY: ${{ secrets.NEXT_PUBLIC_TINY_MCE_API_KEY_PROD }}
          FALCON_API_URL: ${{ secrets.FALCON_API_URL_PROD }}
          CIMET_API_KEY: ${{ secrets.CIMET_API_KEY_PROD }}
        run: |
          docker build --build-arg=FALCON_API_URL=$FALCON_API_URL --build-arg=CIMET_API_KEY=$CIMET_API_KEY --build-arg=DATABASE_URL=$DATABASE_URL --build-arg=NEXT_PUBLIC_GDPR_SECRET_KEY=$NEXT_PUBLIC_GDPR_SECRET_KEY --build-arg=NEXT_PUBLIC_GDPR_SECRET_IV=$NEXT_PUBLIC_GDPR_SECRET_IV --build-arg=NEXT_PUBLIC_TINY_MCE_API_KEY=$NEXT_PUBLIC_TINY_MCE_API_KEY --build-arg=PORT=3232 -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -t $REGISTRY/$REPOSITORY:latest  -f ./zarf/docker/Dockerfile .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: cimetaus/devops-production
          ref: master
          token: ${{ secrets.TOKEN }}

      - name: Update Version
        env:
          IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
          ENVIRONMENT: k8s/epic
          REPOSITORY: production/epic
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "updating $ENVIRONMENT image to $REGISTRY/$REPOSITORY:$IMAGE_TAG"
          sed -i "s#$REGISTRY/$REPOSITORY:[a-zA-Z0-9]\\+#$REGISTRY/$REPOSITORY:$IMAGE_TAG#" $ENVIRONMENT/kustomization.yaml

      - name: Commit files
        env:
          IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -a -m "updating image tag to $IMAGE_TAG"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.TOKEN }}
          branch: master
          repository: cimetaus/devops-production

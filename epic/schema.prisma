// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model Affiliate {
  id                               String                @id @default(cuid())
  status                           Boolean               @default(true)
  name                             String                @default("")
  affiliateId                      String                @unique @default("")
  affiliateNumber                  Int?
  senderID                         String                @default("")
  emailDomains                     String                @default("")
  apiKey                           String                @default("")
  subAffiliates                    SubAffiliate[]        @relation("SubAffiliate_affiliate")
  scripts                          Script[]              @relation("Affiliate_scripts")
  ccProvider                       ProviderCreditCard[]  @relation("Affiliate_ccProvider")
  ccPlan                           CreditCard[]          @relation("Affiliate_ccPlan")
  ccFormContainer                  CCFormContainer[]     @relation("Affiliate_ccFormContainer")
  plProvider                       PLProvider[]          @relation("Affiliate_plProvider")
  plPlan                           PersonalLoan[]        @relation("Affiliate_plPlan")
  plFormContainer                  PLFormContainer[]     @relation("Affiliate_plFormContainer")
  hiProvider                       HIProvider[]          @relation("Affiliate_hiProvider")
  hiFormContainer                  HIFormContainer[]     @relation("Affiliate_hiFormContainer")
  bundleFormContainer              BundleFormContainer[] @relation("Affiliate_bundleFormContainer")
  from_CsSite_affiliate            CsSite[]              @relation("CsSite_affiliate")
  from_GenericProvider_affiliates  GenericProvider[]     @relation("GenericProvider_affiliates")
  from_GenericProvider_disallowAff GenericProvider[]     @relation("GenericProvider_disallowAff")
  from_GenericPlan_affiliates      GenericPlan[]         @relation("GenericPlan_affiliates")
  from_GenericPlan_disallowAff     GenericPlan[]         @relation("GenericPlan_disallowAff")
  from_Installer_affiliates        Installer[]           @relation("Installer_affiliates")
  from_SolarAffiliate_affiliate    SolarAffiliate[]      @relation("SolarAffiliate_affiliate")
}

model AuditLog {
  id             String    @id @default(cuid())
  userId         String    @default("")
  username       String    @default("")
  collectionName String    @default("")
  docId          String    @default("")
  attributeName  String    @default("")
  actionType     String    @default("")
  oldValue       String    @default("")
  newValue       String    @default("")
  createdAt      DateTime? @default(now()) @updatedAt
}

model CsSite {
  id                 String     @id @default(cuid())
  site               String     @default("")
  slug               String     @default("")
  apiKey             String     @default("")
  gtmId              String     @default("")
  recaptchaKey       String     @default("")
  affiliate          Affiliate? @relation("CsSite_affiliate", fields: [affiliateId], references: [id])
  affiliateId        String?    @map("affiliate")
  affAuthUrl         String     @default("")
  affAuthQuery       String     @default("token")
  affAuthCallbackUrl String     @default("")

  @@index([affiliateId])
}

model DialerList {
  id       String @id @default(cuid())
  username String @default("")
  password String @default("")
  url      String @default("")
}

model Media {
  id                                        String                @id @default(cuid())
  title                                     String                @default("")
  file_filesize                             Int?
  file_filename                             String?
  linkUrl                                   String                @default("")
  altText                                   String                @default("")
  from_Vertical_icon                        Vertical[]            @relation("Vertical_icon")
  from_RetailerMatrix_image                 RetailerMatrix[]      @relation("RetailerMatrix_image")
  from_Logo_media                           Logo[]                @relation("Logo_media")
  from_DomainConfig_favicon                 DomainConfig[]        @relation("DomainConfig_favicon")
  from_DomainConfig_headerLogo              DomainConfig[]        @relation("DomainConfig_headerLogo")
  from_DomainConfig_footerLogo              DomainConfig[]        @relation("DomainConfig_footerLogo")
  from_Link_icon                            Link[]                @relation("Link_icon")
  from_Page_thumbnail                       Page[]                @relation("Page_thumbnail")
  from_Page_heroImage                       Page[]                @relation("Page_heroImage")
  from_PageConfig_favicon                   PageConfig[]          @relation("PageConfig_favicon")
  from_PageConfig_headerLogo                PageConfig[]          @relation("PageConfig_headerLogo")
  from_Provider_logo                        Provider[]            @relation("Provider_logo")
  from_ProviderCreditCard_logo              ProviderCreditCard[]  @relation("ProviderCreditCard_logo")
  from_CreditCard_image                     CreditCard[]          @relation("CreditCard_image")
  from_RewardProgram_icon                   RewardProgram[]       @relation("RewardProgram_icon")
  from_CCDocument_keyFactSheet              CCDocument[]          @relation("CCDocument_keyFactSheet")
  from_CCDocument_targetMarketDetermination CCDocument[]          @relation("CCDocument_targetMarketDetermination")
  from_CCDocument_document                  CCDocument[]          @relation("CCDocument_document")
  from_HIProvider_logo                      HIProvider[]          @relation("HIProvider_logo")
  from_PLProvider_logo                      PLProvider[]          @relation("PLProvider_logo")
  from_PersonalLoan_image                   PersonalLoan[]        @relation("PersonalLoan_image")
  from_PLDocument_keyFactSheet              PLDocument[]          @relation("PLDocument_keyFactSheet")
  from_PLDocument_targetMarketDetermination PLDocument[]          @relation("PLDocument_targetMarketDetermination")
  from_PLDocument_document                  PLDocument[]          @relation("PLDocument_document")
  from_Battery_detailsDoc                   Battery[]             @relation("Battery_detailsDoc")
  from_Installer_logo                       Installer[]           @relation("Installer_logo")
  from_InstallerInverter_image              InstallerInverter[]   @relation("InstallerInverter_image")
  from_InstallerSolarPanel_image            InstallerSolarPanel[] @relation("InstallerSolarPanel_image")
  from_InstallerBattery_image               InstallerBattery[]    @relation("InstallerBattery_image")
  from_Inverter_detailsDoc                  Inverter[]            @relation("Inverter_detailsDoc")
  from_SolarAddon_detailsDoc                SolarAddon[]          @relation("SolarAddon_detailsDoc")
  from_SolarPanel_detailsDoc                SolarPanel[]          @relation("SolarPanel_detailsDoc")
  from_InstallerAddon_image                 InstallerAddon[]      @relation("InstallerAddon_image")
}

model Member {
  id                            String            @id @default(cuid())
  name                          String            @default("")
  title                         String            @default("")
  email                         String            @unique @default("")
  roles                         String            @default("")
  from_GenericProvider_qaEmails GenericProvider[] @relation("GenericProvider_qaEmails")
}

model PasswordSetting {
  id              String  @id @default(cuid())
  password        String  @default("")
  enableEmailLogs Boolean @default(true)
  logEmails       String  @default("")
  type            String  @default("")
  allowedIps      String  @default("")
}

model Script {
  id               String                    @id @default(cuid())
  title            String                    @default("")
  slug             String                    @unique @default("")
  verticals        Vertical[]                @relation("Script_verticals")
  showOnBundle     Boolean                   @default(true)
  component        Component?                @relation("Script_component", fields: [componentId], references: [id])
  componentId      String?                   @map("component")
  brand            Json                      @default("[]")
  category         ScriptCategoryType        @default(optional)
  connectionType   ScriptConnectionTypeType?
  technologyType   ScriptTechnologyTypeType?
  affiliates       Affiliate[]               @relation("Affiliate_scripts")
  subAffiliates    SubAffiliate[]            @relation("Script_subAffiliates")
  providers        Provider[]                @relation("Provider_scripts")
  plans            Plan[]                    @relation("Plan_scripts")
  addonFields      AddonField[]              @relation("AddonField_scripts")
  pages            Page[]                    @relation("Page_scripts")
  position         ScriptPositionType?       @default(top)
  order            Int?                      @default(0)
  content          Json                      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  ccProviders      ProviderCreditCard[]      @relation("ProviderCreditCard_scripts")
  ccFormContainers CCFormContainer[]         @relation("CCFormContainer_scripts")
  plProviders      PLProvider[]              @relation("PLProvider_scripts")
  plFormContainers PLFormContainer[]         @relation("PLFormContainer_scripts")
  hiProviders      HIProvider[]              @relation("HIProvider_scripts")
  hiFormContainers HIFormContainer[]         @relation("HIFormContainer_scripts")
  formComponents   FormComponent[]           @relation("FormComponent_scripts")
  formFields       FormField[]               @relation("FormField_scripts")

  @@index([componentId])
}

model State {
  id                          String             @id @default(cuid())
  name                        String             @unique @default("")
  from_InstallerLicence_state InstallerLicence[] @relation("InstallerLicence_state")
  from_InstallerZone_state    InstallerZone[]    @relation("InstallerZone_state")
  from_StateWiseRebate_state  StateWiseRebate[]  @relation("StateWiseRebate_state")
}

model SubAffiliate {
  id                                  String                @id @default(cuid())
  status                              Boolean               @default(true)
  name                                String                @default("")
  subAffiliateId                      String                @unique @default("")
  assignedVertical                    String                @default("")
  subAffiliateNumber                  Int?
  rcCodes                             String                @default("")
  apiKey                              String                @default("")
  gtmId                               String                @default("")
  affiliate                           Affiliate?            @relation("SubAffiliate_affiliate", fields: [affiliateId], references: [id])
  affiliateId                         String?               @map("affiliate")
  emailDomains                        String                @default("")
  scripts                             Script[]              @relation("Script_subAffiliates")
  ccProvider                          ProviderCreditCard[]  @relation("ProviderCreditCard_subAffiliate")
  ccPlan                              CreditCard[]          @relation("CreditCard_subAffiliate")
  ccFormContainer                     CCFormContainer[]     @relation("CCFormContainer_subAffiliate")
  plProvider                          PLProvider[]          @relation("PLProvider_subAffiliate")
  plPlan                              PersonalLoan[]        @relation("PersonalLoan_subAffiliate")
  plFormContainer                     PLFormContainer[]     @relation("PLFormContainer_subAffiliate")
  hiProvider                          HIProvider[]          @relation("HIProvider_subAffiliate")
  hiFormContainer                     HIFormContainer[]     @relation("HIFormContainer_subAffiliate")
  bundleFormContainer                 BundleFormContainer[] @relation("BundleFormContainer_subAffiliate")
  from_GenericProvider_subAffiliates  GenericProvider[]     @relation("GenericProvider_subAffiliates")
  from_GenericProvider_disallowSubaff GenericProvider[]     @relation("GenericProvider_disallowSubaff")
  from_GenericPlan_subAffiliates      GenericPlan[]         @relation("GenericPlan_subAffiliates")
  from_GenericPlan_disallowSubaff     GenericPlan[]         @relation("GenericPlan_disallowSubaff")
  from_Installer_subAffiliates        Installer[]           @relation("Installer_subAffiliates")

  @@index([affiliateId])
}

model Vertical {
  id                            String            @id @default(cuid())
  serviceId                     Int?
  name                          String            @default("")
  slug                          String            @unique @default("")
  title                         String            @default("")
  description                   String            @default("")
  icon                          Media?            @relation("Vertical_icon", fields: [iconId], references: [id])
  iconId                        String?           @map("icon")
  link                          Link?             @relation("Vertical_link", fields: [linkId], references: [id])
  linkId                        String?           @map("link")
  pages                         Page[]            @relation("Page_vertical")
  scripts                       Script[]          @relation("Script_verticals")
  journeyType                   String            @default("niche")
  csJourney                     String            @default("e2e")
  agentJourney                  String            @default("e2e")
  from_RetailerMatrix_vertical  RetailerMatrix[]  @relation("RetailerMatrix_vertical")
  from_Attribute_vertical       Attribute[]       @relation("Attribute_vertical")
  from_Filter_vertical          Filter[]          @relation("Filter_vertical")
  from_GenericProvider_vertical GenericProvider[] @relation("GenericProvider_vertical")
  from_Provider_vertical        Provider[]        @relation("Provider_vertical")

  @@index([iconId])
  @@index([linkId])
}

model BundleFormContainer {
  id               String          @id @default(cuid())
  label            String          @default("")
  isDefault        Boolean         @default(false)
  v2               Boolean         @default(false)
  hasAllAffiliates Boolean         @default(false)
  affiliate        Affiliate[]     @relation("Affiliate_bundleFormContainer")
  includeAllSubAff Boolean         @default(true)
  subAffiliate     SubAffiliate[]  @relation("BundleFormContainer_subAffiliate")
  page             String          @default("")
  formComponents   FormComponent[] @relation("BundleFormContainer_formComponents")
  formOrder        Json?           @default("[]")
  defaultProps     Json?           @default("{}")
  staticData       Json?
  createdAt        DateTime?       @default(now())
  updatedAt        DateTime?       @default(now()) @updatedAt
}

model Role {
  id                 String @id @default(cuid())
  name               String @default("")
  assignedTo         User[] @relation("Role_assignedTo")
  role               Json   @default("[]")
  user               Json   @default("[]")
  creditCards        Json   @default("[]")
  generic            Json   @default("[]")
  healthInsurance    Json   @default("[]")
  solar              Json   @default("[]")
  personalLoan       Json   @default("[]")
  broadband          Json   @default("[]")
  mobile             Json   @default("[]")
  energy             Json   @default("[]")
  bundle             Json   @default("[]")
  affiliate          Json   @default("[]")
  subAffiliate       Json   @default("[]")
  csSite             Json   @default("[]")
  vertical           Json   @default("[]")
  lms                Json   @default("[]")
  auditLog           Json   @default("[]")
  apiKey             Json   @default("[]")
  uiElements         Json   @default("[]")
  formElements       Json   @default("[]")
  scripts            Json   @default("[]")
  commision          Json   @default("[]")
  dialerList         Json   @default("[]")
  members            Json   @default("[]")
  pages              Json   @default("[]")
  passwordSetting    Json   @default("[]")
  mirn               Json   @default("[]")
  openEnergyBillRule Json   @default("[]")
  state              Json   @default("[]")
  tariffCode         Json   @default("[]")
  ignoreData         Json   @default("[]")
}

model User {
  id              String   @id @default(cuid())
  name            String   @default("")
  email           String   @unique @default("")
  password        String
  pages           Page[]   @relation("Page_author")
  roles           Role[]   @relation("Role_assignedTo")
  assignedDomains Domain[] @relation("User_assignedDomains")
}

model RetailerMatrix {
  id           String    @id @default(cuid())
  retailer     Provider? @relation("RetailerMatrix_retailer", fields: [retailerId], references: [id])
  retailerId   String?   @map("retailer")
  vertical     Vertical? @relation("RetailerMatrix_vertical", fields: [verticalId], references: [id])
  verticalId   String?   @map("vertical")
  propertyType String?
  saleType     String?
  energyType   String?
  state        String?
  range        String    @default("")
  moveIn       String?
  plan         Plan?     @relation("RetailerMatrix_plan", fields: [planId], references: [id])
  planId       String?   @map("plan")
  cost         Decimal   @postgresql.Decimal(18, 2)
  image        Media?    @relation("RetailerMatrix_image", fields: [imageId], references: [id])
  imageId      String?   @map("image")
  startDate    DateTime
  endDate      DateTime?
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @default(now()) @updatedAt

  @@index([retailerId])
  @@index([verticalId])
  @@index([planId])
  @@index([imageId])
}

model CheckBoxContent {
  id                        String        @id @default(cuid())
  name                      String        @default("")
  type                      String?       @default("required")
  order                     Int?
  content                   String        @default("")
  validationMessage         String        @default("")
  createdAt                 DateTime?     @default(now())
  updatedAt                 DateTime?     @default(now()) @updatedAt
  from_GenericPlan_consents GenericPlan[] @relation("GenericPlan_consents")
}

model CreditScore {
  id                             String         @id @default(cuid())
  name                           String         @default("")
  creditBureau                   String?
  scoreBand                      String?
  minCreditScore                 Int            @default(0)
  maxCreditScore                 Int            @default(0)
  from_CreditCard_creditScores   CreditCard[]   @relation("CreditCard_creditScores")
  from_PersonalLoan_creditScores PersonalLoan[] @relation("PersonalLoan_creditScores")
}

model Logo {
  id                         String            @id @default(cuid())
  name                       String            @default("")
  key                        String?
  media                      Media?            @relation("Logo_media", fields: [mediaId], references: [id])
  mediaId                    String?           @map("media")
  from_GenericProvider_logos GenericProvider[] @relation("GenericProvider_logos")

  @@index([mediaId])
}

model FormComponent {
  id                                      String                @id @default(cuid())
  name                                    String                @default("")
  key                                     String                @default("")
  label                                   String                @default("")
  type                                    String?               @default("main")
  tooltip                                 String                @default("")
  fields                                  FormField[]           @relation("FormComponent_fields")
  formGroups                              Json?                 @default("[]")
  defaultProps                            Json?                 @default("{}")
  scripts                                 Script[]              @relation("FormComponent_scripts")
  createdAt                               DateTime?             @default(now())
  updatedAt                               DateTime?             @default(now()) @updatedAt
  from_BundleFormContainer_formComponents BundleFormContainer[] @relation("BundleFormContainer_formComponents")
  from_FormField_subComponents            FormField[]           @relation("FormField_subComponents")
  from_CCFormContainer_formComponents     CCFormContainer[]     @relation("CCFormContainer_formComponents")
  from_HIFormContainer_formComponents     HIFormContainer[]     @relation("HIFormContainer_formComponents")
  from_PLFormContainer_formComponents     PLFormContainer[]     @relation("PLFormContainer_formComponents")
}

model FormField {
  id                        String          @id @default(cuid())
  name                      String          @default("")
  label                     String          @default("")
  key                       String          @default("")
  reviewDetailsLabel        String          @default("")
  placeholder               String          @default("")
  component                 String?
  tooltip                   String          @default("")
  infoText                  String          @default("")
  infoPosition              String?         @default("bottom")
  options                   String?
  validations               FormValidation? @relation("FormField_validations", fields: [validationsId], references: [id])
  validationsId             String?         @unique @map("validations")
  subComponents             FormComponent[] @relation("FormField_subComponents")
  defaultProps              Json?           @default("{}")
  scripts                   Script[]        @relation("FormField_scripts")
  createdAt                 DateTime?       @default(now())
  updatedAt                 DateTime?       @default(now()) @updatedAt
  content                   String          @default("")
  from_FormComponent_fields FormComponent[] @relation("FormComponent_fields")
}

model FormOption {
  id      String @id @default(cuid())
  key     String @unique @default("")
  label   String @default("")
  options Json?  @default("[{\"label\":\"LABEL\",\"value\":\"VALUE\"}]")
}

model FormValidation {
  id              String     @id @default(cuid())
  name            String     @default("")
  formField       FormField? @relation("FormField_validations")
  type            String     @default("string")
  typeMessage     String     @default("")
  required        Boolean    @default(true)
  requiredMessage String     @default("")
  length          Int?
  lengthMessage   String     @default("")
  min             String     @default("")
  minMessage      String     @default("")
  max             String     @default("")
  maxMessage      String     @default("")
  regEx           String     @default("")
  regExMessage    String     @default("")
  createdAt       DateTime?  @default(now())
  updatedAt       DateTime?  @default(now()) @updatedAt
}

model IgnoreList {
  id               String                @id @default(cuid())
  parameter        IgnoreParameter?      @relation("IgnoreList_parameter", fields: [parameterId], references: [id])
  parameterId      String?               @map("parameter")
  parameterData    IgnoreDataContent?    @relation("IgnoreList_parameterData", fields: [parameterDataId], references: [id])
  parameterDataId  String?               @map("parameterData")
  parameterContent String                @unique @default("")
  status           Boolean               @default(true)
  taggedAs         IgnoreListTaggedAType
  type             IgnoreType[]          @relation("IgnoreList_type")
  comments         String                @default("")

  @@index([parameterId])
  @@index([parameterDataId])
}

model IgnoreParameter {
  id                        String              @id @default(cuid())
  name                      String              @unique @default("")
  status                    Boolean             @default(true)
  type                      IgnoreType[]        @relation("IgnoreParameter_type")
  typeData                  IgnoreDataContent[] @relation("IgnoreParameter_typeData")
  comments                  String              @default("")
  createdAt                 DateTime?           @default(now())
  updatedAt                 DateTime?           @default(now()) @updatedAt
  from_IgnoreList_parameter IgnoreList[]        @relation("IgnoreList_parameter")
}

model IgnoreType {
  id                   String              @id @default(cuid())
  name                 String              @unique @default("")
  status               Boolean             @default(true)
  parameter            IgnoreParameter[]   @relation("IgnoreParameter_type")
  parameterData        IgnoreDataContent[] @relation("IgnoreType_parameterData")
  comments             String              @default("")
  createdAt            DateTime?           @default(now())
  updatedAt            DateTime?           @default(now()) @updatedAt
  from_IgnoreList_type IgnoreList[]        @relation("IgnoreList_type")
}

model IgnoreDataContent {
  id                            String            @id @default(cuid())
  text                          String            @unique @default("")
  from_IgnoreList_parameterData IgnoreList[]      @relation("IgnoreList_parameterData")
  from_IgnoreParameter_typeData IgnoreParameter[] @relation("IgnoreParameter_typeData")
  from_IgnoreType_parameterData IgnoreType[]      @relation("IgnoreType_parameterData")
}

model Domain {
  id                        String        @id @default(cuid())
  name                      String        @default("")
  description               String        @default("")
  hostname                  String        @unique @default("")
  generateSEO               String?       @default("allowed")
  pages                     Page[]        @relation("Page_domain")
  redirects                 Redirect[]    @relation("Domain_redirects")
  domainConfig              DomainConfig? @relation("Domain_domainConfig", fields: [domainConfigId], references: [id])
  domainConfigId            String?       @map("domainConfig")
  createdAt                 DateTime?     @default(now())
  updatedAt                 DateTime?     @default(now()) @updatedAt
  from_User_assignedDomains User[]        @relation("User_assignedDomains")

  @@index([domainConfigId])
}

model DomainConfig {
  id                    String      @id @default(cuid())
  title                 String      @default("")
  domains               Domain[]    @relation("Domain_domainConfig")
  metaTitle             String      @default("")
  metaDescription       String      @default("")
  favicon               Media?      @relation("DomainConfig_favicon", fields: [faviconId], references: [id])
  faviconId             String?     @map("favicon")
  primaryColor          String      @default("")
  secondaryColor        String      @default("")
  accentColor           String      @default("")
  fontUrl               String      @default("")
  fontFamily            String      @default("")
  headerLogo            Media?      @relation("DomainConfig_headerLogo", fields: [headerLogoId], references: [id])
  headerLogoId          String?     @map("headerLogo")
  headerLinkGroups      LinkGroup[] @relation("DomainConfig_headerLinkGroups")
  headerLinkGroupsOrder Json?       @default("[]")
  enableBlogs           Boolean     @default(false)
  footerLogo            Media?      @relation("DomainConfig_footerLogo", fields: [footerLogoId], references: [id])
  footerLogoId          String?     @map("footerLogo")
  footerLinkGroups      LinkGroup[] @relation("DomainConfig_footerLinkGroups")
  footerLinkGroupsOrder Json?       @default("[]")
  socialIcons           Link[]      @relation("DomainConfig_socialIcons")
  address               String      @default("")
  disclaimer            String      @default("")
  createdAt             DateTime?   @default(now())
  updatedAt             DateTime?   @default(now()) @updatedAt

  @@index([faviconId])
  @@index([headerLogoId])
  @@index([footerLogoId])
}

model Link {
  id                            String         @id @default(cuid())
  key                           String         @default("")
  label                         String         @default("")
  url                           String         @default("")
  icon                          Media?         @relation("Link_icon", fields: [iconId], references: [id])
  iconId                        String?        @map("icon")
  type                          String?
  from_Vertical_link            Vertical[]     @relation("Vertical_link")
  from_DomainConfig_socialIcons DomainConfig[] @relation("DomainConfig_socialIcons")
  from_LinkGroup_links          LinkGroup[]    @relation("LinkGroup_links")

  @@index([iconId])
}

model LinkGroup {
  id                                 String         @id @default(cuid())
  label                              String         @default("")
  key                                String         @default("")
  links                              Link[]         @relation("LinkGroup_links")
  linksOrder                         Json?          @default("[]")
  from_DomainConfig_headerLinkGroups DomainConfig[] @relation("DomainConfig_headerLinkGroups")
  from_DomainConfig_footerLinkGroups DomainConfig[] @relation("DomainConfig_footerLinkGroups")
}

model Page {
  id                String      @id @default(cuid())
  title             String      @default("")
  description       String      @default("")
  domain            Domain?     @relation("Page_domain", fields: [domainId], references: [id])
  domainId          String?     @map("domain")
  vertical          Vertical?   @relation("Page_vertical", fields: [verticalId], references: [id])
  verticalId        String?     @map("vertical")
  type              String
  pageConfig        PageConfig? @relation("Page_pageConfig", fields: [pageConfigId], references: [id])
  pageConfigId      String?     @unique @map("pageConfig")
  slug              String      @default("")
  url               String      @default("")
  status            String      @default("draft")
  content           Json        @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  section           Section[]   @relation("Section_pages")
  widgets           Widget[]    @relation("Page_widgets")
  scripts           Script[]    @relation("Page_scripts")
  thumbnail         Media?      @relation("Page_thumbnail", fields: [thumbnailId], references: [id])
  thumbnailId       String?     @map("thumbnail")
  heroImage         Media?      @relation("Page_heroImage", fields: [heroImageId], references: [id])
  heroImageId       String?     @map("heroImage")
  subHead           String      @default("")
  supportingText    String      @default("")
  linkLabel         String      @default("")
  linkUrl           String      @default("")
  author            User?       @relation("Page_author", fields: [authorId], references: [id])
  authorId          String?     @map("author")
  publishDate       DateTime?
  tags              Tag[]       @relation("Page_tags")
  seoIndex          String?     @default("allowed")
  metaRobots        String      @default("index,follow")
  createdAt         DateTime?   @default(now())
  updatedAt         DateTime?   @default(now()) @updatedAt
  from_Filter_pages Filter[]    @relation("Filter_pages")

  @@index([domainId])
  @@index([verticalId])
  @@index([thumbnailId])
  @@index([heroImageId])
  @@index([authorId])
}

model PageConfig {
  id             String    @id @default(cuid())
  title          String    @default("")
  rcCode         String    @default("")
  ivrNumber      Int?
  page           Page?     @relation("Page_pageConfig")
  favicon        Media?    @relation("PageConfig_favicon", fields: [faviconId], references: [id])
  faviconId      String?   @map("favicon")
  headerLogo     Media?    @relation("PageConfig_headerLogo", fields: [headerLogoId], references: [id])
  headerLogoId   String?   @map("headerLogo")
  primaryColor   String    @default("")
  secondaryColor String    @default("")
  accentColor    String    @default("")
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @default(now()) @updatedAt

  @@index([faviconId])
  @@index([headerLogoId])
}

model Redirect {
  id        String    @id @default(cuid())
  domain    Domain[]  @relation("Domain_redirects")
  from      String    @default("")
  to        String    @default("")
  type      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
}

model Section {
  id           String    @id @default(cuid())
  sectionName  String    @default("")
  sectionOrder Int?
  content      Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  pages        Page?     @relation("Section_pages", fields: [pagesId], references: [id])
  pagesId      String?   @map("pages")
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @default(now()) @updatedAt

  @@index([pagesId])
}

model Tag {
  id    String @id @default(cuid())
  name  String @default("")
  pages Page[] @relation("Page_tags")
}

model Widget {
  id        String    @id @default(cuid())
  title     String    @default("")
  slug      String    @unique @default("")
  content   Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  pages     Page[]    @relation("Page_widgets")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
}

model Attribute {
  id                             String            @id @default(cuid())
  title                          String            @default("")
  key                            String            @unique @default("")
  vertical                       Vertical?         @relation("Attribute_vertical", fields: [verticalId], references: [id])
  verticalId                     String?           @map("vertical")
  component                      Component?        @relation("Attribute_component", fields: [componentId], references: [id])
  componentId                    String?           @map("component")
  tooltip                        String            @default("")
  formatter                      String            @default("")
  formatterOptions               String            @default("")
  fields                         Field[]           @relation("Attribute_fields")
  attributes                     Attribute[]       @relation("Attribute_attributes")
  containers                     Container[]       @relation("Attribute_containers")
  createdAt                      DateTime?         @default(now())
  updatedAt                      DateTime?         @default(now()) @updatedAt
  from_Attribute_attributes      Attribute[]       @relation("Attribute_attributes")
  from_Filter_attribute          Filter[]          @relation("Filter_attribute")
  from_CustomAttribute_attribute CustomAttribute[] @relation("CustomAttribute_attribute")

  @@index([verticalId])
  @@index([componentId])
}

model Component {
  id                    String      @id @default(cuid())
  name                  String      @default("")
  slug                  String      @default("")
  attributes            Attribute[] @relation("Attribute_component")
  title                 String      @default("")
  tooltip               String      @default("")
  createdAt             DateTime?   @default(now())
  updatedAt             DateTime?   @default(now()) @updatedAt
  from_Script_component Script[]    @relation("Script_component")
}

model Container {
  id         String      @id @default(cuid())
  name       String      @default("")
  attributes Attribute[] @relation("Attribute_containers")
}

model Field {
  id                    String      @id @default(cuid())
  key                   String      @default("")
  name                  String      @unique @default("")
  title                 String      @default("")
  isDynamic             Boolean     @default(false)
  tooltip               String      @default("")
  fields                Field[]     @relation("Field_fields")
  createdAt             DateTime?   @default(now())
  updatedAt             DateTime?   @default(now()) @updatedAt
  from_Attribute_fields Attribute[] @relation("Attribute_fields")
  from_Field_fields     Field[]     @relation("Field_fields")
}

model Filter {
  id                   String     @id @default(cuid())
  title                String     @default("")
  type                 String     @default("")
  placeholder          String     @default("")
  formatter            Boolean    @default(false)
  aggregate            Boolean    @default(false)
  min                  Int?
  max                  Int?
  value                String     @default("")
  collapsed            Boolean    @default(false)
  isApplied            Boolean    @default(false)
  attribute            Attribute? @relation("Filter_attribute", fields: [attributeId], references: [id])
  attributeId          String?    @map("attribute")
  elements             Filter[]   @relation("Filter_elements")
  vertical             Vertical?  @relation("Filter_vertical", fields: [verticalId], references: [id])
  verticalId           String?    @map("vertical")
  pages                Page[]     @relation("Filter_pages")
  from_Filter_elements Filter[]   @relation("Filter_elements")

  @@index([attributeId])
  @@index([verticalId])
}

model CustomAttribute {
  id                           String       @id @default(cuid())
  name                         String       @default("")
  attribute                    Attribute?   @relation("CustomAttribute_attribute", fields: [attributeId], references: [id])
  attributeId                  String?      @map("attribute")
  headerTooltip                String       @default("")
  infoTooltip                  String       @default("")
  formatter                    String       @default("")
  from_CreditCard_customConfig CreditCard[] @relation("CreditCard_customConfig")

  @@index([attributeId])
}

model UploadCategory {
  id                            String           @id @default(cuid())
  label                         String           @default("")
  key                           String?
  documents                     UploadDocument[] @relation("UploadCategory_documents")
  infoText                      String           @default("")
  requiredLength                Int              @default(1)
  createdAt                     DateTime?        @default(now())
  updatedAt                     DateTime?        @default(now()) @updatedAt
  from_CCUploadGroup_categories CCUploadGroup[]  @relation("CCUploadGroup_categories")
}

model UploadDocument {
  id                            String           @id @default(cuid())
  label                         String           @default("")
  key                           String?
  isRequired                    Boolean          @default(false)
  order                         Int?
  createdAt                     DateTime?        @default(now())
  updatedAt                     DateTime?        @default(now()) @updatedAt
  from_UploadCategory_documents UploadCategory[] @relation("UploadCategory_documents")
}

model GenericProvider {
  id                    String         @id @default(cuid())
  name                  String         @default("")
  slug                  String         @unique @default("")
  businessName          String         @default("")
  legalName             String         @default("")
  vertical              Vertical?      @relation("GenericProvider_vertical", fields: [verticalId], references: [id])
  verticalId            String?        @map("vertical")
  affiliates            Affiliate[]    @relation("GenericProvider_affiliates")
  includeAllSubAff      Boolean        @default(true)
  subAffiliates         SubAffiliate[] @relation("GenericProvider_subAffiliates")
  disallowAff           Affiliate[]    @relation("GenericProvider_disallowAff")
  disallowSubaff        SubAffiliate[] @relation("GenericProvider_disallowSubaff")
  country               String?
  logos                 Logo[]         @relation("GenericProvider_logos")
  plans                 GenericPlan[]  @relation("GenericPlan_provider")
  addons                GenericAddon[] @relation("GenericAddon_provider")
  qaEmails              Member[]       @relation("GenericProvider_qaEmails")
  termsCondition        String         @default("")
  postSubmissionContent String         @default("")
  applyNowContent       String         @default("")
  status                Boolean        @default(true)
  csStatus              Boolean        @default(true)
  agentStatus           Boolean        @default(true)
  applyStatus           Boolean        @default(true)
  customConfig          Json?
  createdAt             DateTime?      @default(now())
  updatedAt             DateTime?      @default(now()) @updatedAt

  @@index([verticalId])
}

model GenericPlan {
  id                String             @id @default(cuid())
  label             String             @default("")
  name              String             @default("")
  description       GenericPlanField?  @relation("GenericPlan_description", fields: [descriptionId], references: [id])
  descriptionId     String?            @map("description")
  benefits          GenericPlanField[] @relation("GenericPlan_benefits")
  features          GenericPlanField[] @relation("GenericPlan_features")
  parameters        GenericPlanField[] @relation("GenericPlan_parameters")
  attachments       GenericPlanField[] @relation("GenericPlan_attachments")
  termsCondition    GenericPlanField?  @relation("GenericPlan_termsCondition", fields: [termsConditionId], references: [id])
  termsConditionId  String?            @map("termsCondition")
  specialOffer      GenericPlanField?  @relation("GenericPlan_specialOffer", fields: [specialOfferId], references: [id])
  specialOfferId    String?            @map("specialOffer")
  preferenceOrder   Int?
  viewDetails       GenericPlanField?  @relation("GenericPlan_viewDetails", fields: [viewDetailsId], references: [id])
  viewDetailsId     String?            @map("viewDetails")
  clickoutURL       GenericPlanField?  @relation("GenericPlan_clickoutURL", fields: [clickoutURLId], references: [id])
  clickoutURLId     String?            @map("clickoutURL")
  consents          CheckBoxContent[]  @relation("GenericPlan_consents")
  provider          GenericProvider?   @relation("GenericPlan_provider", fields: [providerId], references: [id])
  providerId        String?            @map("provider")
  affiliates        Affiliate[]        @relation("GenericPlan_affiliates")
  includeAllSubAff  Boolean            @default(true)
  subAffiliates     SubAffiliate[]     @relation("GenericPlan_subAffiliates")
  disallowAff       Affiliate[]        @relation("GenericPlan_disallowAff")
  disallowSubaff    SubAffiliate[]     @relation("GenericPlan_disallowSubaff")
  addons            GenericAddon[]     @relation("GenericAddon_plans")
  applyNowContent   String             @default("")
  status            Boolean            @default(true)
  csStatus          Boolean            @default(true)
  agentStatus       Boolean            @default(true)
  viewStatus        Boolean            @default(true)
  agentSendStatus   Boolean            @default(true)
  clickoutStatus    Boolean            @default(true)
  inboundCallStatus Boolean            @default(false)
  applyStatus       Boolean            @default(true)
  agentApplyStatus  Boolean            @default(false)
  customConfig      Json?
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @default(now()) @updatedAt

  @@index([descriptionId])
  @@index([termsConditionId])
  @@index([specialOfferId])
  @@index([viewDetailsId])
  @@index([clickoutURLId])
  @@index([providerId])
}

model GenericPlanField {
  id                              String        @id @default(cuid())
  name                            String        @default("")
  label                           String        @default("")
  key                             String        @default("")
  type                            String?
  value                           String        @default("")
  formatter                       String?
  suffix                          String        @default("")
  tooltip                         String        @default("")
  content                         String        @default("")
  hasListing                      Boolean       @default(true)
  createdAt                       DateTime?     @default(now())
  updatedAt                       DateTime?     @default(now()) @updatedAt
  from_GenericPlan_description    GenericPlan[] @relation("GenericPlan_description")
  from_GenericPlan_benefits       GenericPlan[] @relation("GenericPlan_benefits")
  from_GenericPlan_features       GenericPlan[] @relation("GenericPlan_features")
  from_GenericPlan_parameters     GenericPlan[] @relation("GenericPlan_parameters")
  from_GenericPlan_attachments    GenericPlan[] @relation("GenericPlan_attachments")
  from_GenericPlan_termsCondition GenericPlan[] @relation("GenericPlan_termsCondition")
  from_GenericPlan_specialOffer   GenericPlan[] @relation("GenericPlan_specialOffer")
  from_GenericPlan_viewDetails    GenericPlan[] @relation("GenericPlan_viewDetails")
  from_GenericPlan_clickoutURL    GenericPlan[] @relation("GenericPlan_clickoutURL")
}

model GenericAddon {
  id         String           @id @default(cuid())
  addonName  String           @default("")
  price      String           @default("")
  plans      GenericPlan[]    @relation("GenericAddon_plans")
  provider   GenericProvider? @relation("GenericAddon_provider", fields: [providerId], references: [id])
  providerId String?          @map("provider")
  createdAt  DateTime?        @default(now())
  updatedAt  DateTime?        @default(now()) @updatedAt

  @@index([providerId])
}

model Addon {
  id            String      @id @default(cuid())
  uuid          String      @unique @default("")
  addonFields   AddonField? @relation("Addon_addonFields", fields: [addonFieldsId], references: [id])
  addonFieldsId String?     @map("addonFields")
  addonGroup    String?
  price         String      @default("")
  isMandatory   Int?
  include       Int?
  plans         Plan[]      @relation("Addon_plans")
  createdAt     DateTime?   @default(now())
  updatedAt     DateTime?   @default(now()) @updatedAt

  @@index([addonFieldsId])
}

model AddonField {
  id        String    @id @default(cuid())
  addonId   Int       @unique
  addonName String    @default("")
  category  Int?
  addons    Addon[]   @relation("Addon_addonFields")
  scripts   Script[]  @relation("AddonField_scripts")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
}

model Plan {
  id                       String           @id @default(cuid())
  uuid                     String           @unique @default("")
  planId                   Int
  name                     String           @default("")
  planStatus               Boolean          @default(false)
  scripts                  Script[]         @relation("Plan_scripts")
  provider                 Provider?        @relation("Plan_provider", fields: [providerId], references: [id])
  providerId               String?          @map("provider")
  addons                   Addon[]          @relation("Addon_plans")
  createdAt                DateTime?        @default(now())
  updatedAt                DateTime?        @default(now()) @updatedAt
  from_RetailerMatrix_plan RetailerMatrix[] @relation("RetailerMatrix_plan")

  @@index([providerId])
}

model Provider {
  id                           String           @id @default(cuid())
  providerId                   String           @unique @default("")
  name                         String           @default("")
  slug                         String           @unique @default("")
  vertical                     Vertical[]       @relation("Provider_vertical")
  scripts                      Script[]         @relation("Provider_scripts")
  plans                        Plan[]           @relation("Plan_provider")
  logo                         Media?           @relation("Provider_logo", fields: [logoId], references: [id])
  logoId                       String?          @map("logo")
  postSubmissionContent        String           @default("")
  australianCreditLicence      Int?
  createdAt                    DateTime?        @default(now())
  updatedAt                    DateTime?        @default(now()) @updatedAt
  from_RetailerMatrix_retailer RetailerMatrix[] @relation("RetailerMatrix_retailer")

  @@index([logoId])
}

model ProviderCreditCard {
  id                      String            @id @default(cuid())
  status                  Boolean           @default(true)
  slug                    String            @unique @default("")
  providerId              String            @unique @default("")
  name                    String            @default("")
  logo                    Media?            @relation("ProviderCreditCard_logo", fields: [logoId], references: [id])
  logoId                  String?           @map("logo")
  postSubmissionContent   String            @default("")
  australianCreditLicence Int?
  hasAllAffiliates        Boolean           @default(false)
  affiliate               Affiliate[]       @relation("Affiliate_ccProvider")
  includeAllSubAff        Boolean           @default(true)
  subAffiliate            SubAffiliate[]    @relation("ProviderCreditCard_subAffiliate")
  creditCards             CreditCard[]      @relation("CreditCard_provider")
  formContainer           CCFormContainer[] @relation("CCFormContainer_provider")
  uploadGroup             CCUploadGroup[]   @relation("CCUploadGroup_provider")
  scripts                 Script[]          @relation("ProviderCreditCard_scripts")
  clickoutStatus          String            @default("no")
  clickoutParams          Json?
  createdAt               DateTime?         @default(now())
  updatedAt               DateTime?         @default(now()) @updatedAt

  @@index([logoId])
}

model CreditCard {
  id                  String               @id @default(cuid())
  isDiscontinued      Boolean              @default(false)
  name                String               @default("")
  description         String               @default("")
  uuid                String               @unique @default("")
  slug                String               @default("")
  image               Media?               @relation("CreditCard_image", fields: [imageId], references: [id])
  imageId             String?              @map("image")
  provider            ProviderCreditCard?  @relation("CreditCard_provider", fields: [providerId], references: [id])
  providerId          String?              @map("provider")
  hasAllAffiliates    Boolean              @default(false)
  affiliate           Affiliate[]          @relation("Affiliate_ccPlan")
  includeAllSubAff    Boolean              @default(true)
  subAffiliate        SubAffiliate[]       @relation("CreditCard_subAffiliate")
  details             CardDetail?          @relation("CardDetail_creditCard")
  fees                CreditCardFee?       @relation("CreditCard_fees", fields: [feesId], references: [id])
  feesId              String?              @unique @map("fees")
  rates               Rate?                @relation("CreditCard_rates", fields: [ratesId], references: [id])
  ratesId             String?              @unique @map("rates")
  overseasSpends      OverseasSpend?       @relation("CreditCard_overseasSpends", fields: [overseasSpendsId], references: [id])
  overseasSpendsId    String?              @unique @map("overseasSpends")
  eligibility         CCEligibility?       @relation("CCEligibility_creditCard")
  documents           CCDocument?          @relation("CCDocument_creditCard")
  balanceTransfer     BalanceTransfer?     @relation("BalanceTransfer_creditCard")
  rewardProgram       RewardProgram?       @relation("CreditCard_rewardProgram", fields: [rewardProgramId], references: [id])
  rewardProgramId     String?              @unique @map("rewardProgram")
  cardFeatures        CardFeature[]        @relation("CardFeature_creditCard")
  earnRates           EarnRate[]           @relation("EarnRate_creditCard")
  specials            Special[]            @relation("Special_creditCard")
  perks               CCPerk[]             @relation("CCPerk_creditCard")
  uploadGroup         CCUploadGroup[]      @relation("CCUploadGroup_creditCard")
  additionalQuestions AdditionalQuestion[] @relation("AdditionalQuestion_creditCard")
  creditScores        CreditScore[]        @relation("CreditCard_creditScores")
  customConfig        CustomAttribute[]    @relation("CreditCard_customConfig")
  clickoutStatus      String               @default("no")
  clickoutParams      Json?
  createdAt           DateTime?            @default(now())
  updatedAt           DateTime?            @default(now()) @updatedAt

  @@index([imageId])
  @@index([providerId])
}

model CardDetail {
  id                          String      @id @default(cuid())
  creditCard                  CreditCard? @relation("CardDetail_creditCard", fields: [creditCardId], references: [id])
  creditCardId                String?     @unique @map("creditCard")
  cardNetwork                 String      @default("visa")
  cardLevel                   String      @default("standard")
  isLowRate                   Boolean     @default(false)
  isLowFee                    Boolean     @default(false)
  isReward                    Boolean     @default(false)
  isStoreCard                 Boolean     @default(false)
  quickApproval               Boolean     @default(false)
  hasCashbackOffers           Boolean     @default(false)
  interestFreeDays            Int?
  interestFreeDaysDescription String      @default("")
  minRepaymentDollars         Decimal?    @postgresql.Decimal(18, 2)
  minRepaymentPercent         Decimal?    @postgresql.Decimal(18, 2)
  minCreditLimit              Int?
  maxCreditLimit              Int?
  ewalletPaymentOptions       Json        @default("[]")
  calculationMethodology      String      @default("")
  bonusPoints                 Int?
  bonusPointDescription       String      @default("")
  cashbackDiscounts           String      @default("")
}

model CardFeature {
  id           String      @id @default(cuid())
  name         String      @default("")
  creditCard   CreditCard? @relation("CardFeature_creditCard", fields: [creditCardId], references: [id])
  creditCardId String?     @map("creditCard")
  description  String      @default("")

  @@index([creditCardId])
}

model Rate {
  id                    String      @id @default(cuid())
  creditCard            CreditCard? @relation("CreditCard_rates")
  cashAdvRateIntro      Decimal?    @postgresql.Decimal(18, 2)
  cashAdvRateIntroTerm  Int?
  cashAdvRateStandard   Decimal?    @postgresql.Decimal(18, 2)
  purchaseRateIntro     Decimal?    @postgresql.Decimal(18, 2)
  purchaseRateIntroTerm Int?
  purchaseRateStandard  Decimal?    @postgresql.Decimal(18, 2)
}

model CreditCardFee {
  id                           String      @id @default(cuid())
  creditCard                   CreditCard? @relation("CreditCard_fees")
  annualFeeIntro               Decimal?    @postgresql.Decimal(18, 2)
  annualFeeIntroTerm           Int?
  annualFeeStandard            Decimal?    @default("0") @postgresql.Decimal(18, 2)
  annualFeeSpendWaiver         Decimal?    @postgresql.Decimal(18, 2)
  annualFeeSpendWaiverTerm     Int?
  annualFeeOtherWaiver         String      @default("")
  cashAdvanceMinFee            Decimal?    @postgresql.Decimal(18, 2)
  cashAdvanceMaxFee            Decimal?    @postgresql.Decimal(18, 2)
  cashAdvancePercent           Decimal?    @postgresql.Decimal(18, 2)
  atmFeeStandard               Decimal?    @postgresql.Decimal(18, 2)
  latePaymentFee               Decimal?    @postgresql.Decimal(18, 2)
  additionalCardHolders        Int?
  additionalCardHoldersFee     Decimal?    @postgresql.Decimal(18, 2)
  crossBorderFee               Decimal?    @postgresql.Decimal(18, 2)
  crossBorderFeePercent        Decimal?    @postgresql.Decimal(18, 2)
  overLimitFee                 Decimal?    @postgresql.Decimal(18, 2)
  duplicateStatementFee        Decimal?    @postgresql.Decimal(18, 2)
  dishonourFee                 Decimal?    @postgresql.Decimal(18, 2)
  paperStatementFee            Decimal?    @postgresql.Decimal(18, 2)
  informationRequestFee        Decimal?    @postgresql.Decimal(18, 2)
  voucherRequestFee            Decimal?    @postgresql.Decimal(18, 2)
  overTheCounterTransactionFee Decimal?    @postgresql.Decimal(18, 2)
}

model CCFormContainer {
  id               String               @id @default(cuid())
  label            String               @default("")
  provider         ProviderCreditCard[] @relation("CCFormContainer_provider")
  isDefault        Boolean              @default(false)
  v2               Boolean              @default(false)
  hasAllAffiliates Boolean              @default(false)
  affiliate        Affiliate[]          @relation("Affiliate_ccFormContainer")
  includeAllSubAff Boolean              @default(true)
  subAffiliate     SubAffiliate[]       @relation("CCFormContainer_subAffiliate")
  page             String               @default("")
  formComponents   FormComponent[]      @relation("CCFormContainer_formComponents")
  formOrder        Json?                @default("[]")
  defaultProps     Json?                @default("{}")
  staticData       Json?
  scripts          Script[]             @relation("CCFormContainer_scripts")
  createdAt        DateTime?            @default(now())
  updatedAt        DateTime?            @default(now()) @updatedAt
}

model CCPerk {
  id             String      @id @default(cuid())
  name           String      @default("")
  type           Json        @default("[]")
  value          Int?
  assumptions    String      @default("")
  conditions     String      @default("")
  days           Int?
  daysConditions String      @default("")
  creditCard     CreditCard? @relation("CCPerk_creditCard", fields: [creditCardId], references: [id])
  creditCardId   String?     @map("creditCard")

  @@index([creditCardId])
}

model RewardProgram {
  id                 String      @id @default(cuid())
  creditCard         CreditCard? @relation("CreditCard_rewardProgram")
  name               String      @default("")
  isReward           Boolean     @default(false)
  isFrequentFlyer    Boolean     @default(false)
  icon               Media?      @relation("RewardProgram_icon", fields: [iconId], references: [id])
  iconId             String?     @map("icon")
  rewards            Reward[]    @relation("RewardProgram_rewards")
  pointsCondition    String      @default("")
  rewardProgramFee   Decimal?    @postgresql.Decimal(18, 2)
  rewardPointsExpiry String      @default("")

  @@index([iconId])
}

model CCDocument {
  id                          String      @id @default(cuid())
  creditCard                  CreditCard? @relation("CCDocument_creditCard", fields: [creditCardId], references: [id])
  creditCardId                String?     @unique @map("creditCard")
  keyFactSheet                Media?      @relation("CCDocument_keyFactSheet", fields: [keyFactSheetId], references: [id])
  keyFactSheetId              String?     @map("keyFactSheet")
  targetMarketDetermination   Media?      @relation("CCDocument_targetMarketDetermination", fields: [targetMarketDeterminationId], references: [id])
  targetMarketDeterminationId String?     @map("targetMarketDetermination")
  document                    Media[]     @relation("CCDocument_document")
  createdAt                   DateTime?   @default(now())
  updatedAt                   DateTime?   @default(now()) @updatedAt

  @@index([keyFactSheetId])
  @@index([targetMarketDeterminationId])
}

model BalanceTransfer {
  id                          String      @id @default(cuid())
  creditCard                  CreditCard? @relation("BalanceTransfer_creditCard", fields: [creditCardId], references: [id])
  creditCardId                String?     @unique @map("creditCard")
  btIntro                     Decimal?    @postgresql.Decimal(18, 2)
  btIntroTerm                 Int?
  btRateStandard              Decimal?    @postgresql.Decimal(18, 2)
  btConditions                String      @default("")
  minBTAmount                 Decimal?    @postgresql.Decimal(18, 2)
  maxBTAmount                 Decimal?    @postgresql.Decimal(18, 2)
  btRevertRate                Decimal?    @postgresql.Decimal(18, 2)
  isBTFromPersonalLoanAllowed Boolean     @default(false)
  btFeeDollars                Decimal?    @postgresql.Decimal(18, 2)
  btFeePercent                Decimal?    @postgresql.Decimal(18, 2)
  btNotAllowedFromBanks       Json        @default("[]")
}

model EarnRate {
  id                 String                   @id @default(cuid())
  creditCard         CreditCard?              @relation("EarnRate_creditCard", fields: [creditCardId], references: [id])
  creditCardId       String?                  @map("creditCard")
  isGenericEarnRate  Boolean                  @default(true)
  isUncappedEarnRate Boolean                  @default(false)
  pointsEarned       Decimal                  @postgresql.Decimal(18, 2)
  spendAt            String                   @default("")
  rangeMinimum       Int?
  rangeMax           Int?
  rangeUnit          EarnRateRangeUnitType?
  rangePeriod        EarnRateRangePeriodType?

  @@index([creditCardId])
}

model OverseasSpend {
  id                                 String      @id @default(cuid())
  creditCard                         CreditCard? @relation("CreditCard_overseasSpends")
  foreignExchangeFeeStandard         Decimal?    @postgresql.Decimal(18, 2)
  overseascashAdvancerate            Decimal?    @postgresql.Decimal(18, 2)
  cashAdvanceFeeInternational        Decimal?    @postgresql.Decimal(18, 2)
  cashAdvanceFeeInternationalPercent Decimal?    @postgresql.Decimal(18, 2)
  fxATMFeeDollar                     Decimal?    @postgresql.Decimal(18, 2)
  fxATMFeePercent                    Decimal?    @postgresql.Decimal(18, 2)
  overseasReplaceCardFee             Decimal?    @postgresql.Decimal(18, 2)
}

model CCEligibility {
  id                   String      @id @default(cuid())
  creditCard           CreditCard? @relation("CCEligibility_creditCard", fields: [creditCardId], references: [id])
  creditCardId         String?     @unique @map("creditCard")
  minAge               Int?
  minIncome            Int?
  eligibilityCondition String      @default("")
  residency            Json        @default("[]")
  visaValidity         Int?
  createdAt            DateTime?   @default(now())
  updatedAt            DateTime?   @default(now()) @updatedAt
}

model Special {
  id           String      @id @default(cuid())
  creditCard   CreditCard? @relation("Special_creditCard", fields: [creditCardId], references: [id])
  creditCardId String?     @map("creditCard")
  name         String      @default("")
  type         Json        @default("[]")
  offerType    String      @default("offer")
  introText    String      @default("")
  blurb        String      @default("")
  startDate    DateTime
  endDate      DateTime?
  url          String      @default("")
  createdAt    DateTime?   @default(now())
  updatedAt    DateTime?   @default(now()) @updatedAt

  @@index([creditCardId])
}

model Reward {
  id                         String          @id @default(cuid())
  name                       String          @unique @default("")
  slug                       String          @default("")
  from_RewardProgram_rewards RewardProgram[] @relation("RewardProgram_rewards")
}

model AdditionalQuestion {
  id           String       @id @default(cuid())
  name         String       @default("")
  creditCard   CreditCard[] @relation("AdditionalQuestion_creditCard")
  tooltip      String       @default("")
  infoText     String       @default("")
  infoPosition String?      @default("bottom")
}

model CCUploadGroup {
  id         String               @id @default(cuid())
  label      String               @default("")
  key        String?
  categories UploadCategory[]     @relation("CCUploadGroup_categories")
  order      Int?
  provider   ProviderCreditCard[] @relation("CCUploadGroup_provider")
  creditCard CreditCard[]         @relation("CCUploadGroup_creditCard")
  createdAt  DateTime?            @default(now())
  updatedAt  DateTime?            @default(now()) @updatedAt
}

model Mirn {
  id        String    @id @default(cuid())
  fileName  String    @unique @default("")
  status    Boolean   @default(false)
  createdAt DateTime? @default(now())
}

model TariffCode {
  id           String @id @default(cuid())
  serialNo     String @default("")
  distributor  String @default("")
  provider     String @default("")
  propertyType String @default("")
  states       String @default("")
  tariffCode   String @unique @default("")
  tariffType   String @default("")
  vertical     String @default("")
}

model OpenEnergyBillRule {
  id               String    @id @default(cuid())
  transactionUType String
  value            String    @default("")
  isExclusive      Boolean   @default(false)
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @default(now()) @updatedAt
}

model HIProvider {
  id                      String            @id @default(cuid())
  status                  Boolean           @default(true)
  slug                    String            @unique @default("")
  providerId              String            @unique @default("")
  name                    String            @default("")
  logo                    Media?            @relation("HIProvider_logo", fields: [logoId], references: [id])
  logoId                  String?           @map("logo")
  postSubmissionContent   String            @default("")
  australianCreditLicence Int?
  hasAllAffiliates        Boolean           @default(false)
  affiliate               Affiliate[]       @relation("Affiliate_hiProvider")
  includeAllSubAff        Boolean           @default(true)
  subAffiliate            SubAffiliate[]    @relation("HIProvider_subAffiliate")
  formContainer           HIFormContainer[] @relation("HIFormContainer_provider")
  scripts                 Script[]          @relation("HIProvider_scripts")
  clickoutStatus          String            @default("no")
  clickoutParams          Json?
  createdAt               DateTime?         @default(now())
  updatedAt               DateTime?         @default(now()) @updatedAt

  @@index([logoId])
}

model HIFormContainer {
  id               String          @id @default(cuid())
  label            String          @default("")
  provider         HIProvider[]    @relation("HIFormContainer_provider")
  isDefault        Boolean         @default(false)
  v2               Boolean         @default(false)
  hasAllAffiliates Boolean         @default(false)
  affiliate        Affiliate[]     @relation("Affiliate_hiFormContainer")
  includeAllSubAff Boolean         @default(true)
  subAffiliate     SubAffiliate[]  @relation("HIFormContainer_subAffiliate")
  page             String          @default("")
  formComponents   FormComponent[] @relation("HIFormContainer_formComponents")
  formOrder        Json?           @default("[]")
  defaultProps     Json?           @default("{}")
  staticData       Json?
  scripts          Script[]        @relation("HIFormContainer_scripts")
  createdAt        DateTime?       @default(now())
  updatedAt        DateTime?       @default(now()) @updatedAt
}

model HIRebate {
  id       String @id @default(cuid())
  name     String @default("")
  ageGroup String
  tier     String
  rebate   Float
}

model ProductTier {
  id             String          @id @default(cuid())
  name           String          @unique @default("")
  hospitalCovers HospitalCover[] @relation("HospitalCover_productTiers")
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime?       @default(now()) @updatedAt
}

model HospitalCover {
  id           String        @id @default(cuid())
  name         String        @unique @default("")
  description  String        @default("")
  productTiers ProductTier[] @relation("HospitalCover_productTiers")
  isEnabled    Boolean       @default(true)
  createdAt    DateTime?     @default(now())
  updatedAt    DateTime?     @default(now()) @updatedAt
}

model ExtrasCover {
  id          String    @id @default(cuid())
  name        String    @unique @default("")
  description String    @default("")
  isEnabled   Boolean   @default(true)
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @default(now()) @updatedAt
}

model PaymentFrequency {
  id        String    @id @default(cuid())
  label     String    @unique @default("")
  name      String    @unique @default("")
  numOfDays Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
}

model PLProvider {
  id                      String            @id @default(cuid())
  status                  Boolean           @default(true)
  slug                    String            @unique @default("")
  providerId              String            @unique @default("")
  name                    String            @default("")
  logo                    Media?            @relation("PLProvider_logo", fields: [logoId], references: [id])
  logoId                  String?           @map("logo")
  postSubmissionContent   String            @default("")
  australianCreditLicence Int?
  hasAllAffiliates        Boolean           @default(false)
  affiliate               Affiliate[]       @relation("Affiliate_plProvider")
  includeAllSubAff        Boolean           @default(true)
  subAffiliate            SubAffiliate[]    @relation("PLProvider_subAffiliate")
  loans                   PersonalLoan[]    @relation("PersonalLoan_provider")
  formContainer           PLFormContainer[] @relation("PLFormContainer_provider")
  scripts                 Script[]          @relation("PLProvider_scripts")
  clickoutStatus          String            @default("no")
  clickoutParams          Json?
  createdAt               DateTime?         @default(now())
  updatedAt               DateTime?         @default(now()) @updatedAt

  @@index([logoId])
}

model PersonalLoan {
  id               String         @id @default(cuid())
  isDiscontinued   Boolean        @default(false)
  name             String         @default("")
  description      String         @default("")
  uuid             String         @unique @default("")
  slug             String         @default("")
  image            Media?         @relation("PersonalLoan_image", fields: [imageId], references: [id])
  imageId          String?        @map("image")
  provider         PLProvider?    @relation("PersonalLoan_provider", fields: [providerId], references: [id])
  providerId       String?        @map("provider")
  hasAllAffiliates Boolean        @default(false)
  affiliate        Affiliate[]    @relation("Affiliate_plPlan")
  includeAllSubAff Boolean        @default(true)
  subAffiliate     SubAffiliate[] @relation("PersonalLoan_subAffiliate")
  loanDetail       PLLoanDetail?  @relation("PersonalLoan_loanDetail", fields: [loanDetailId], references: [id])
  loanDetailId     String?        @unique @map("loanDetail")
  fees             PLFee?         @relation("PersonalLoan_fees", fields: [feesId], references: [id])
  feesId           String?        @unique @map("fees")
  features         PLFeature?     @relation("PersonalLoan_features", fields: [featuresId], references: [id])
  featuresId       String?        @unique @map("features")
  eligibility      PLEligibility? @relation("PersonalLoan_eligibility", fields: [eligibilityId], references: [id])
  eligibilityId    String?        @unique @map("eligibility")
  documents        PLDocument?    @relation("PersonalLoan_documents", fields: [documentsId], references: [id])
  documentsId      String?        @unique @map("documents")
  specials         PLSpecial[]    @relation("PLSpecial_personalLoan")
  perks            PLPerk[]       @relation("PLPerk_personalLoan")
  creditScores     CreditScore[]  @relation("PersonalLoan_creditScores")
  clickoutStatus   String         @default("no")
  clickoutParams   Json?
  createdAt        DateTime?      @default(now())
  updatedAt        DateTime?      @default(now()) @updatedAt

  @@index([imageId])
  @@index([providerId])
}

model PLLoanDetail {
  id                           String        @id @default(cuid())
  personalLoan                 PersonalLoan? @relation("PersonalLoan_loanDetail")
  interestType                 String        @default("fixed")
  securityType                 String        @default("secured")
  repaymentFrequency           Json          @default("[\"monthly\",\"fortnightly\",\"weekly\"]")
  loanPurpose                  String?
  minLoanAmount                Int
  maxLoanAmount                Int?
  minLoanTerm                  Int
  maxLoanTerm                  Int
  minInterestRate              Float
  maxInterestRate              Float?
  minComparisonRate            Float
  maxComparisonRate            Float?
  fixedRepresentativeRate      Float?
  comparisonRepresentativeRate Float?
  fundingTime                  Int?
  fundingTimeFrequency         String?
  otherInformation             String        @default("")
  createdAt                    DateTime?     @default(now())
  updatedAt                    DateTime?     @default(now()) @updatedAt
}

model PLFeature {
  id                     String        @id @default(cuid())
  personalLoan           PersonalLoan? @relation("PersonalLoan_features")
  withExtraRepayment     Boolean       @default(false)
  withRedrawFacility     Boolean       @default(false)
  isFullyDrawnAdvance    Boolean       @default(false)
  withInstantApproval    Boolean       @default(false)
  topUpFacilityAvailable Boolean       @default(false)
  featureDescription     String        @default("")
  createdAt              DateTime?     @default(now())
  updatedAt              DateTime?     @default(now()) @updatedAt
}

model PLFee {
  id                    String        @id @default(cuid())
  personalLoan          PersonalLoan? @relation("PersonalLoan_fees")
  upfrontFeeType        String?       @default("currency")
  minUpfrontFee         Float?
  maxUpfrontFee         Float?
  applicationFeeType    String?       @default("currency")
  minApplicationFee     Float?
  maxApplicationFee     Float?
  minRiskFee            Float?
  maxRiskFee            Float?
  settlementFreeCheque  Int?
  settlementChequeFee   Float?
  earlyTerminationFee   Float?
  extraRepaymentFee     Float?
  missedPaymentPenalty  Float?
  ongoingFee            Float?
  overCounterPaymentFee Float?
  establishmentFee      Float?
  brokerageFee          Float?
  securityFee           Float?
  monthlyFee            Float?
  loanServiceFee        Float?
  dishonourFee          Float?
  overdueAccountFee     Float?
  brokerOriginationFee  Float?
  createdAt             DateTime?     @default(now())
  updatedAt             DateTime?     @default(now()) @updatedAt
}

model PLPerk {
  id             String        @id @default(cuid())
  personalLoan   PersonalLoan? @relation("PLPerk_personalLoan", fields: [personalLoanId], references: [id])
  personalLoanId String?       @map("personalLoan")
  name           String        @default("")
  type           Json          @default("[]")
  value          Int?
  assumptions    String        @default("")
  conditions     String        @default("")
  days           Int?
  daysConditions String        @default("")
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @default(now()) @updatedAt

  @@index([personalLoanId])
}

model PLDocument {
  id                          String        @id @default(cuid())
  keyFactSheet                Media?        @relation("PLDocument_keyFactSheet", fields: [keyFactSheetId], references: [id])
  keyFactSheetId              String?       @map("keyFactSheet")
  targetMarketDetermination   Media?        @relation("PLDocument_targetMarketDetermination", fields: [targetMarketDeterminationId], references: [id])
  targetMarketDeterminationId String?       @map("targetMarketDetermination")
  document                    Media[]       @relation("PLDocument_document")
  personalLoan                PersonalLoan? @relation("PersonalLoan_documents")
  createdAt                   DateTime?     @default(now())
  updatedAt                   DateTime?     @default(now()) @updatedAt

  @@index([keyFactSheetId])
  @@index([targetMarketDeterminationId])
}

model PLSpecial {
  id             String        @id @default(cuid())
  personalLoan   PersonalLoan? @relation("PLSpecial_personalLoan", fields: [personalLoanId], references: [id])
  personalLoanId String?       @map("personalLoan")
  name           String        @default("")
  type           Json          @default("[]")
  offerType      String        @default("offer")
  introText      String        @default("")
  blurb          String        @default("")
  startDate      DateTime
  endDate        DateTime?
  url            String        @default("")
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @default(now()) @updatedAt

  @@index([personalLoanId])
}

model PLEligibility {
  id                   String        @id @default(cuid())
  personalLoan         PersonalLoan? @relation("PersonalLoan_eligibility")
  minAge               Int?
  minIncome            Int?
  eligibilityCondition String        @default("")
  residency            Json          @default("[]")
  visaValidity         Int?
  createdAt            DateTime?     @default(now())
  updatedAt            DateTime?     @default(now()) @updatedAt
  employment           Json?
}

model PLFormContainer {
  id               String          @id @default(cuid())
  label            String          @default("")
  provider         PLProvider[]    @relation("PLFormContainer_provider")
  isDefault        Boolean         @default(false)
  v2               Boolean         @default(false)
  hasAllAffiliates Boolean         @default(false)
  affiliate        Affiliate[]     @relation("Affiliate_plFormContainer")
  includeAllSubAff Boolean         @default(true)
  subAffiliate     SubAffiliate[]  @relation("PLFormContainer_subAffiliate")
  page             String          @default("")
  formComponents   FormComponent[] @relation("PLFormContainer_formComponents")
  formOrder        Json?           @default("[]")
  defaultProps     Json?           @default("{}")
  staticData       Json?
  scripts          Script[]        @relation("PLFormContainer_scripts")
  createdAt        DateTime?       @default(now())
  updatedAt        DateTime?       @default(now()) @updatedAt
}

model AddonFeature {
  id                       String       @id @default(cuid())
  description              String       @unique @default("")
  from_SolarAddon_features SolarAddon[] @relation("SolarAddon_features")
}

model Battery {
  id                            String             @id @default(cuid())
  manufacturer                  Manufacturer?      @relation("Battery_manufacturer", fields: [manufacturerId], references: [id])
  manufacturerId                String?            @map("manufacturer")
  modelNumber                   String             @default("")
  series                        String             @default("")
  type                          String             @default("")
  cost                          Decimal?           @postgresql.Decimal(4, 2)
  efficiency                    Float?
  outerDimensions               String             @default("")
  weight                        Float?
  countryOfManufacturing        String             @default("")
  warranty                      Int?
  warrantyClaims                Float?
  powerRating                   Float?
  size                          Float?
  roundtripEfficiency           Float?
  lifetime                      String             @default("")
  mount                         String             @default("")
  ipRating                      Float?
  detailsType                   String?
  details                       String             @default("")
  detailsDoc                    Media?             @relation("Battery_detailsDoc", fields: [detailsDocId], references: [id])
  detailsDocId                  String?            @map("detailsDoc")
  approveDate                   DateTime           @postgresql.Date
  expiryDate                    DateTime           @postgresql.Date
  from_InstallerBattery_battery InstallerBattery[] @relation("InstallerBattery_battery")

  @@index([manufacturerId])
  @@index([detailsDocId])
}

model Manufacturer {
  id                           String       @id @default(cuid())
  name                         String       @unique @default("")
  from_Battery_manufacturer    Battery[]    @relation("Battery_manufacturer")
  from_Inverter_manufacturer   Inverter[]   @relation("Inverter_manufacturer")
  from_SolarPanel_manufacturer SolarPanel[] @relation("SolarPanel_manufacturer")
}

model Installer {
  id                                 String                @id @default(cuid())
  name                               String                @unique @default("")
  logo                               Media?                @relation("Installer_logo", fields: [logoId], references: [id])
  logoId                             String?               @map("logo")
  displayLogo                        Boolean               @default(true)
  affiliates                         Affiliate[]           @relation("Installer_affiliates")
  hasAllAffiliates                   Boolean               @default(true)
  subAffiliates                      SubAffiliate[]        @relation("Installer_subAffiliates")
  licence                            InstallerLicence[]    @relation("Installer_licence")
  zones                              InstallerZone[]       @relation("Installer_zones")
  bundles                            SolarBundle[]         @relation("SolarBundle_installer")
  contacts                           InstallerContact[]    @relation("Installer_contacts")
  addons                             InstallerAddon[]      @relation("Installer_addons")
  depositType                        String?
  depositValue                       Float?
  nextStepGuidance                   String                @default("")
  from_InstallerContact_installer    InstallerContact[]    @relation("InstallerContact_installer")
  from_InstallerLicence_installer    InstallerLicence[]    @relation("InstallerLicence_installer")
  from_InstallerInverter_installer   InstallerInverter[]   @relation("InstallerInverter_installer")
  from_InstallerSolarPanel_installer InstallerSolarPanel[] @relation("InstallerSolarPanel_installer")
  from_InstallerBattery_installer    InstallerBattery[]    @relation("InstallerBattery_installer")
  from_InstallerZone_installer       InstallerZone[]       @relation("InstallerZone_installer")
  from_InstallerAddon_installer      InstallerAddon[]      @relation("InstallerAddon_installer")

  @@index([logoId])
}

model InstallerContact {
  id                      String                    @id @default(cuid())
  name                    String                    @default("")
  type                    InstallerContactTypeType? @default(mobile)
  contactNumber           Int                       @unique
  email                   String                    @default("")
  installer               Installer?                @relation("InstallerContact_installer", fields: [installerId], references: [id])
  installerId             String?                   @map("installer")
  from_Installer_contacts Installer[]               @relation("Installer_contacts")

  @@index([installerId])
}

model InstallerLicence {
  id                     String      @id @default(cuid())
  state                  State?      @relation("InstallerLicence_state", fields: [stateId], references: [id])
  stateId                String?     @map("state")
  number                 String      @unique @default("")
  postcodes              String      @default("")
  installer              Installer?  @relation("InstallerLicence_installer", fields: [installerId], references: [id])
  installerId            String?     @map("installer")
  from_Installer_licence Installer[] @relation("Installer_licence")

  @@index([stateId])
  @@index([installerId])
}

model InstallerInverter {
  id                                 String        @id @default(cuid())
  installer                          Installer?    @relation("InstallerInverter_installer", fields: [installerId], references: [id])
  installerId                        String?       @map("installer")
  inverter                           Inverter?     @relation("InstallerInverter_inverter", fields: [inverterId], references: [id])
  inverterId                         String?       @map("inverter")
  cost                               Float
  warranty                           Int
  warrantyClaims                     Float
  image                              Media?        @relation("InstallerInverter_image", fields: [imageId], references: [id])
  imageId                            String?       @map("image")
  name                               String        @default("")
  from_SolarBundle_installerInverter SolarBundle[] @relation("SolarBundle_installerInverter")

  @@index([installerId])
  @@index([inverterId])
  @@index([imageId])
}

model InstallerSolarPanel {
  id                              String        @id @default(cuid())
  installer                       Installer?    @relation("InstallerSolarPanel_installer", fields: [installerId], references: [id])
  installerId                     String?       @map("installer")
  solarPanel                      SolarPanel?   @relation("InstallerSolarPanel_solarPanel", fields: [solarPanelId], references: [id])
  solarPanelId                    String?       @map("solarPanel")
  cost                            Float
  warranty                        Int
  warrantyClaims                  Float
  image                           Media?        @relation("InstallerSolarPanel_image", fields: [imageId], references: [id])
  imageId                         String?       @map("image")
  name                            String        @default("")
  from_SolarBundle_installerPanel SolarBundle[] @relation("SolarBundle_installerPanel")

  @@index([installerId])
  @@index([solarPanelId])
  @@index([imageId])
}

model InstallerBattery {
  id                                String        @id @default(cuid())
  installer                         Installer?    @relation("InstallerBattery_installer", fields: [installerId], references: [id])
  installerId                       String?       @map("installer")
  battery                           Battery?      @relation("InstallerBattery_battery", fields: [batteryId], references: [id])
  batteryId                         String?       @map("battery")
  cost                              Float
  warranty                          Int
  warrantyClaims                    Float
  image                             Media?        @relation("InstallerBattery_image", fields: [imageId], references: [id])
  imageId                           String?       @map("image")
  name                              String        @default("")
  from_SolarBundle_installerBattery SolarBundle[] @relation("SolarBundle_installerBattery")

  @@index([installerId])
  @@index([batteryId])
  @@index([imageId])
}

model InstallerZone {
  id                   String      @id @default(cuid())
  title                String      @default("")
  state                State?      @relation("InstallerZone_state", fields: [stateId], references: [id])
  stateId              String?     @map("state")
  postcodes            String      @default("")
  addedCostDifference  Int         @default(0)
  installer            Installer?  @relation("InstallerZone_installer", fields: [installerId], references: [id])
  installerId          String?     @map("installer")
  from_Installer_zones Installer[] @relation("Installer_zones")

  @@index([stateId])
  @@index([installerId])
}

model Inverter {
  id                              String              @id @default(cuid())
  manufacturer                    Manufacturer?       @relation("Inverter_manufacturer", fields: [manufacturerId], references: [id])
  manufacturerId                  String?             @map("manufacturer")
  modelNumber                     String              @unique @default("")
  series                          String              @default("")
  type                            String              @default("")
  powerRating                     Float?
  maxEfficiency                   Float?
  outerDimensions                 String              @default("")
  weight                          Float?
  countryOfManufacturing          String              @default("")
  warranty                        Int?
  warrantyClaims                  Float?
  totalMPPT                       Int?
  ipRating                        Float?
  detailsType                     String?
  details                         String              @default("")
  detailsDoc                      Media?              @relation("Inverter_detailsDoc", fields: [detailsDocId], references: [id])
  detailsDocId                    String?             @map("detailsDoc")
  approveDate                     DateTime            @postgresql.Date
  expiryDate                      DateTime            @postgresql.Date
  from_InstallerInverter_inverter InstallerInverter[] @relation("InstallerInverter_inverter")

  @@index([manufacturerId])
  @@index([detailsDocId])
}

model SolarBundle {
  id                   String               @id @default(cuid())
  name                 String               @default("")
  bundleStatus         Boolean              @default(true)
  energyPlanIncluded   Boolean              @default(false)
  energyPlanName       String               @default("")
  subscriptionIncluded Boolean              @default(false)
  durationMonths       Float?
  costPerMonth         Float?
  installer            Installer?           @relation("SolarBundle_installer", fields: [installerId], references: [id])
  installerId          String?              @map("installer")
  installerPanel       InstallerSolarPanel? @relation("SolarBundle_installerPanel", fields: [installerPanelId], references: [id])
  installerPanelId     String?              @map("installerPanel")
  installerInverter    InstallerInverter?   @relation("SolarBundle_installerInverter", fields: [installerInverterId], references: [id])
  installerInverterId  String?              @map("installerInverter")
  installerBattery     InstallerBattery?    @relation("SolarBundle_installerBattery", fields: [installerBatteryId], references: [id])
  installerBatteryId   String?              @map("installerBattery")
  totalCost            Float?
  stcRebate            Float?
  capacity             Float?
  numberOfPanels       Int?
  areaNeeded           Float?
  features             BundleFeature[]      @relation("SolarBundle_features")

  @@index([installerId])
  @@index([installerPanelId])
  @@index([installerInverterId])
  @@index([installerBatteryId])
}

model SolarAddon {
  id                        String           @id @default(cuid())
  name                      String           @unique @default("")
  detailsType               String?
  details                   String           @default("")
  detailsDoc                Media?           @relation("SolarAddon_detailsDoc", fields: [detailsDocId], references: [id])
  detailsDocId              String?          @map("detailsDoc")
  features                  AddonFeature[]   @relation("SolarAddon_features")
  from_InstallerAddon_addon InstallerAddon[] @relation("InstallerAddon_addon")

  @@index([detailsDocId])
}

model SolarAffiliate {
  id                String     @id @default(cuid())
  capacityRangeDiff Decimal    @default("0") @postgresql.Decimal(4, 2)
  affiliate         Affiliate? @relation("SolarAffiliate_affiliate", fields: [affiliateId], references: [id])
  affiliateId       String?    @map("affiliate")

  @@index([affiliateId])
}

model SolarPanel {
  id                                  String                @id @default(cuid())
  manufacturer                        Manufacturer?         @relation("SolarPanel_manufacturer", fields: [manufacturerId], references: [id])
  manufacturerId                      String?               @map("manufacturer")
  modelNumber                         String                @unique @default("")
  series                              String                @default("")
  solarCellType                       String                @default("")
  capacity                            Float?
  efficiency                          Float?
  outerDimensions                     String                @default("")
  weight                              Float?
  countryOfManufacturing              String                @default("")
  warranty                            Int?
  warrantyClaims                      Float?
  totalPanels                         Int?
  ipRating                            Float?
  detailsType                         String?
  details                             String                @default("")
  detailsDoc                          Media?                @relation("SolarPanel_detailsDoc", fields: [detailsDocId], references: [id])
  detailsDocId                        String?               @map("detailsDoc")
  approveDate                         DateTime              @postgresql.Date
  expiryDate                          DateTime              @postgresql.Date
  from_InstallerSolarPanel_solarPanel InstallerSolarPanel[] @relation("InstallerSolarPanel_solarPanel")

  @@index([manufacturerId])
  @@index([detailsDocId])
}

model BundleFeature {
  id                        String        @id @default(cuid())
  description               String        @unique @default("")
  from_SolarBundle_features SolarBundle[] @relation("SolarBundle_features")
}

model InstallerAddon {
  id                    String      @id @default(cuid())
  name                  String      @default("")
  cost                  Float?
  addon                 SolarAddon? @relation("InstallerAddon_addon", fields: [addonId], references: [id])
  addonId               String?     @map("addon")
  image                 Media?      @relation("InstallerAddon_image", fields: [imageId], references: [id])
  imageId               String?     @map("image")
  installer             Installer?  @relation("InstallerAddon_installer", fields: [installerId], references: [id])
  installerId           String?     @map("installer")
  from_Installer_addons Installer[] @relation("Installer_addons")

  @@index([addonId])
  @@index([imageId])
  @@index([installerId])
}

model StateWiseRebate {
  id         String  @id @default(cuid())
  name       String  @default("")
  state      State?  @relation("StateWiseRebate_state", fields: [stateId], references: [id])
  stateId    String? @map("state")
  rebateType String
  amount     Float
  condition  String  @default("")

  @@index([stateId])
}

enum ScriptCategoryType {
  mandatory
  agent_response
  optional
}

enum ScriptConnectionTypeType {
  nbn
  adsl
  cable
  four_g
  five_g
  opti
  lbn
  mobile
}

enum ScriptTechnologyTypeType {
  fttb
  fttp
  fttn
  fttc
  hfc
  satellite
  wireless
}

enum ScriptPositionType {
  top
  bottom
}

enum IgnoreListTaggedAType {
  testData
  spamData
}

enum EarnRateRangeUnitType {
  points
  dollars
}

enum EarnRateRangePeriodType {
  monthly
  annually
}

enum InstallerContactTypeType {
  telephone
  mobile
}

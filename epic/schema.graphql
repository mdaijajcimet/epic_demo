# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Affiliate {
  id: ID!
  status: Boolean
  name: String
  affiliateId: String
  affiliateNumber: Int
  label: String
  senderID: String
  emailDomains: String
  apiKey: String
  subAffiliates(where: SubAffiliateWhereInput! = {}, orderBy: [SubAffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubAffiliateWhereUniqueInput): [SubAffiliate!]
  subAffiliatesCount(where: SubAffiliateWhereInput! = {}): Int
  scripts(where: ScriptWhereInput! = {}, orderBy: [ScriptOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScriptWhereUniqueInput): [Script!]
  scriptsCount(where: ScriptWhereInput! = {}): Int
  ccProvider(where: ProviderCreditCardWhereInput! = {}, orderBy: [ProviderCreditCardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProviderCreditCardWhereUniqueInput): [ProviderCreditCard!]
  ccProviderCount(where: ProviderCreditCardWhereInput! = {}): Int
  ccPlan(where: CreditCardWhereInput! = {}, orderBy: [CreditCardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CreditCardWhereUniqueInput): [CreditCard!]
  ccPlanCount(where: CreditCardWhereInput! = {}): Int
  ccFormContainer(where: CCFormContainerWhereInput! = {}, orderBy: [CCFormContainerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CCFormContainerWhereUniqueInput): [CCFormContainer!]
  ccFormContainerCount(where: CCFormContainerWhereInput! = {}): Int
  plProvider(where: PLProviderWhereInput! = {}, orderBy: [PLProviderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PLProviderWhereUniqueInput): [PLProvider!]
  plProviderCount(where: PLProviderWhereInput! = {}): Int
  plPlan(where: PersonalLoanWhereInput! = {}, orderBy: [PersonalLoanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonalLoanWhereUniqueInput): [PersonalLoan!]
  plPlanCount(where: PersonalLoanWhereInput! = {}): Int
  plFormContainer(where: PLFormContainerWhereInput! = {}, orderBy: [PLFormContainerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PLFormContainerWhereUniqueInput): [PLFormContainer!]
  plFormContainerCount(where: PLFormContainerWhereInput! = {}): Int
  hiProvider(where: HIProviderWhereInput! = {}, orderBy: [HIProviderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HIProviderWhereUniqueInput): [HIProvider!]
  hiProviderCount(where: HIProviderWhereInput! = {}): Int
  hiFormContainer(where: HIFormContainerWhereInput! = {}, orderBy: [HIFormContainerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HIFormContainerWhereUniqueInput): [HIFormContainer!]
  hiFormContainerCount(where: HIFormContainerWhereInput! = {}): Int
  bundleFormContainer(where: BundleFormContainerWhereInput! = {}, orderBy: [BundleFormContainerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BundleFormContainerWhereUniqueInput): [BundleFormContainer!]
  bundleFormContainerCount(where: BundleFormContainerWhereInput! = {}): Int
}

input AffiliateWhereUniqueInput {
  id: ID
  affiliateId: String
}

input AffiliateWhereInput {
  AND: [AffiliateWhereInput!]
  OR: [AffiliateWhereInput!]
  NOT: [AffiliateWhereInput!]
  id: IDFilter
  status: BooleanFilter
  name: StringFilter
  affiliateId: StringFilter
  affiliateNumber: IntNullableFilter
  senderID: StringFilter
  emailDomains: StringFilter
  apiKey: StringFilter
  subAffiliates: SubAffiliateManyRelationFilter
  scripts: ScriptManyRelationFilter
  ccProvider: ProviderCreditCardManyRelationFilter
  ccPlan: CreditCardManyRelationFilter
  ccFormContainer: CCFormContainerManyRelationFilter
  plProvider: PLProviderManyRelationFilter
  plPlan: PersonalLoanManyRelationFilter
  plFormContainer: PLFormContainerManyRelationFilter
  hiProvider: HIProviderManyRelationFilter
  hiFormContainer: HIFormContainerManyRelationFilter
  bundleFormContainer: BundleFormContainerManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input SubAffiliateManyRelationFilter {
  every: SubAffiliateWhereInput
  some: SubAffiliateWhereInput
  none: SubAffiliateWhereInput
}

input ScriptManyRelationFilter {
  every: ScriptWhereInput
  some: ScriptWhereInput
  none: ScriptWhereInput
}

input ProviderCreditCardManyRelationFilter {
  every: ProviderCreditCardWhereInput
  some: ProviderCreditCardWhereInput
  none: ProviderCreditCardWhereInput
}

input CreditCardManyRelationFilter {
  every: CreditCardWhereInput
  some: CreditCardWhereInput
  none: CreditCardWhereInput
}

input CCFormContainerManyRelationFilter {
  every: CCFormContainerWhereInput
  some: CCFormContainerWhereInput
  none: CCFormContainerWhereInput
}

input PLProviderManyRelationFilter {
  every: PLProviderWhereInput
  some: PLProviderWhereInput
  none: PLProviderWhereInput
}

input PersonalLoanManyRelationFilter {
  every: PersonalLoanWhereInput
  some: PersonalLoanWhereInput
  none: PersonalLoanWhereInput
}

input PLFormContainerManyRelationFilter {
  every: PLFormContainerWhereInput
  some: PLFormContainerWhereInput
  none: PLFormContainerWhereInput
}

input HIProviderManyRelationFilter {
  every: HIProviderWhereInput
  some: HIProviderWhereInput
  none: HIProviderWhereInput
}

input HIFormContainerManyRelationFilter {
  every: HIFormContainerWhereInput
  some: HIFormContainerWhereInput
  none: HIFormContainerWhereInput
}

input BundleFormContainerManyRelationFilter {
  every: BundleFormContainerWhereInput
  some: BundleFormContainerWhereInput
  none: BundleFormContainerWhereInput
}

input AffiliateOrderByInput {
  id: OrderDirection
  status: OrderDirection
  name: OrderDirection
  affiliateId: OrderDirection
  affiliateNumber: OrderDirection
  senderID: OrderDirection
  emailDomains: OrderDirection
  apiKey: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AffiliateUpdateInput {
  status: Boolean
  name: String
  affiliateId: String
  affiliateNumber: Int
  senderID: String
  emailDomains: String
  apiKey: String
  subAffiliates: SubAffiliateRelateToManyForUpdateInput
  scripts: ScriptRelateToManyForUpdateInput
  ccProvider: ProviderCreditCardRelateToManyForUpdateInput
  ccPlan: CreditCardRelateToManyForUpdateInput
  ccFormContainer: CCFormContainerRelateToManyForUpdateInput
  plProvider: PLProviderRelateToManyForUpdateInput
  plPlan: PersonalLoanRelateToManyForUpdateInput
  plFormContainer: PLFormContainerRelateToManyForUpdateInput
  hiProvider: HIProviderRelateToManyForUpdateInput
  hiFormContainer: HIFormContainerRelateToManyForUpdateInput
  bundleFormContainer: BundleFormContainerRelateToManyForUpdateInput
}

input SubAffiliateRelateToManyForUpdateInput {
  disconnect: [SubAffiliateWhereUniqueInput!]
  set: [SubAffiliateWhereUniqueInput!]
  create: [SubAffiliateCreateInput!]
  connect: [SubAffiliateWhereUniqueInput!]
}

input ScriptRelateToManyForUpdateInput {
  disconnect: [ScriptWhereUniqueInput!]
  set: [ScriptWhereUniqueInput!]
  create: [ScriptCreateInput!]
  connect: [ScriptWhereUniqueInput!]
}

input ProviderCreditCardRelateToManyForUpdateInput {
  disconnect: [ProviderCreditCardWhereUniqueInput!]
  set: [ProviderCreditCardWhereUniqueInput!]
  create: [ProviderCreditCardCreateInput!]
  connect: [ProviderCreditCardWhereUniqueInput!]
}

input CreditCardRelateToManyForUpdateInput {
  disconnect: [CreditCardWhereUniqueInput!]
  set: [CreditCardWhereUniqueInput!]
  create: [CreditCardCreateInput!]
  connect: [CreditCardWhereUniqueInput!]
}

input CCFormContainerRelateToManyForUpdateInput {
  disconnect: [CCFormContainerWhereUniqueInput!]
  set: [CCFormContainerWhereUniqueInput!]
  create: [CCFormContainerCreateInput!]
  connect: [CCFormContainerWhereUniqueInput!]
}

input PLProviderRelateToManyForUpdateInput {
  disconnect: [PLProviderWhereUniqueInput!]
  set: [PLProviderWhereUniqueInput!]
  create: [PLProviderCreateInput!]
  connect: [PLProviderWhereUniqueInput!]
}

input PersonalLoanRelateToManyForUpdateInput {
  disconnect: [PersonalLoanWhereUniqueInput!]
  set: [PersonalLoanWhereUniqueInput!]
  create: [PersonalLoanCreateInput!]
  connect: [PersonalLoanWhereUniqueInput!]
}

input PLFormContainerRelateToManyForUpdateInput {
  disconnect: [PLFormContainerWhereUniqueInput!]
  set: [PLFormContainerWhereUniqueInput!]
  create: [PLFormContainerCreateInput!]
  connect: [PLFormContainerWhereUniqueInput!]
}

input HIProviderRelateToManyForUpdateInput {
  disconnect: [HIProviderWhereUniqueInput!]
  set: [HIProviderWhereUniqueInput!]
  create: [HIProviderCreateInput!]
  connect: [HIProviderWhereUniqueInput!]
}

input HIFormContainerRelateToManyForUpdateInput {
  disconnect: [HIFormContainerWhereUniqueInput!]
  set: [HIFormContainerWhereUniqueInput!]
  create: [HIFormContainerCreateInput!]
  connect: [HIFormContainerWhereUniqueInput!]
}

input BundleFormContainerRelateToManyForUpdateInput {
  disconnect: [BundleFormContainerWhereUniqueInput!]
  set: [BundleFormContainerWhereUniqueInput!]
  create: [BundleFormContainerCreateInput!]
  connect: [BundleFormContainerWhereUniqueInput!]
}

input AffiliateUpdateArgs {
  where: AffiliateWhereUniqueInput!
  data: AffiliateUpdateInput!
}

input AffiliateCreateInput {
  status: Boolean
  name: String
  affiliateId: String
  affiliateNumber: Int
  senderID: String
  emailDomains: String
  apiKey: String
  subAffiliates: SubAffiliateRelateToManyForCreateInput
  scripts: ScriptRelateToManyForCreateInput
  ccProvider: ProviderCreditCardRelateToManyForCreateInput
  ccPlan: CreditCardRelateToManyForCreateInput
  ccFormContainer: CCFormContainerRelateToManyForCreateInput
  plProvider: PLProviderRelateToManyForCreateInput
  plPlan: PersonalLoanRelateToManyForCreateInput
  plFormContainer: PLFormContainerRelateToManyForCreateInput
  hiProvider: HIProviderRelateToManyForCreateInput
  hiFormContainer: HIFormContainerRelateToManyForCreateInput
  bundleFormContainer: BundleFormContainerRelateToManyForCreateInput
}

input SubAffiliateRelateToManyForCreateInput {
  create: [SubAffiliateCreateInput!]
  connect: [SubAffiliateWhereUniqueInput!]
}

input ScriptRelateToManyForCreateInput {
  create: [ScriptCreateInput!]
  connect: [ScriptWhereUniqueInput!]
}

input ProviderCreditCardRelateToManyForCreateInput {
  create: [ProviderCreditCardCreateInput!]
  connect: [ProviderCreditCardWhereUniqueInput!]
}

input CreditCardRelateToManyForCreateInput {
  create: [CreditCardCreateInput!]
  connect: [CreditCardWhereUniqueInput!]
}

input CCFormContainerRelateToManyForCreateInput {
  create: [CCFormContainerCreateInput!]
  connect: [CCFormContainerWhereUniqueInput!]
}

input PLProviderRelateToManyForCreateInput {
  create: [PLProviderCreateInput!]
  connect: [PLProviderWhereUniqueInput!]
}

input PersonalLoanRelateToManyForCreateInput {
  create: [PersonalLoanCreateInput!]
  connect: [PersonalLoanWhereUniqueInput!]
}

input PLFormContainerRelateToManyForCreateInput {
  create: [PLFormContainerCreateInput!]
  connect: [PLFormContainerWhereUniqueInput!]
}

input HIProviderRelateToManyForCreateInput {
  create: [HIProviderCreateInput!]
  connect: [HIProviderWhereUniqueInput!]
}

input HIFormContainerRelateToManyForCreateInput {
  create: [HIFormContainerCreateInput!]
  connect: [HIFormContainerWhereUniqueInput!]
}

input BundleFormContainerRelateToManyForCreateInput {
  create: [BundleFormContainerCreateInput!]
  connect: [BundleFormContainerWhereUniqueInput!]
}

type AuditLog {
  id: ID!
  userId: String
  username: String
  collectionName: String
  docId: String
  attributeName: String
  actionType: String
  oldValue: String
  newValue: String
  createdAt: DateTime
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input AuditLogWhereUniqueInput {
  id: ID
}

input AuditLogWhereInput {
  AND: [AuditLogWhereInput!]
  OR: [AuditLogWhereInput!]
  NOT: [AuditLogWhereInput!]
  id: IDFilter
  userId: StringFilter
  username: StringFilter
  collectionName: StringFilter
  docId: StringFilter
  attributeName: StringFilter
  actionType: StringFilter
  oldValue: StringFilter
  newValue: StringFilter
  createdAt: DateTimeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input AuditLogOrderByInput {
  id: OrderDirection
  userId: OrderDirection
  username: OrderDirection
  collectionName: OrderDirection
  docId: OrderDirection
  attributeName: OrderDirection
  actionType: OrderDirection
  oldValue: OrderDirection
  newValue: OrderDirection
  createdAt: OrderDirection
}

input AuditLogUpdateInput {
  userId: String
  username: String
  collectionName: String
  docId: String
  attributeName: String
  actionType: String
  oldValue: String
  newValue: String
  createdAt: DateTime
}

input AuditLogUpdateArgs {
  where: AuditLogWhereUniqueInput!
  data: AuditLogUpdateInput!
}

input AuditLogCreateInput {
  userId: String
  username: String
  collectionName: String
  docId: String
  attributeName: String
  actionType: String
  oldValue: String
  newValue: String
  createdAt: DateTime
}

type CsSite {
  id: ID!
  site: String
  slug: String
  apiKey: String
  gtmId: String
  recaptchaKey: String
  affiliate: Affiliate
  affAuthUrl: String
  affAuthQuery: String
  affAuthCallbackUrl: String
}

input CsSiteWhereUniqueInput {
  id: ID
}

input CsSiteWhereInput {
  AND: [CsSiteWhereInput!]
  OR: [CsSiteWhereInput!]
  NOT: [CsSiteWhereInput!]
  id: IDFilter
  site: StringFilter
  slug: StringFilter
  apiKey: StringFilter
  gtmId: StringFilter
  recaptchaKey: StringFilter
  affiliate: AffiliateWhereInput
  affAuthUrl: StringFilter
  affAuthQuery: StringFilter
  affAuthCallbackUrl: StringFilter
}

input CsSiteOrderByInput {
  id: OrderDirection
  site: OrderDirection
  slug: OrderDirection
  apiKey: OrderDirection
  gtmId: OrderDirection
  recaptchaKey: OrderDirection
  affAuthUrl: OrderDirection
  affAuthQuery: OrderDirection
  affAuthCallbackUrl: OrderDirection
}

input CsSiteUpdateInput {
  site: String
  slug: String
  apiKey: String
  gtmId: String
  recaptchaKey: String
  affiliate: AffiliateRelateToOneForUpdateInput
  affAuthUrl: String
  affAuthQuery: String
  affAuthCallbackUrl: String
}

input AffiliateRelateToOneForUpdateInput {
  create: AffiliateCreateInput
  connect: AffiliateWhereUniqueInput
  disconnect: Boolean
}

input CsSiteUpdateArgs {
  where: CsSiteWhereUniqueInput!
  data: CsSiteUpdateInput!
}

input CsSiteCreateInput {
  site: String
  slug: String
  apiKey: String
  gtmId: String
  recaptchaKey: String
  affiliate: AffiliateRelateToOneForCreateInput
  affAuthUrl: String
  affAuthQuery: String
  affAuthCallbackUrl: String
}

input AffiliateRelateToOneForCreateInput {
  create: AffiliateCreateInput
  connect: AffiliateWhereUniqueInput
}

type DialerList {
  id: ID!
  username: String
  password: String
  url: String
}

input DialerListWhereUniqueInput {
  id: ID
}

input DialerListWhereInput {
  AND: [DialerListWhereInput!]
  OR: [DialerListWhereInput!]
  NOT: [DialerListWhereInput!]
  id: IDFilter
  username: StringFilter
  url: StringFilter
}

input DialerListOrderByInput {
  id: OrderDirection
  username: OrderDirection
  url: OrderDirection
}

input DialerListUpdateInput {
  username: String
  password: String
  url: String
}

input DialerListUpdateArgs {
  where: DialerListWhereUniqueInput!
  data: DialerListUpdateInput!
}

input DialerListCreateInput {
  username: String
  password: String
  url: String
}

type Media {
  id: ID!
  title: String
  file: FileFieldOutput
  linkUrl: String
  altText: String
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input MediaWhereUniqueInput {
  id: ID
}

input MediaWhereInput {
  AND: [MediaWhereInput!]
  OR: [MediaWhereInput!]
  NOT: [MediaWhereInput!]
  id: IDFilter
  title: StringFilter
  linkUrl: StringFilter
  altText: StringFilter
}

input MediaOrderByInput {
  id: OrderDirection
  title: OrderDirection
  linkUrl: OrderDirection
  altText: OrderDirection
}

input MediaUpdateInput {
  title: String
  file: FileFieldInput
  linkUrl: String
  altText: String
}

input FileFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input MediaUpdateArgs {
  where: MediaWhereUniqueInput!
  data: MediaUpdateInput!
}

input MediaCreateInput {
  title: String
  file: FileFieldInput
  linkUrl: String
  altText: String
}

type Member {
  id: ID!
  label: String
  name: String
  title: String
  email: String
  roles: String
}

input MemberWhereUniqueInput {
  id: ID
  email: String
}

input MemberWhereInput {
  AND: [MemberWhereInput!]
  OR: [MemberWhereInput!]
  NOT: [MemberWhereInput!]
  id: IDFilter
  name: StringFilter
  title: StringFilter
  email: StringFilter
  roles: StringFilter
}

input MemberOrderByInput {
  id: OrderDirection
  name: OrderDirection
  title: OrderDirection
  email: OrderDirection
  roles: OrderDirection
}

input MemberUpdateInput {
  name: String
  title: String
  email: String
  roles: String
}

input MemberUpdateArgs {
  where: MemberWhereUniqueInput!
  data: MemberUpdateInput!
}

input MemberCreateInput {
  name: String
  title: String
  email: String
  roles: String
}

type PasswordSetting {
  id: ID!
  password: String
  enableEmailLogs: Boolean
  logEmails: String
  type: String
  allowedIps: String
}

input PasswordSettingWhereUniqueInput {
  id: ID
}

input PasswordSettingWhereInput {
  AND: [PasswordSettingWhereInput!]
  OR: [PasswordSettingWhereInput!]
  NOT: [PasswordSettingWhereInput!]
  id: IDFilter
  enableEmailLogs: BooleanFilter
  logEmails: StringFilter
  type: StringFilter
  allowedIps: StringFilter
}

input PasswordSettingOrderByInput {
  id: OrderDirection
  enableEmailLogs: OrderDirection
  logEmails: OrderDirection
  type: OrderDirection
  allowedIps: OrderDirection
}

input PasswordSettingUpdateInput {
  password: String
  enableEmailLogs: Boolean
  logEmails: String
  type: String
  allowedIps: String
}

input PasswordSettingUpdateArgs {
  where: PasswordSettingWhereUniqueInput!
  data: PasswordSettingUpdateInput!
}

input PasswordSettingCreateInput {
  password: String
  enableEmailLogs: Boolean
  logEmails: String
  type: String
  allowedIps: String
}

type Script {
  id: ID!
  title: String
  slug: String
  verticals(where: VerticalWhereInput! = {}, orderBy: [VerticalOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VerticalWhereUniqueInput): [Vertical!]
  verticalsCount(where: VerticalWhereInput! = {}): Int
  showOnBundle: Boolean
  component: Component
  brand: [ScriptBrandType!]
  category: ScriptCategoryType
  connectionType: ScriptConnectionTypeType
  technologyType: ScriptTechnologyTypeType
  affiliates(where: AffiliateWhereInput! = {}, orderBy: [AffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AffiliateWhereUniqueInput): [Affiliate!]
  affiliatesCount(where: AffiliateWhereInput! = {}): Int
  subAffiliates(where: SubAffiliateWhereInput! = {}, orderBy: [SubAffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubAffiliateWhereUniqueInput): [SubAffiliate!]
  subAffiliatesCount(where: SubAffiliateWhereInput! = {}): Int
  providers(where: ProviderWhereInput! = {}, orderBy: [ProviderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProviderWhereUniqueInput): [Provider!]
  providersCount(where: ProviderWhereInput! = {}): Int
  plans(where: PlanWhereInput! = {}, orderBy: [PlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanWhereUniqueInput): [Plan!]
  plansCount(where: PlanWhereInput! = {}): Int
  addonFields(where: AddonFieldWhereInput! = {}, orderBy: [AddonFieldOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddonFieldWhereUniqueInput): [AddonField!]
  addonFieldsCount(where: AddonFieldWhereInput! = {}): Int
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
  position: ScriptPositionType
  order: Int
  content: Script_content_Document
  ccProviders(where: ProviderCreditCardWhereInput! = {}, orderBy: [ProviderCreditCardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProviderCreditCardWhereUniqueInput): [ProviderCreditCard!]
  ccProvidersCount(where: ProviderCreditCardWhereInput! = {}): Int
  ccFormContainers(where: CCFormContainerWhereInput! = {}, orderBy: [CCFormContainerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CCFormContainerWhereUniqueInput): [CCFormContainer!]
  ccFormContainersCount(where: CCFormContainerWhereInput! = {}): Int
  plProviders(where: PLProviderWhereInput! = {}, orderBy: [PLProviderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PLProviderWhereUniqueInput): [PLProvider!]
  plProvidersCount(where: PLProviderWhereInput! = {}): Int
  plFormContainers(where: PLFormContainerWhereInput! = {}, orderBy: [PLFormContainerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PLFormContainerWhereUniqueInput): [PLFormContainer!]
  plFormContainersCount(where: PLFormContainerWhereInput! = {}): Int
  hiProviders(where: HIProviderWhereInput! = {}, orderBy: [HIProviderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HIProviderWhereUniqueInput): [HIProvider!]
  hiProvidersCount(where: HIProviderWhereInput! = {}): Int
  hiFormContainers(where: HIFormContainerWhereInput! = {}, orderBy: [HIFormContainerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HIFormContainerWhereUniqueInput): [HIFormContainer!]
  hiFormContainersCount(where: HIFormContainerWhereInput! = {}): Int
  formComponents(where: FormComponentWhereInput! = {}, orderBy: [FormComponentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormComponentWhereUniqueInput): [FormComponent!]
  formComponentsCount(where: FormComponentWhereInput! = {}): Int
  formFields(where: FormFieldWhereInput! = {}, orderBy: [FormFieldOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormFieldWhereUniqueInput): [FormField!]
  formFieldsCount(where: FormFieldWhereInput! = {}): Int
}

enum ScriptBrandType {
  cimet
  iselect
  ctm
}

enum ScriptCategoryType {
  mandatory
  agent_response
  optional
}

enum ScriptConnectionTypeType {
  nbn
  adsl
  cable
  four_g
  five_g
  opti
  lbn
  mobile
}

enum ScriptTechnologyTypeType {
  fttb
  fttp
  fttn
  fttc
  hfc
  satellite
  wireless
}

enum ScriptPositionType {
  top
  bottom
}

type Script_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ScriptWhereUniqueInput {
  id: ID
  slug: String
}

input ScriptWhereInput {
  AND: [ScriptWhereInput!]
  OR: [ScriptWhereInput!]
  NOT: [ScriptWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  verticals: VerticalManyRelationFilter
  showOnBundle: BooleanFilter
  component: ComponentWhereInput
  category: ScriptCategoryTypeNullableFilter
  connectionType: ScriptConnectionTypeTypeNullableFilter
  technologyType: ScriptTechnologyTypeTypeNullableFilter
  affiliates: AffiliateManyRelationFilter
  subAffiliates: SubAffiliateManyRelationFilter
  providers: ProviderManyRelationFilter
  plans: PlanManyRelationFilter
  addonFields: AddonFieldManyRelationFilter
  pages: PageManyRelationFilter
  position: ScriptPositionTypeNullableFilter
  order: IntNullableFilter
  ccProviders: ProviderCreditCardManyRelationFilter
  ccFormContainers: CCFormContainerManyRelationFilter
  plProviders: PLProviderManyRelationFilter
  plFormContainers: PLFormContainerManyRelationFilter
  hiProviders: HIProviderManyRelationFilter
  hiFormContainers: HIFormContainerManyRelationFilter
  formComponents: FormComponentManyRelationFilter
  formFields: FormFieldManyRelationFilter
}

input VerticalManyRelationFilter {
  every: VerticalWhereInput
  some: VerticalWhereInput
  none: VerticalWhereInput
}

input ScriptCategoryTypeNullableFilter {
  equals: ScriptCategoryType
  in: [ScriptCategoryType!]
  notIn: [ScriptCategoryType!]
  not: ScriptCategoryTypeNullableFilter
}

input ScriptConnectionTypeTypeNullableFilter {
  equals: ScriptConnectionTypeType
  in: [ScriptConnectionTypeType!]
  notIn: [ScriptConnectionTypeType!]
  not: ScriptConnectionTypeTypeNullableFilter
}

input ScriptTechnologyTypeTypeNullableFilter {
  equals: ScriptTechnologyTypeType
  in: [ScriptTechnologyTypeType!]
  notIn: [ScriptTechnologyTypeType!]
  not: ScriptTechnologyTypeTypeNullableFilter
}

input AffiliateManyRelationFilter {
  every: AffiliateWhereInput
  some: AffiliateWhereInput
  none: AffiliateWhereInput
}

input ProviderManyRelationFilter {
  every: ProviderWhereInput
  some: ProviderWhereInput
  none: ProviderWhereInput
}

input PlanManyRelationFilter {
  every: PlanWhereInput
  some: PlanWhereInput
  none: PlanWhereInput
}

input AddonFieldManyRelationFilter {
  every: AddonFieldWhereInput
  some: AddonFieldWhereInput
  none: AddonFieldWhereInput
}

input PageManyRelationFilter {
  every: PageWhereInput
  some: PageWhereInput
  none: PageWhereInput
}

input ScriptPositionTypeNullableFilter {
  equals: ScriptPositionType
  in: [ScriptPositionType!]
  notIn: [ScriptPositionType!]
  not: ScriptPositionTypeNullableFilter
}

input FormComponentManyRelationFilter {
  every: FormComponentWhereInput
  some: FormComponentWhereInput
  none: FormComponentWhereInput
}

input FormFieldManyRelationFilter {
  every: FormFieldWhereInput
  some: FormFieldWhereInput
  none: FormFieldWhereInput
}

input ScriptOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  showOnBundle: OrderDirection
  category: OrderDirection
  connectionType: OrderDirection
  technologyType: OrderDirection
  position: OrderDirection
  order: OrderDirection
}

input ScriptUpdateInput {
  title: String
  slug: String
  verticals: VerticalRelateToManyForUpdateInput
  showOnBundle: Boolean
  component: ComponentRelateToOneForUpdateInput
  brand: [ScriptBrandType!]
  category: ScriptCategoryType
  connectionType: ScriptConnectionTypeType
  technologyType: ScriptTechnologyTypeType
  affiliates: AffiliateRelateToManyForUpdateInput
  subAffiliates: SubAffiliateRelateToManyForUpdateInput
  providers: ProviderRelateToManyForUpdateInput
  plans: PlanRelateToManyForUpdateInput
  addonFields: AddonFieldRelateToManyForUpdateInput
  pages: PageRelateToManyForUpdateInput
  position: ScriptPositionType
  order: Int
  content: JSON
  ccProviders: ProviderCreditCardRelateToManyForUpdateInput
  ccFormContainers: CCFormContainerRelateToManyForUpdateInput
  plProviders: PLProviderRelateToManyForUpdateInput
  plFormContainers: PLFormContainerRelateToManyForUpdateInput
  hiProviders: HIProviderRelateToManyForUpdateInput
  hiFormContainers: HIFormContainerRelateToManyForUpdateInput
  formComponents: FormComponentRelateToManyForUpdateInput
  formFields: FormFieldRelateToManyForUpdateInput
}

input VerticalRelateToManyForUpdateInput {
  disconnect: [VerticalWhereUniqueInput!]
  set: [VerticalWhereUniqueInput!]
  create: [VerticalCreateInput!]
  connect: [VerticalWhereUniqueInput!]
}

input ComponentRelateToOneForUpdateInput {
  create: ComponentCreateInput
  connect: ComponentWhereUniqueInput
  disconnect: Boolean
}

input AffiliateRelateToManyForUpdateInput {
  disconnect: [AffiliateWhereUniqueInput!]
  set: [AffiliateWhereUniqueInput!]
  create: [AffiliateCreateInput!]
  connect: [AffiliateWhereUniqueInput!]
}

input ProviderRelateToManyForUpdateInput {
  disconnect: [ProviderWhereUniqueInput!]
  set: [ProviderWhereUniqueInput!]
  create: [ProviderCreateInput!]
  connect: [ProviderWhereUniqueInput!]
}

input PlanRelateToManyForUpdateInput {
  disconnect: [PlanWhereUniqueInput!]
  set: [PlanWhereUniqueInput!]
  create: [PlanCreateInput!]
  connect: [PlanWhereUniqueInput!]
}

input AddonFieldRelateToManyForUpdateInput {
  disconnect: [AddonFieldWhereUniqueInput!]
  set: [AddonFieldWhereUniqueInput!]
  create: [AddonFieldCreateInput!]
  connect: [AddonFieldWhereUniqueInput!]
}

input PageRelateToManyForUpdateInput {
  disconnect: [PageWhereUniqueInput!]
  set: [PageWhereUniqueInput!]
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
}

input FormComponentRelateToManyForUpdateInput {
  disconnect: [FormComponentWhereUniqueInput!]
  set: [FormComponentWhereUniqueInput!]
  create: [FormComponentCreateInput!]
  connect: [FormComponentWhereUniqueInput!]
}

input FormFieldRelateToManyForUpdateInput {
  disconnect: [FormFieldWhereUniqueInput!]
  set: [FormFieldWhereUniqueInput!]
  create: [FormFieldCreateInput!]
  connect: [FormFieldWhereUniqueInput!]
}

input ScriptUpdateArgs {
  where: ScriptWhereUniqueInput!
  data: ScriptUpdateInput!
}

input ScriptCreateInput {
  title: String
  slug: String
  verticals: VerticalRelateToManyForCreateInput
  showOnBundle: Boolean
  component: ComponentRelateToOneForCreateInput
  brand: [ScriptBrandType!]
  category: ScriptCategoryType
  connectionType: ScriptConnectionTypeType
  technologyType: ScriptTechnologyTypeType
  affiliates: AffiliateRelateToManyForCreateInput
  subAffiliates: SubAffiliateRelateToManyForCreateInput
  providers: ProviderRelateToManyForCreateInput
  plans: PlanRelateToManyForCreateInput
  addonFields: AddonFieldRelateToManyForCreateInput
  pages: PageRelateToManyForCreateInput
  position: ScriptPositionType
  order: Int
  content: JSON
  ccProviders: ProviderCreditCardRelateToManyForCreateInput
  ccFormContainers: CCFormContainerRelateToManyForCreateInput
  plProviders: PLProviderRelateToManyForCreateInput
  plFormContainers: PLFormContainerRelateToManyForCreateInput
  hiProviders: HIProviderRelateToManyForCreateInput
  hiFormContainers: HIFormContainerRelateToManyForCreateInput
  formComponents: FormComponentRelateToManyForCreateInput
  formFields: FormFieldRelateToManyForCreateInput
}

input VerticalRelateToManyForCreateInput {
  create: [VerticalCreateInput!]
  connect: [VerticalWhereUniqueInput!]
}

input ComponentRelateToOneForCreateInput {
  create: ComponentCreateInput
  connect: ComponentWhereUniqueInput
}

input AffiliateRelateToManyForCreateInput {
  create: [AffiliateCreateInput!]
  connect: [AffiliateWhereUniqueInput!]
}

input ProviderRelateToManyForCreateInput {
  create: [ProviderCreateInput!]
  connect: [ProviderWhereUniqueInput!]
}

input PlanRelateToManyForCreateInput {
  create: [PlanCreateInput!]
  connect: [PlanWhereUniqueInput!]
}

input AddonFieldRelateToManyForCreateInput {
  create: [AddonFieldCreateInput!]
  connect: [AddonFieldWhereUniqueInput!]
}

input PageRelateToManyForCreateInput {
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
}

input FormComponentRelateToManyForCreateInput {
  create: [FormComponentCreateInput!]
  connect: [FormComponentWhereUniqueInput!]
}

input FormFieldRelateToManyForCreateInput {
  create: [FormFieldCreateInput!]
  connect: [FormFieldWhereUniqueInput!]
}

type State {
  id: ID!
  name: String
}

input StateWhereUniqueInput {
  id: ID
  name: String
}

input StateWhereInput {
  AND: [StateWhereInput!]
  OR: [StateWhereInput!]
  NOT: [StateWhereInput!]
  id: IDFilter
  name: StringFilter
}

input StateOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input StateUpdateInput {
  name: String
}

input StateUpdateArgs {
  where: StateWhereUniqueInput!
  data: StateUpdateInput!
}

input StateCreateInput {
  name: String
}

type SubAffiliate {
  id: ID!
  status: Boolean
  name: String
  subAffiliateId: String
  assignedVertical: String
  label: String
  subAffiliateNumber: Int
  rcCodes: String
  apiKey: String
  gtmId: String
  affiliate: Affiliate
  emailDomains: String
  scripts(where: ScriptWhereInput! = {}, orderBy: [ScriptOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScriptWhereUniqueInput): [Script!]
  scriptsCount(where: ScriptWhereInput! = {}): Int
  ccProvider(where: ProviderCreditCardWhereInput! = {}, orderBy: [ProviderCreditCardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProviderCreditCardWhereUniqueInput): [ProviderCreditCard!]
  ccProviderCount(where: ProviderCreditCardWhereInput! = {}): Int
  ccPlan(where: CreditCardWhereInput! = {}, orderBy: [CreditCardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CreditCardWhereUniqueInput): [CreditCard!]
  ccPlanCount(where: CreditCardWhereInput! = {}): Int
  ccFormContainer(where: CCFormContainerWhereInput! = {}, orderBy: [CCFormContainerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CCFormContainerWhereUniqueInput): [CCFormContainer!]
  ccFormContainerCount(where: CCFormContainerWhereInput! = {}): Int
  plProvider(where: PLProviderWhereInput! = {}, orderBy: [PLProviderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PLProviderWhereUniqueInput): [PLProvider!]
  plProviderCount(where: PLProviderWhereInput! = {}): Int
  plPlan(where: PersonalLoanWhereInput! = {}, orderBy: [PersonalLoanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonalLoanWhereUniqueInput): [PersonalLoan!]
  plPlanCount(where: PersonalLoanWhereInput! = {}): Int
  plFormContainer(where: PLFormContainerWhereInput! = {}, orderBy: [PLFormContainerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PLFormContainerWhereUniqueInput): [PLFormContainer!]
  plFormContainerCount(where: PLFormContainerWhereInput! = {}): Int
  hiProvider(where: HIProviderWhereInput! = {}, orderBy: [HIProviderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HIProviderWhereUniqueInput): [HIProvider!]
  hiProviderCount(where: HIProviderWhereInput! = {}): Int
  hiFormContainer(where: HIFormContainerWhereInput! = {}, orderBy: [HIFormContainerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HIFormContainerWhereUniqueInput): [HIFormContainer!]
  hiFormContainerCount(where: HIFormContainerWhereInput! = {}): Int
  bundleFormContainer(where: BundleFormContainerWhereInput! = {}, orderBy: [BundleFormContainerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BundleFormContainerWhereUniqueInput): [BundleFormContainer!]
  bundleFormContainerCount(where: BundleFormContainerWhereInput! = {}): Int
}

input SubAffiliateWhereUniqueInput {
  id: ID
  subAffiliateId: String
}

input SubAffiliateWhereInput {
  AND: [SubAffiliateWhereInput!]
  OR: [SubAffiliateWhereInput!]
  NOT: [SubAffiliateWhereInput!]
  id: IDFilter
  status: BooleanFilter
  name: StringFilter
  subAffiliateId: StringFilter
  assignedVertical: StringFilter
  subAffiliateNumber: IntNullableFilter
  rcCodes: StringFilter
  apiKey: StringFilter
  gtmId: StringFilter
  affiliate: AffiliateWhereInput
  emailDomains: StringFilter
  scripts: ScriptManyRelationFilter
  ccProvider: ProviderCreditCardManyRelationFilter
  ccPlan: CreditCardManyRelationFilter
  ccFormContainer: CCFormContainerManyRelationFilter
  plProvider: PLProviderManyRelationFilter
  plPlan: PersonalLoanManyRelationFilter
  plFormContainer: PLFormContainerManyRelationFilter
  hiProvider: HIProviderManyRelationFilter
  hiFormContainer: HIFormContainerManyRelationFilter
  bundleFormContainer: BundleFormContainerManyRelationFilter
}

input SubAffiliateOrderByInput {
  id: OrderDirection
  status: OrderDirection
  name: OrderDirection
  subAffiliateId: OrderDirection
  assignedVertical: OrderDirection
  subAffiliateNumber: OrderDirection
  rcCodes: OrderDirection
  apiKey: OrderDirection
  gtmId: OrderDirection
  emailDomains: OrderDirection
}

input SubAffiliateUpdateInput {
  status: Boolean
  name: String
  subAffiliateId: String
  assignedVertical: String
  subAffiliateNumber: Int
  rcCodes: String
  apiKey: String
  gtmId: String
  affiliate: AffiliateRelateToOneForUpdateInput
  emailDomains: String
  scripts: ScriptRelateToManyForUpdateInput
  ccProvider: ProviderCreditCardRelateToManyForUpdateInput
  ccPlan: CreditCardRelateToManyForUpdateInput
  ccFormContainer: CCFormContainerRelateToManyForUpdateInput
  plProvider: PLProviderRelateToManyForUpdateInput
  plPlan: PersonalLoanRelateToManyForUpdateInput
  plFormContainer: PLFormContainerRelateToManyForUpdateInput
  hiProvider: HIProviderRelateToManyForUpdateInput
  hiFormContainer: HIFormContainerRelateToManyForUpdateInput
  bundleFormContainer: BundleFormContainerRelateToManyForUpdateInput
}

input SubAffiliateUpdateArgs {
  where: SubAffiliateWhereUniqueInput!
  data: SubAffiliateUpdateInput!
}

input SubAffiliateCreateInput {
  status: Boolean
  name: String
  subAffiliateId: String
  assignedVertical: String
  subAffiliateNumber: Int
  rcCodes: String
  apiKey: String
  gtmId: String
  affiliate: AffiliateRelateToOneForCreateInput
  emailDomains: String
  scripts: ScriptRelateToManyForCreateInput
  ccProvider: ProviderCreditCardRelateToManyForCreateInput
  ccPlan: CreditCardRelateToManyForCreateInput
  ccFormContainer: CCFormContainerRelateToManyForCreateInput
  plProvider: PLProviderRelateToManyForCreateInput
  plPlan: PersonalLoanRelateToManyForCreateInput
  plFormContainer: PLFormContainerRelateToManyForCreateInput
  hiProvider: HIProviderRelateToManyForCreateInput
  hiFormContainer: HIFormContainerRelateToManyForCreateInput
  bundleFormContainer: BundleFormContainerRelateToManyForCreateInput
}

type Vertical {
  id: ID!
  serviceId: Int
  name: String
  slug: String
  title: String
  description: String
  icon: Media
  link: Link
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
  scripts(where: ScriptWhereInput! = {}, orderBy: [ScriptOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScriptWhereUniqueInput): [Script!]
  scriptsCount(where: ScriptWhereInput! = {}): Int
  journeyType: String
  csJourney: String
  agentJourney: String
}

input VerticalWhereUniqueInput {
  id: ID
  slug: String
}

input VerticalWhereInput {
  AND: [VerticalWhereInput!]
  OR: [VerticalWhereInput!]
  NOT: [VerticalWhereInput!]
  id: IDFilter
  serviceId: IntNullableFilter
  name: StringFilter
  slug: StringFilter
  title: StringFilter
  description: StringFilter
  icon: MediaWhereInput
  link: LinkWhereInput
  pages: PageManyRelationFilter
  scripts: ScriptManyRelationFilter
  journeyType: StringFilter
  csJourney: StringFilter
  agentJourney: StringFilter
}

input VerticalOrderByInput {
  id: OrderDirection
  serviceId: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  title: OrderDirection
  description: OrderDirection
  journeyType: OrderDirection
  csJourney: OrderDirection
  agentJourney: OrderDirection
}

input VerticalUpdateInput {
  serviceId: Int
  name: String
  slug: String
  title: String
  description: String
  icon: MediaRelateToOneForUpdateInput
  link: LinkRelateToOneForUpdateInput
  pages: PageRelateToManyForUpdateInput
  scripts: ScriptRelateToManyForUpdateInput
  journeyType: String
  csJourney: String
  agentJourney: String
}

input MediaRelateToOneForUpdateInput {
  create: MediaCreateInput
  connect: MediaWhereUniqueInput
  disconnect: Boolean
}

input LinkRelateToOneForUpdateInput {
  create: LinkCreateInput
  connect: LinkWhereUniqueInput
  disconnect: Boolean
}

input VerticalUpdateArgs {
  where: VerticalWhereUniqueInput!
  data: VerticalUpdateInput!
}

input VerticalCreateInput {
  serviceId: Int
  name: String
  slug: String
  title: String
  description: String
  icon: MediaRelateToOneForCreateInput
  link: LinkRelateToOneForCreateInput
  pages: PageRelateToManyForCreateInput
  scripts: ScriptRelateToManyForCreateInput
  journeyType: String
  csJourney: String
  agentJourney: String
}

input MediaRelateToOneForCreateInput {
  create: MediaCreateInput
  connect: MediaWhereUniqueInput
}

input LinkRelateToOneForCreateInput {
  create: LinkCreateInput
  connect: LinkWhereUniqueInput
}

type BundleFormContainer {
  id: ID!
  label: String
  isDefault: Boolean
  v2: Boolean
  hasAllAffiliates: Boolean
  affiliate(where: AffiliateWhereInput! = {}, orderBy: [AffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AffiliateWhereUniqueInput): [Affiliate!]
  affiliateCount(where: AffiliateWhereInput! = {}): Int
  includeAllSubAff: Boolean
  subAffiliate(where: SubAffiliateWhereInput! = {}, orderBy: [SubAffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubAffiliateWhereUniqueInput): [SubAffiliate!]
  subAffiliateCount(where: SubAffiliateWhereInput! = {}): Int
  page: String
  formComponents(where: FormComponentWhereInput! = {}, orderBy: [FormComponentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormComponentWhereUniqueInput): [FormComponent!]
  formComponentsCount(where: FormComponentWhereInput! = {}): Int
  formOrder: JSON
  defaultProps: JSON
  staticData: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input BundleFormContainerWhereUniqueInput {
  id: ID
}

input BundleFormContainerWhereInput {
  AND: [BundleFormContainerWhereInput!]
  OR: [BundleFormContainerWhereInput!]
  NOT: [BundleFormContainerWhereInput!]
  id: IDFilter
  label: StringFilter
  isDefault: BooleanFilter
  v2: BooleanFilter
  hasAllAffiliates: BooleanFilter
  affiliate: AffiliateManyRelationFilter
  includeAllSubAff: BooleanFilter
  subAffiliate: SubAffiliateManyRelationFilter
  page: StringFilter
  formComponents: FormComponentManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input BundleFormContainerOrderByInput {
  id: OrderDirection
  label: OrderDirection
  isDefault: OrderDirection
  v2: OrderDirection
  hasAllAffiliates: OrderDirection
  includeAllSubAff: OrderDirection
  page: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input BundleFormContainerUpdateInput {
  label: String
  isDefault: Boolean
  v2: Boolean
  hasAllAffiliates: Boolean
  affiliate: AffiliateRelateToManyForUpdateInput
  includeAllSubAff: Boolean
  subAffiliate: SubAffiliateRelateToManyForUpdateInput
  page: String
  formComponents: FormComponentRelateToManyForUpdateInput
  formOrder: JSON
  defaultProps: JSON
  staticData: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input BundleFormContainerUpdateArgs {
  where: BundleFormContainerWhereUniqueInput!
  data: BundleFormContainerUpdateInput!
}

input BundleFormContainerCreateInput {
  label: String
  isDefault: Boolean
  v2: Boolean
  hasAllAffiliates: Boolean
  affiliate: AffiliateRelateToManyForCreateInput
  includeAllSubAff: Boolean
  subAffiliate: SubAffiliateRelateToManyForCreateInput
  page: String
  formComponents: FormComponentRelateToManyForCreateInput
  formOrder: JSON
  defaultProps: JSON
  staticData: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

type Role {
  id: ID!
  name: String
  assignedTo(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  assignedToCount(where: UserWhereInput! = {}): Int
  role: [String!]
  user: [String!]
  creditCards: [String!]
  generic: [String!]
  healthInsurance: [String!]
  solar: [String!]
  personalLoan: [String!]
  broadband: [String!]
  mobile: [String!]
  energy: [String!]
  bundle: [String!]
  affiliate: [String!]
  subAffiliate: [String!]
  csSite: [String!]
  vertical: [String!]
  lms: [String!]
  auditLog: [String!]
  apiKey: [String!]
  uiElements: [String!]
  formElements: [String!]
  scripts: [String!]
  commision: [String!]
  dialerList: [String!]
  members: [String!]
  pages: [String!]
  passwordSetting: [String!]
  mirn: [String!]
  openEnergyBillRule: [String!]
  state: [String!]
  tariffCode: [String!]
  ignoreData: [String!]
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  assignedTo: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input RoleUpdateInput {
  name: String
  assignedTo: UserRelateToManyForUpdateInput
  role: [String!]
  user: [String!]
  creditCards: [String!]
  generic: [String!]
  healthInsurance: [String!]
  solar: [String!]
  personalLoan: [String!]
  broadband: [String!]
  mobile: [String!]
  energy: [String!]
  bundle: [String!]
  affiliate: [String!]
  subAffiliate: [String!]
  csSite: [String!]
  vertical: [String!]
  lms: [String!]
  auditLog: [String!]
  apiKey: [String!]
  uiElements: [String!]
  formElements: [String!]
  scripts: [String!]
  commision: [String!]
  dialerList: [String!]
  members: [String!]
  pages: [String!]
  passwordSetting: [String!]
  mirn: [String!]
  openEnergyBillRule: [String!]
  state: [String!]
  tariffCode: [String!]
  ignoreData: [String!]
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  assignedTo: UserRelateToManyForCreateInput
  role: [String!]
  user: [String!]
  creditCards: [String!]
  generic: [String!]
  healthInsurance: [String!]
  solar: [String!]
  personalLoan: [String!]
  broadband: [String!]
  mobile: [String!]
  energy: [String!]
  bundle: [String!]
  affiliate: [String!]
  subAffiliate: [String!]
  csSite: [String!]
  vertical: [String!]
  lms: [String!]
  auditLog: [String!]
  apiKey: [String!]
  uiElements: [String!]
  formElements: [String!]
  scripts: [String!]
  commision: [String!]
  dialerList: [String!]
  members: [String!]
  pages: [String!]
  passwordSetting: [String!]
  mirn: [String!]
  openEnergyBillRule: [String!]
  state: [String!]
  tariffCode: [String!]
  ignoreData: [String!]
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoleWhereUniqueInput): [Role!]
  rolesCount(where: RoleWhereInput! = {}): Int
  assignedDomains(where: DomainWhereInput! = {}, orderBy: [DomainOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DomainWhereUniqueInput): [Domain!]
  assignedDomainsCount(where: DomainWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  pages: PageManyRelationFilter
  roles: RoleManyRelationFilter
  assignedDomains: DomainManyRelationFilter
}

input RoleManyRelationFilter {
  every: RoleWhereInput
  some: RoleWhereInput
  none: RoleWhereInput
}

input DomainManyRelationFilter {
  every: DomainWhereInput
  some: DomainWhereInput
  none: DomainWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  pages: PageRelateToManyForUpdateInput
  roles: RoleRelateToManyForUpdateInput
  assignedDomains: DomainRelateToManyForUpdateInput
}

input RoleRelateToManyForUpdateInput {
  disconnect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

input DomainRelateToManyForUpdateInput {
  disconnect: [DomainWhereUniqueInput!]
  set: [DomainWhereUniqueInput!]
  create: [DomainCreateInput!]
  connect: [DomainWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  pages: PageRelateToManyForCreateInput
  roles: RoleRelateToManyForCreateInput
  assignedDomains: DomainRelateToManyForCreateInput
}

input RoleRelateToManyForCreateInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

input DomainRelateToManyForCreateInput {
  create: [DomainCreateInput!]
  connect: [DomainWhereUniqueInput!]
}

type RetailerMatrix {
  id: ID!
  retailer: Provider
  vertical: Vertical
  propertyType: String
  saleType: String
  energyType: String
  state: String
  range: String
  moveIn: String
  plan: Plan
  cost: Decimal
  image: Media
  startDate: DateTime
  endDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

scalar Decimal

input RetailerMatrixWhereUniqueInput {
  id: ID
}

input RetailerMatrixWhereInput {
  AND: [RetailerMatrixWhereInput!]
  OR: [RetailerMatrixWhereInput!]
  NOT: [RetailerMatrixWhereInput!]
  id: IDFilter
  retailer: ProviderWhereInput
  vertical: VerticalWhereInput
  propertyType: StringNullableFilter
  saleType: StringNullableFilter
  energyType: StringNullableFilter
  state: StringNullableFilter
  range: StringFilter
  moveIn: StringNullableFilter
  plan: PlanWhereInput
  cost: DecimalFilter
  image: MediaWhereInput
  startDate: DateTimeFilter
  endDate: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input DecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input RetailerMatrixOrderByInput {
  id: OrderDirection
  propertyType: OrderDirection
  saleType: OrderDirection
  energyType: OrderDirection
  state: OrderDirection
  range: OrderDirection
  moveIn: OrderDirection
  cost: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input RetailerMatrixUpdateInput {
  retailer: ProviderRelateToOneForUpdateInput
  vertical: VerticalRelateToOneForUpdateInput
  propertyType: String
  saleType: String
  energyType: String
  state: String
  range: String
  moveIn: String
  plan: PlanRelateToOneForUpdateInput
  cost: Decimal
  image: MediaRelateToOneForUpdateInput
  startDate: DateTime
  endDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input ProviderRelateToOneForUpdateInput {
  create: ProviderCreateInput
  connect: ProviderWhereUniqueInput
  disconnect: Boolean
}

input VerticalRelateToOneForUpdateInput {
  create: VerticalCreateInput
  connect: VerticalWhereUniqueInput
  disconnect: Boolean
}

input PlanRelateToOneForUpdateInput {
  create: PlanCreateInput
  connect: PlanWhereUniqueInput
  disconnect: Boolean
}

input RetailerMatrixUpdateArgs {
  where: RetailerMatrixWhereUniqueInput!
  data: RetailerMatrixUpdateInput!
}

input RetailerMatrixCreateInput {
  retailer: ProviderRelateToOneForCreateInput
  vertical: VerticalRelateToOneForCreateInput
  propertyType: String
  saleType: String
  energyType: String
  state: String
  range: String
  moveIn: String
  plan: PlanRelateToOneForCreateInput
  cost: Decimal
  image: MediaRelateToOneForCreateInput
  startDate: DateTime
  endDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input ProviderRelateToOneForCreateInput {
  create: ProviderCreateInput
  connect: ProviderWhereUniqueInput
}

input VerticalRelateToOneForCreateInput {
  create: VerticalCreateInput
  connect: VerticalWhereUniqueInput
}

input PlanRelateToOneForCreateInput {
  create: PlanCreateInput
  connect: PlanWhereUniqueInput
}

type CheckBoxContent {
  id: ID!
  name: String
  type: String
  order: Int
  content: String
  validationMessage: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CheckBoxContentWhereUniqueInput {
  id: ID
}

input CheckBoxContentWhereInput {
  AND: [CheckBoxContentWhereInput!]
  OR: [CheckBoxContentWhereInput!]
  NOT: [CheckBoxContentWhereInput!]
  id: IDFilter
  name: StringFilter
  type: StringNullableFilter
  order: IntNullableFilter
  content: StringFilter
  validationMessage: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CheckBoxContentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  type: OrderDirection
  order: OrderDirection
  content: OrderDirection
  validationMessage: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CheckBoxContentUpdateInput {
  name: String
  type: String
  order: Int
  content: String
  validationMessage: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CheckBoxContentUpdateArgs {
  where: CheckBoxContentWhereUniqueInput!
  data: CheckBoxContentUpdateInput!
}

input CheckBoxContentCreateInput {
  name: String
  type: String
  order: Int
  content: String
  validationMessage: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CreditScore {
  id: ID!
  name: String
  creditBureau: String
  scoreBand: String
  minCreditScore: Int
  maxCreditScore: Int
}

input CreditScoreWhereUniqueInput {
  id: ID
}

input CreditScoreWhereInput {
  AND: [CreditScoreWhereInput!]
  OR: [CreditScoreWhereInput!]
  NOT: [CreditScoreWhereInput!]
  id: IDFilter
  name: StringFilter
  creditBureau: StringNullableFilter
  scoreBand: StringNullableFilter
  minCreditScore: IntFilter
  maxCreditScore: IntFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input CreditScoreOrderByInput {
  id: OrderDirection
  name: OrderDirection
  creditBureau: OrderDirection
  scoreBand: OrderDirection
  minCreditScore: OrderDirection
  maxCreditScore: OrderDirection
}

input CreditScoreUpdateInput {
  name: String
  creditBureau: String
  scoreBand: String
  minCreditScore: Int
  maxCreditScore: Int
}

input CreditScoreUpdateArgs {
  where: CreditScoreWhereUniqueInput!
  data: CreditScoreUpdateInput!
}

input CreditScoreCreateInput {
  name: String
  creditBureau: String
  scoreBand: String
  minCreditScore: Int
  maxCreditScore: Int
}

type Logo {
  id: ID!
  name: String
  key: String
  media: Media
}

input LogoWhereUniqueInput {
  id: ID
}

input LogoWhereInput {
  AND: [LogoWhereInput!]
  OR: [LogoWhereInput!]
  NOT: [LogoWhereInput!]
  id: IDFilter
  name: StringFilter
  media: MediaWhereInput
}

input LogoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  key: OrderDirection
}

input LogoUpdateInput {
  name: String
  key: String
  media: MediaRelateToOneForUpdateInput
}

input LogoUpdateArgs {
  where: LogoWhereUniqueInput!
  data: LogoUpdateInput!
}

input LogoCreateInput {
  name: String
  key: String
  media: MediaRelateToOneForCreateInput
}

type FormComponent {
  id: ID!
  name: String
  key: String
  label: String
  type: String
  tooltip: String
  fields(where: FormFieldWhereInput! = {}, orderBy: [FormFieldOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormFieldWhereUniqueInput): [FormField!]
  fieldsCount(where: FormFieldWhereInput! = {}): Int
  formGroups: JSON
  defaultProps: JSON
  scripts(where: ScriptWhereInput! = {}, orderBy: [ScriptOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScriptWhereUniqueInput): [Script!]
  scriptsCount(where: ScriptWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input FormComponentWhereUniqueInput {
  id: ID
}

input FormComponentWhereInput {
  AND: [FormComponentWhereInput!]
  OR: [FormComponentWhereInput!]
  NOT: [FormComponentWhereInput!]
  id: IDFilter
  name: StringFilter
  key: StringFilter
  label: StringFilter
  type: StringNullableFilter
  tooltip: StringFilter
  fields: FormFieldManyRelationFilter
  scripts: ScriptManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input FormComponentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  key: OrderDirection
  label: OrderDirection
  type: OrderDirection
  tooltip: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FormComponentUpdateInput {
  name: String
  key: String
  label: String
  type: String
  tooltip: String
  fields: FormFieldRelateToManyForUpdateInput
  formGroups: JSON
  defaultProps: JSON
  scripts: ScriptRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input FormComponentUpdateArgs {
  where: FormComponentWhereUniqueInput!
  data: FormComponentUpdateInput!
}

input FormComponentCreateInput {
  name: String
  key: String
  label: String
  type: String
  tooltip: String
  fields: FormFieldRelateToManyForCreateInput
  formGroups: JSON
  defaultProps: JSON
  scripts: ScriptRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type FormField {
  id: ID!
  name: String
  label: String
  key: String
  reviewDetailsLabel: String
  placeholder: String
  component: String
  tooltip: String
  infoText: String
  infoPosition: String
  options: String
  validations: FormValidation
  subComponents(where: FormComponentWhereInput! = {}, orderBy: [FormComponentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormComponentWhereUniqueInput): [FormComponent!]
  subComponentsCount(where: FormComponentWhereInput! = {}): Int
  defaultProps: JSON
  scripts(where: ScriptWhereInput! = {}, orderBy: [ScriptOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScriptWhereUniqueInput): [Script!]
  scriptsCount(where: ScriptWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  content: String
}

input FormFieldWhereUniqueInput {
  id: ID
}

input FormFieldWhereInput {
  AND: [FormFieldWhereInput!]
  OR: [FormFieldWhereInput!]
  NOT: [FormFieldWhereInput!]
  id: IDFilter
  name: StringFilter
  label: StringFilter
  key: StringFilter
  reviewDetailsLabel: StringFilter
  placeholder: StringFilter
  component: StringNullableFilter
  tooltip: StringFilter
  infoText: StringFilter
  infoPosition: StringNullableFilter
  validations: FormValidationWhereInput
  subComponents: FormComponentManyRelationFilter
  scripts: ScriptManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  content: StringFilter
}

input FormFieldOrderByInput {
  id: OrderDirection
  name: OrderDirection
  label: OrderDirection
  key: OrderDirection
  reviewDetailsLabel: OrderDirection
  placeholder: OrderDirection
  component: OrderDirection
  tooltip: OrderDirection
  infoText: OrderDirection
  infoPosition: OrderDirection
  options: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  content: OrderDirection
}

input FormFieldUpdateInput {
  name: String
  label: String
  key: String
  reviewDetailsLabel: String
  placeholder: String
  component: String
  tooltip: String
  infoText: String
  infoPosition: String
  options: String
  validations: FormValidationRelateToOneForUpdateInput
  subComponents: FormComponentRelateToManyForUpdateInput
  defaultProps: JSON
  scripts: ScriptRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  content: String
}

input FormValidationRelateToOneForUpdateInput {
  create: FormValidationCreateInput
  connect: FormValidationWhereUniqueInput
  disconnect: Boolean
}

input FormFieldUpdateArgs {
  where: FormFieldWhereUniqueInput!
  data: FormFieldUpdateInput!
}

input FormFieldCreateInput {
  name: String
  label: String
  key: String
  reviewDetailsLabel: String
  placeholder: String
  component: String
  tooltip: String
  infoText: String
  infoPosition: String
  options: String
  validations: FormValidationRelateToOneForCreateInput
  subComponents: FormComponentRelateToManyForCreateInput
  defaultProps: JSON
  scripts: ScriptRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  content: String
}

input FormValidationRelateToOneForCreateInput {
  create: FormValidationCreateInput
  connect: FormValidationWhereUniqueInput
}

type FormOption {
  id: ID!
  key: String
  label: String
  options: JSON
}

input FormOptionWhereUniqueInput {
  id: ID
  key: String
}

input FormOptionWhereInput {
  AND: [FormOptionWhereInput!]
  OR: [FormOptionWhereInput!]
  NOT: [FormOptionWhereInput!]
  id: IDFilter
  key: StringFilter
  label: StringFilter
}

input FormOptionOrderByInput {
  id: OrderDirection
  key: OrderDirection
  label: OrderDirection
}

input FormOptionUpdateInput {
  key: String
  label: String
  options: JSON
}

input FormOptionUpdateArgs {
  where: FormOptionWhereUniqueInput!
  data: FormOptionUpdateInput!
}

input FormOptionCreateInput {
  key: String
  label: String
  options: JSON
}

type FormValidation {
  id: ID!
  name: String
  formField: FormField
  type: String
  typeMessage: String
  required: Boolean
  requiredMessage: String
  length: Int
  lengthMessage: String
  min: String
  minMessage: String
  max: String
  maxMessage: String
  regEx: String
  regExMessage: String
  createdAt: DateTime
  updatedAt: DateTime
}

input FormValidationWhereUniqueInput {
  id: ID
}

input FormValidationWhereInput {
  AND: [FormValidationWhereInput!]
  OR: [FormValidationWhereInput!]
  NOT: [FormValidationWhereInput!]
  id: IDFilter
  name: StringFilter
  formField: FormFieldWhereInput
  type: StringFilter
  typeMessage: StringFilter
  required: BooleanFilter
  requiredMessage: StringFilter
  length: IntNullableFilter
  lengthMessage: StringFilter
  min: StringFilter
  minMessage: StringFilter
  max: StringFilter
  maxMessage: StringFilter
  regEx: StringFilter
  regExMessage: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input FormValidationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  type: OrderDirection
  typeMessage: OrderDirection
  required: OrderDirection
  requiredMessage: OrderDirection
  length: OrderDirection
  lengthMessage: OrderDirection
  min: OrderDirection
  minMessage: OrderDirection
  max: OrderDirection
  maxMessage: OrderDirection
  regEx: OrderDirection
  regExMessage: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FormValidationUpdateInput {
  name: String
  formField: FormFieldRelateToOneForUpdateInput
  type: String
  typeMessage: String
  required: Boolean
  requiredMessage: String
  length: Int
  lengthMessage: String
  min: String
  minMessage: String
  max: String
  maxMessage: String
  regEx: String
  regExMessage: String
  createdAt: DateTime
  updatedAt: DateTime
}

input FormFieldRelateToOneForUpdateInput {
  create: FormFieldCreateInput
  connect: FormFieldWhereUniqueInput
  disconnect: Boolean
}

input FormValidationUpdateArgs {
  where: FormValidationWhereUniqueInput!
  data: FormValidationUpdateInput!
}

input FormValidationCreateInput {
  name: String
  formField: FormFieldRelateToOneForCreateInput
  type: String
  typeMessage: String
  required: Boolean
  requiredMessage: String
  length: Int
  lengthMessage: String
  min: String
  minMessage: String
  max: String
  maxMessage: String
  regEx: String
  regExMessage: String
  createdAt: DateTime
  updatedAt: DateTime
}

input FormFieldRelateToOneForCreateInput {
  create: FormFieldCreateInput
  connect: FormFieldWhereUniqueInput
}

type IgnoreList {
  id: ID!
  parameter: IgnoreParameter
  parameterData: IgnoreDataContent
  parameterContent: String
  status: Boolean
  taggedAs: IgnoreListTaggedAType
  type(where: IgnoreTypeWhereInput! = {}, orderBy: [IgnoreTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: IgnoreTypeWhereUniqueInput): [IgnoreType!]
  typeCount(where: IgnoreTypeWhereInput! = {}): Int
  comments: String
}

enum IgnoreListTaggedAType {
  testData
  spamData
}

input IgnoreListWhereUniqueInput {
  id: ID
  parameterContent: String
}

input IgnoreListWhereInput {
  AND: [IgnoreListWhereInput!]
  OR: [IgnoreListWhereInput!]
  NOT: [IgnoreListWhereInput!]
  id: IDFilter
  parameter: IgnoreParameterWhereInput
  parameterData: IgnoreDataContentWhereInput
  parameterContent: StringFilter
  status: BooleanFilter
  taggedAs: IgnoreListTaggedATypeNullableFilter
  type: IgnoreTypeManyRelationFilter
  comments: StringFilter
}

input IgnoreListTaggedATypeNullableFilter {
  equals: IgnoreListTaggedAType
  in: [IgnoreListTaggedAType!]
  notIn: [IgnoreListTaggedAType!]
  not: IgnoreListTaggedATypeNullableFilter
}

input IgnoreTypeManyRelationFilter {
  every: IgnoreTypeWhereInput
  some: IgnoreTypeWhereInput
  none: IgnoreTypeWhereInput
}

input IgnoreListOrderByInput {
  id: OrderDirection
  parameterContent: OrderDirection
  status: OrderDirection
  taggedAs: OrderDirection
  comments: OrderDirection
}

input IgnoreListUpdateInput {
  parameter: IgnoreParameterRelateToOneForUpdateInput
  parameterData: IgnoreDataContentRelateToOneForUpdateInput
  parameterContent: String
  status: Boolean
  taggedAs: IgnoreListTaggedAType
  type: IgnoreTypeRelateToManyForUpdateInput
  comments: String
}

input IgnoreParameterRelateToOneForUpdateInput {
  create: IgnoreParameterCreateInput
  connect: IgnoreParameterWhereUniqueInput
  disconnect: Boolean
}

input IgnoreDataContentRelateToOneForUpdateInput {
  create: IgnoreDataContentCreateInput
  connect: IgnoreDataContentWhereUniqueInput
  disconnect: Boolean
}

input IgnoreTypeRelateToManyForUpdateInput {
  disconnect: [IgnoreTypeWhereUniqueInput!]
  set: [IgnoreTypeWhereUniqueInput!]
  create: [IgnoreTypeCreateInput!]
  connect: [IgnoreTypeWhereUniqueInput!]
}

input IgnoreListUpdateArgs {
  where: IgnoreListWhereUniqueInput!
  data: IgnoreListUpdateInput!
}

input IgnoreListCreateInput {
  parameter: IgnoreParameterRelateToOneForCreateInput
  parameterData: IgnoreDataContentRelateToOneForCreateInput
  parameterContent: String
  status: Boolean
  taggedAs: IgnoreListTaggedAType
  type: IgnoreTypeRelateToManyForCreateInput
  comments: String
}

input IgnoreParameterRelateToOneForCreateInput {
  create: IgnoreParameterCreateInput
  connect: IgnoreParameterWhereUniqueInput
}

input IgnoreDataContentRelateToOneForCreateInput {
  create: IgnoreDataContentCreateInput
  connect: IgnoreDataContentWhereUniqueInput
}

input IgnoreTypeRelateToManyForCreateInput {
  create: [IgnoreTypeCreateInput!]
  connect: [IgnoreTypeWhereUniqueInput!]
}

type IgnoreParameter {
  id: ID!
  name: String
  status: Boolean
  assignedDataCount: Int
  type(where: IgnoreTypeWhereInput! = {}, orderBy: [IgnoreTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: IgnoreTypeWhereUniqueInput): [IgnoreType!]
  typeCount(where: IgnoreTypeWhereInput! = {}): Int
  typeData(where: IgnoreDataContentWhereInput! = {}, orderBy: [IgnoreDataContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: IgnoreDataContentWhereUniqueInput): [IgnoreDataContent!]
  typeDataCount(where: IgnoreDataContentWhereInput! = {}): Int
  comments: String
  createdAt: DateTime
  updatedAt: DateTime
}

input IgnoreParameterWhereUniqueInput {
  id: ID
  name: String
}

input IgnoreParameterWhereInput {
  AND: [IgnoreParameterWhereInput!]
  OR: [IgnoreParameterWhereInput!]
  NOT: [IgnoreParameterWhereInput!]
  id: IDFilter
  name: StringFilter
  status: BooleanFilter
  type: IgnoreTypeManyRelationFilter
  typeData: IgnoreDataContentManyRelationFilter
  comments: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IgnoreDataContentManyRelationFilter {
  every: IgnoreDataContentWhereInput
  some: IgnoreDataContentWhereInput
  none: IgnoreDataContentWhereInput
}

input IgnoreParameterOrderByInput {
  id: OrderDirection
  name: OrderDirection
  status: OrderDirection
  comments: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input IgnoreParameterUpdateInput {
  name: String
  status: Boolean
  type: IgnoreTypeRelateToManyForUpdateInput
  typeData: IgnoreDataContentRelateToManyForUpdateInput
  comments: String
  createdAt: DateTime
  updatedAt: DateTime
}

input IgnoreDataContentRelateToManyForUpdateInput {
  disconnect: [IgnoreDataContentWhereUniqueInput!]
  set: [IgnoreDataContentWhereUniqueInput!]
  create: [IgnoreDataContentCreateInput!]
  connect: [IgnoreDataContentWhereUniqueInput!]
}

input IgnoreParameterUpdateArgs {
  where: IgnoreParameterWhereUniqueInput!
  data: IgnoreParameterUpdateInput!
}

input IgnoreParameterCreateInput {
  name: String
  status: Boolean
  type: IgnoreTypeRelateToManyForCreateInput
  typeData: IgnoreDataContentRelateToManyForCreateInput
  comments: String
  createdAt: DateTime
  updatedAt: DateTime
}

input IgnoreDataContentRelateToManyForCreateInput {
  create: [IgnoreDataContentCreateInput!]
  connect: [IgnoreDataContentWhereUniqueInput!]
}

type IgnoreType {
  id: ID!
  name: String
  status: Boolean
  assignedDataCount: Int
  parameter(where: IgnoreParameterWhereInput! = {}, orderBy: [IgnoreParameterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: IgnoreParameterWhereUniqueInput): [IgnoreParameter!]
  parameterCount(where: IgnoreParameterWhereInput! = {}): Int
  parameterData(where: IgnoreDataContentWhereInput! = {}, orderBy: [IgnoreDataContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: IgnoreDataContentWhereUniqueInput): [IgnoreDataContent!]
  parameterDataCount(where: IgnoreDataContentWhereInput! = {}): Int
  comments: String
  createdAt: DateTime
  updatedAt: DateTime
}

input IgnoreTypeWhereUniqueInput {
  id: ID
  name: String
}

input IgnoreTypeWhereInput {
  AND: [IgnoreTypeWhereInput!]
  OR: [IgnoreTypeWhereInput!]
  NOT: [IgnoreTypeWhereInput!]
  id: IDFilter
  name: StringFilter
  status: BooleanFilter
  parameter: IgnoreParameterManyRelationFilter
  parameterData: IgnoreDataContentManyRelationFilter
  comments: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IgnoreParameterManyRelationFilter {
  every: IgnoreParameterWhereInput
  some: IgnoreParameterWhereInput
  none: IgnoreParameterWhereInput
}

input IgnoreTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  status: OrderDirection
  comments: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input IgnoreTypeUpdateInput {
  name: String
  status: Boolean
  parameter: IgnoreParameterRelateToManyForUpdateInput
  parameterData: IgnoreDataContentRelateToManyForUpdateInput
  comments: String
  createdAt: DateTime
  updatedAt: DateTime
}

input IgnoreParameterRelateToManyForUpdateInput {
  disconnect: [IgnoreParameterWhereUniqueInput!]
  set: [IgnoreParameterWhereUniqueInput!]
  create: [IgnoreParameterCreateInput!]
  connect: [IgnoreParameterWhereUniqueInput!]
}

input IgnoreTypeUpdateArgs {
  where: IgnoreTypeWhereUniqueInput!
  data: IgnoreTypeUpdateInput!
}

input IgnoreTypeCreateInput {
  name: String
  status: Boolean
  parameter: IgnoreParameterRelateToManyForCreateInput
  parameterData: IgnoreDataContentRelateToManyForCreateInput
  comments: String
  createdAt: DateTime
  updatedAt: DateTime
}

input IgnoreParameterRelateToManyForCreateInput {
  create: [IgnoreParameterCreateInput!]
  connect: [IgnoreParameterWhereUniqueInput!]
}

type IgnoreDataContent {
  id: ID!
  text: String
}

input IgnoreDataContentWhereUniqueInput {
  id: ID
  text: String
}

input IgnoreDataContentWhereInput {
  AND: [IgnoreDataContentWhereInput!]
  OR: [IgnoreDataContentWhereInput!]
  NOT: [IgnoreDataContentWhereInput!]
  id: IDFilter
  text: StringFilter
}

input IgnoreDataContentOrderByInput {
  id: OrderDirection
  text: OrderDirection
}

input IgnoreDataContentUpdateInput {
  text: String
}

input IgnoreDataContentUpdateArgs {
  where: IgnoreDataContentWhereUniqueInput!
  data: IgnoreDataContentUpdateInput!
}

input IgnoreDataContentCreateInput {
  text: String
}

type Domain {
  id: ID!
  name: String
  description: String
  hostname: String
  generateSEO: String
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
  redirects(where: RedirectWhereInput! = {}, orderBy: [RedirectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RedirectWhereUniqueInput): [Redirect!]
  redirectsCount(where: RedirectWhereInput! = {}): Int
  domainConfig: DomainConfig
  createdAt: DateTime
  updatedAt: DateTime
}

input DomainWhereUniqueInput {
  id: ID
  hostname: String
}

input DomainWhereInput {
  AND: [DomainWhereInput!]
  OR: [DomainWhereInput!]
  NOT: [DomainWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  hostname: StringFilter
  generateSEO: StringNullableFilter
  pages: PageManyRelationFilter
  redirects: RedirectManyRelationFilter
  domainConfig: DomainConfigWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input RedirectManyRelationFilter {
  every: RedirectWhereInput
  some: RedirectWhereInput
  none: RedirectWhereInput
}

input DomainOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  hostname: OrderDirection
  generateSEO: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input DomainUpdateInput {
  name: String
  description: String
  hostname: String
  generateSEO: String
  pages: PageRelateToManyForUpdateInput
  redirects: RedirectRelateToManyForUpdateInput
  domainConfig: DomainConfigRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input RedirectRelateToManyForUpdateInput {
  disconnect: [RedirectWhereUniqueInput!]
  set: [RedirectWhereUniqueInput!]
  create: [RedirectCreateInput!]
  connect: [RedirectWhereUniqueInput!]
}

input DomainConfigRelateToOneForUpdateInput {
  create: DomainConfigCreateInput
  connect: DomainConfigWhereUniqueInput
  disconnect: Boolean
}

input DomainUpdateArgs {
  where: DomainWhereUniqueInput!
  data: DomainUpdateInput!
}

input DomainCreateInput {
  name: String
  description: String
  hostname: String
  generateSEO: String
  pages: PageRelateToManyForCreateInput
  redirects: RedirectRelateToManyForCreateInput
  domainConfig: DomainConfigRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input RedirectRelateToManyForCreateInput {
  create: [RedirectCreateInput!]
  connect: [RedirectWhereUniqueInput!]
}

input DomainConfigRelateToOneForCreateInput {
  create: DomainConfigCreateInput
  connect: DomainConfigWhereUniqueInput
}

type DomainConfig {
  id: ID!
  title: String
  domains(where: DomainWhereInput! = {}, orderBy: [DomainOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DomainWhereUniqueInput): [Domain!]
  domainsCount(where: DomainWhereInput! = {}): Int
  metaTitle: String
  metaDescription: String
  favicon: Media
  primaryColor: String
  secondaryColor: String
  accentColor: String
  fontUrl: String
  fontFamily: String
  headerLogo: Media
  headerLinkGroups(where: LinkGroupWhereInput! = {}, orderBy: [LinkGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LinkGroupWhereUniqueInput): [LinkGroup!]
  headerLinkGroupsCount(where: LinkGroupWhereInput! = {}): Int
  headerLinkGroupsOrder: JSON
  enableBlogs: Boolean
  footerLogo: Media
  footerLinkGroups(where: LinkGroupWhereInput! = {}, orderBy: [LinkGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LinkGroupWhereUniqueInput): [LinkGroup!]
  footerLinkGroupsCount(where: LinkGroupWhereInput! = {}): Int
  footerLinkGroupsOrder: JSON
  socialIcons(where: LinkWhereInput! = {}, orderBy: [LinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LinkWhereUniqueInput): [Link!]
  socialIconsCount(where: LinkWhereInput! = {}): Int
  address: String
  disclaimer: String
  createdAt: DateTime
  updatedAt: DateTime
}

input DomainConfigWhereUniqueInput {
  id: ID
}

input DomainConfigWhereInput {
  AND: [DomainConfigWhereInput!]
  OR: [DomainConfigWhereInput!]
  NOT: [DomainConfigWhereInput!]
  id: IDFilter
  title: StringFilter
  domains: DomainManyRelationFilter
  metaTitle: StringFilter
  metaDescription: StringFilter
  favicon: MediaWhereInput
  primaryColor: StringFilter
  secondaryColor: StringFilter
  accentColor: StringFilter
  fontUrl: StringFilter
  fontFamily: StringFilter
  headerLogo: MediaWhereInput
  headerLinkGroups: LinkGroupManyRelationFilter
  enableBlogs: BooleanFilter
  footerLogo: MediaWhereInput
  footerLinkGroups: LinkGroupManyRelationFilter
  socialIcons: LinkManyRelationFilter
  address: StringFilter
  disclaimer: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input LinkGroupManyRelationFilter {
  every: LinkGroupWhereInput
  some: LinkGroupWhereInput
  none: LinkGroupWhereInput
}

input LinkManyRelationFilter {
  every: LinkWhereInput
  some: LinkWhereInput
  none: LinkWhereInput
}

input DomainConfigOrderByInput {
  id: OrderDirection
  title: OrderDirection
  metaTitle: OrderDirection
  metaDescription: OrderDirection
  primaryColor: OrderDirection
  secondaryColor: OrderDirection
  accentColor: OrderDirection
  fontUrl: OrderDirection
  fontFamily: OrderDirection
  enableBlogs: OrderDirection
  address: OrderDirection
  disclaimer: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input DomainConfigUpdateInput {
  title: String
  domains: DomainRelateToManyForUpdateInput
  metaTitle: String
  metaDescription: String
  favicon: MediaRelateToOneForUpdateInput
  primaryColor: String
  secondaryColor: String
  accentColor: String
  fontUrl: String
  fontFamily: String
  headerLogo: MediaRelateToOneForUpdateInput
  headerLinkGroups: LinkGroupRelateToManyForUpdateInput
  headerLinkGroupsOrder: JSON
  enableBlogs: Boolean
  footerLogo: MediaRelateToOneForUpdateInput
  footerLinkGroups: LinkGroupRelateToManyForUpdateInput
  footerLinkGroupsOrder: JSON
  socialIcons: LinkRelateToManyForUpdateInput
  address: String
  disclaimer: String
  createdAt: DateTime
  updatedAt: DateTime
}

input LinkGroupRelateToManyForUpdateInput {
  disconnect: [LinkGroupWhereUniqueInput!]
  set: [LinkGroupWhereUniqueInput!]
  create: [LinkGroupCreateInput!]
  connect: [LinkGroupWhereUniqueInput!]
}

input LinkRelateToManyForUpdateInput {
  disconnect: [LinkWhereUniqueInput!]
  set: [LinkWhereUniqueInput!]
  create: [LinkCreateInput!]
  connect: [LinkWhereUniqueInput!]
}

input DomainConfigUpdateArgs {
  where: DomainConfigWhereUniqueInput!
  data: DomainConfigUpdateInput!
}

input DomainConfigCreateInput {
  title: String
  domains: DomainRelateToManyForCreateInput
  metaTitle: String
  metaDescription: String
  favicon: MediaRelateToOneForCreateInput
  primaryColor: String
  secondaryColor: String
  accentColor: String
  fontUrl: String
  fontFamily: String
  headerLogo: MediaRelateToOneForCreateInput
  headerLinkGroups: LinkGroupRelateToManyForCreateInput
  headerLinkGroupsOrder: JSON
  enableBlogs: Boolean
  footerLogo: MediaRelateToOneForCreateInput
  footerLinkGroups: LinkGroupRelateToManyForCreateInput
  footerLinkGroupsOrder: JSON
  socialIcons: LinkRelateToManyForCreateInput
  address: String
  disclaimer: String
  createdAt: DateTime
  updatedAt: DateTime
}

input LinkGroupRelateToManyForCreateInput {
  create: [LinkGroupCreateInput!]
  connect: [LinkGroupWhereUniqueInput!]
}

input LinkRelateToManyForCreateInput {
  create: [LinkCreateInput!]
  connect: [LinkWhereUniqueInput!]
}

type Link {
  id: ID!
  key: String
  name: String
  label: String
  url: String
  icon: Media
  type: String
}

input LinkWhereUniqueInput {
  id: ID
}

input LinkWhereInput {
  AND: [LinkWhereInput!]
  OR: [LinkWhereInput!]
  NOT: [LinkWhereInput!]
  id: IDFilter
  key: StringFilter
  label: StringFilter
  url: StringFilter
  icon: MediaWhereInput
  type: StringNullableFilter
}

input LinkOrderByInput {
  id: OrderDirection
  key: OrderDirection
  label: OrderDirection
  url: OrderDirection
  type: OrderDirection
}

input LinkUpdateInput {
  key: String
  label: String
  url: String
  icon: MediaRelateToOneForUpdateInput
  type: String
}

input LinkUpdateArgs {
  where: LinkWhereUniqueInput!
  data: LinkUpdateInput!
}

input LinkCreateInput {
  key: String
  label: String
  url: String
  icon: MediaRelateToOneForCreateInput
  type: String
}

type LinkGroup {
  id: ID!
  label: String
  key: String
  links(where: LinkWhereInput! = {}, orderBy: [LinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LinkWhereUniqueInput): [Link!]
  linksCount(where: LinkWhereInput! = {}): Int
  linksOrder: JSON
}

input LinkGroupWhereUniqueInput {
  id: ID
}

input LinkGroupWhereInput {
  AND: [LinkGroupWhereInput!]
  OR: [LinkGroupWhereInput!]
  NOT: [LinkGroupWhereInput!]
  id: IDFilter
  label: StringFilter
  key: StringFilter
  links: LinkManyRelationFilter
}

input LinkGroupOrderByInput {
  id: OrderDirection
  label: OrderDirection
  key: OrderDirection
}

input LinkGroupUpdateInput {
  label: String
  key: String
  links: LinkRelateToManyForUpdateInput
  linksOrder: JSON
}

input LinkGroupUpdateArgs {
  where: LinkGroupWhereUniqueInput!
  data: LinkGroupUpdateInput!
}

input LinkGroupCreateInput {
  label: String
  key: String
  links: LinkRelateToManyForCreateInput
  linksOrder: JSON
}

type Page {
  id: ID!
  title: String
  description: String
  domain: Domain
  vertical: Vertical
  type: String
  pageConfig: PageConfig
  slug: String
  url: String
  status: String
  content: Page_content_Document
  section(where: SectionWhereInput! = {}, orderBy: [SectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SectionWhereUniqueInput): [Section!]
  sectionCount(where: SectionWhereInput! = {}): Int
  widgets(where: WidgetWhereInput! = {}, orderBy: [WidgetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WidgetWhereUniqueInput): [Widget!]
  widgetsCount(where: WidgetWhereInput! = {}): Int
  scripts(where: ScriptWhereInput! = {}, orderBy: [ScriptOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScriptWhereUniqueInput): [Script!]
  scriptsCount(where: ScriptWhereInput! = {}): Int
  thumbnail: Media
  heroImage: Media
  subHead: String
  supportingText: String
  linkLabel: String
  linkUrl: String
  author: User
  publishDate: DateTime
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  seoIndex: String
  metaRobots: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Page_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PageWhereUniqueInput {
  id: ID
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  domain: DomainWhereInput
  vertical: VerticalWhereInput
  type: StringFilter
  pageConfig: PageConfigWhereInput
  slug: StringFilter
  url: StringFilter
  status: StringFilter
  section: SectionManyRelationFilter
  widgets: WidgetManyRelationFilter
  scripts: ScriptManyRelationFilter
  thumbnail: MediaWhereInput
  heroImage: MediaWhereInput
  subHead: StringFilter
  supportingText: StringFilter
  linkLabel: StringFilter
  linkUrl: StringFilter
  author: UserWhereInput
  publishDate: DateTimeNullableFilter
  tags: TagManyRelationFilter
  seoIndex: StringNullableFilter
  metaRobots: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SectionManyRelationFilter {
  every: SectionWhereInput
  some: SectionWhereInput
  none: SectionWhereInput
}

input WidgetManyRelationFilter {
  every: WidgetWhereInput
  some: WidgetWhereInput
  none: WidgetWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  type: OrderDirection
  slug: OrderDirection
  url: OrderDirection
  status: OrderDirection
  subHead: OrderDirection
  supportingText: OrderDirection
  linkLabel: OrderDirection
  linkUrl: OrderDirection
  publishDate: OrderDirection
  seoIndex: OrderDirection
  metaRobots: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PageUpdateInput {
  title: String
  description: String
  domain: DomainRelateToOneForUpdateInput
  vertical: VerticalRelateToOneForUpdateInput
  type: String
  pageConfig: PageConfigRelateToOneForUpdateInput
  slug: String
  url: String
  status: String
  content: JSON
  section: SectionRelateToManyForUpdateInput
  widgets: WidgetRelateToManyForUpdateInput
  scripts: ScriptRelateToManyForUpdateInput
  thumbnail: MediaRelateToOneForUpdateInput
  heroImage: MediaRelateToOneForUpdateInput
  subHead: String
  supportingText: String
  linkLabel: String
  linkUrl: String
  author: UserRelateToOneForUpdateInput
  publishDate: DateTime
  tags: TagRelateToManyForUpdateInput
  seoIndex: String
  metaRobots: String
  createdAt: DateTime
  updatedAt: DateTime
}

input DomainRelateToOneForUpdateInput {
  create: DomainCreateInput
  connect: DomainWhereUniqueInput
  disconnect: Boolean
}

input PageConfigRelateToOneForUpdateInput {
  create: PageConfigCreateInput
  connect: PageConfigWhereUniqueInput
  disconnect: Boolean
}

input SectionRelateToManyForUpdateInput {
  disconnect: [SectionWhereUniqueInput!]
  set: [SectionWhereUniqueInput!]
  create: [SectionCreateInput!]
  connect: [SectionWhereUniqueInput!]
}

input WidgetRelateToManyForUpdateInput {
  disconnect: [WidgetWhereUniqueInput!]
  set: [WidgetWhereUniqueInput!]
  create: [WidgetCreateInput!]
  connect: [WidgetWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  title: String
  description: String
  domain: DomainRelateToOneForCreateInput
  vertical: VerticalRelateToOneForCreateInput
  type: String
  pageConfig: PageConfigRelateToOneForCreateInput
  slug: String
  url: String
  status: String
  content: JSON
  section: SectionRelateToManyForCreateInput
  widgets: WidgetRelateToManyForCreateInput
  scripts: ScriptRelateToManyForCreateInput
  thumbnail: MediaRelateToOneForCreateInput
  heroImage: MediaRelateToOneForCreateInput
  subHead: String
  supportingText: String
  linkLabel: String
  linkUrl: String
  author: UserRelateToOneForCreateInput
  publishDate: DateTime
  tags: TagRelateToManyForCreateInput
  seoIndex: String
  metaRobots: String
  createdAt: DateTime
  updatedAt: DateTime
}

input DomainRelateToOneForCreateInput {
  create: DomainCreateInput
  connect: DomainWhereUniqueInput
}

input PageConfigRelateToOneForCreateInput {
  create: PageConfigCreateInput
  connect: PageConfigWhereUniqueInput
}

input SectionRelateToManyForCreateInput {
  create: [SectionCreateInput!]
  connect: [SectionWhereUniqueInput!]
}

input WidgetRelateToManyForCreateInput {
  create: [WidgetCreateInput!]
  connect: [WidgetWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type PageConfig {
  id: ID!
  title: String
  rcCode: String
  ivrNumber: Int
  page: Page
  favicon: Media
  headerLogo: Media
  primaryColor: String
  secondaryColor: String
  accentColor: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PageConfigWhereUniqueInput {
  id: ID
}

input PageConfigWhereInput {
  AND: [PageConfigWhereInput!]
  OR: [PageConfigWhereInput!]
  NOT: [PageConfigWhereInput!]
  id: IDFilter
  title: StringFilter
  rcCode: StringFilter
  ivrNumber: IntNullableFilter
  page: PageWhereInput
  favicon: MediaWhereInput
  headerLogo: MediaWhereInput
  primaryColor: StringFilter
  secondaryColor: StringFilter
  accentColor: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PageConfigOrderByInput {
  id: OrderDirection
  title: OrderDirection
  rcCode: OrderDirection
  ivrNumber: OrderDirection
  primaryColor: OrderDirection
  secondaryColor: OrderDirection
  accentColor: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PageConfigUpdateInput {
  title: String
  rcCode: String
  ivrNumber: Int
  page: PageRelateToOneForUpdateInput
  favicon: MediaRelateToOneForUpdateInput
  headerLogo: MediaRelateToOneForUpdateInput
  primaryColor: String
  secondaryColor: String
  accentColor: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PageRelateToOneForUpdateInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
  disconnect: Boolean
}

input PageConfigUpdateArgs {
  where: PageConfigWhereUniqueInput!
  data: PageConfigUpdateInput!
}

input PageConfigCreateInput {
  title: String
  rcCode: String
  ivrNumber: Int
  page: PageRelateToOneForCreateInput
  favicon: MediaRelateToOneForCreateInput
  headerLogo: MediaRelateToOneForCreateInput
  primaryColor: String
  secondaryColor: String
  accentColor: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PageRelateToOneForCreateInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
}

type Redirect {
  id: ID!
  domain(where: DomainWhereInput! = {}, orderBy: [DomainOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DomainWhereUniqueInput): [Domain!]
  domainCount(where: DomainWhereInput! = {}): Int
  from: String
  to: String
  type: String
  createdAt: DateTime
  updatedAt: DateTime
}

input RedirectWhereUniqueInput {
  id: ID
}

input RedirectWhereInput {
  AND: [RedirectWhereInput!]
  OR: [RedirectWhereInput!]
  NOT: [RedirectWhereInput!]
  id: IDFilter
  domain: DomainManyRelationFilter
  from: StringFilter
  to: StringFilter
  type: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input RedirectOrderByInput {
  id: OrderDirection
  from: OrderDirection
  to: OrderDirection
  type: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input RedirectUpdateInput {
  domain: DomainRelateToManyForUpdateInput
  from: String
  to: String
  type: String
  createdAt: DateTime
  updatedAt: DateTime
}

input RedirectUpdateArgs {
  where: RedirectWhereUniqueInput!
  data: RedirectUpdateInput!
}

input RedirectCreateInput {
  domain: DomainRelateToManyForCreateInput
  from: String
  to: String
  type: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Section {
  id: ID!
  sectionName: String
  sectionOrder: Int
  content: Section_content_Document
  pages: Page
  createdAt: DateTime
  updatedAt: DateTime
}

type Section_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input SectionWhereUniqueInput {
  id: ID
}

input SectionWhereInput {
  AND: [SectionWhereInput!]
  OR: [SectionWhereInput!]
  NOT: [SectionWhereInput!]
  id: IDFilter
  sectionName: StringFilter
  sectionOrder: IntNullableFilter
  pages: PageWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SectionOrderByInput {
  id: OrderDirection
  sectionName: OrderDirection
  sectionOrder: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SectionUpdateInput {
  sectionName: String
  sectionOrder: Int
  content: JSON
  pages: PageRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SectionUpdateArgs {
  where: SectionWhereUniqueInput!
  data: SectionUpdateInput!
}

input SectionCreateInput {
  sectionName: String
  sectionOrder: Int
  content: JSON
  pages: PageRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Tag {
  id: ID!
  name: String
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  pages: PageManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  pages: PageRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  pages: PageRelateToManyForCreateInput
}

type Widget {
  id: ID!
  title: String
  slug: String
  content: Widget_content_Document
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

type Widget_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input WidgetWhereUniqueInput {
  id: ID
  slug: String
}

input WidgetWhereInput {
  AND: [WidgetWhereInput!]
  OR: [WidgetWhereInput!]
  NOT: [WidgetWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  pages: PageManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input WidgetOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input WidgetUpdateInput {
  title: String
  slug: String
  content: JSON
  pages: PageRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input WidgetUpdateArgs {
  where: WidgetWhereUniqueInput!
  data: WidgetUpdateInput!
}

input WidgetCreateInput {
  title: String
  slug: String
  content: JSON
  pages: PageRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Attribute {
  id: ID!
  title: String
  key: String
  vertical: Vertical
  component: Component
  tooltip: String
  formatter: String
  formatterOptions: String
  fields(where: FieldWhereInput! = {}, orderBy: [FieldOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FieldWhereUniqueInput): [Field!]
  fieldsCount(where: FieldWhereInput! = {}): Int
  attributes(where: AttributeWhereInput! = {}, orderBy: [AttributeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AttributeWhereUniqueInput): [Attribute!]
  attributesCount(where: AttributeWhereInput! = {}): Int
  containers(where: ContainerWhereInput! = {}, orderBy: [ContainerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContainerWhereUniqueInput): [Container!]
  containersCount(where: ContainerWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input AttributeWhereUniqueInput {
  id: ID
  key: String
}

input AttributeWhereInput {
  AND: [AttributeWhereInput!]
  OR: [AttributeWhereInput!]
  NOT: [AttributeWhereInput!]
  id: IDFilter
  title: StringFilter
  key: StringFilter
  vertical: VerticalWhereInput
  component: ComponentWhereInput
  tooltip: StringFilter
  formatter: StringFilter
  formatterOptions: StringFilter
  fields: FieldManyRelationFilter
  attributes: AttributeManyRelationFilter
  containers: ContainerManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input FieldManyRelationFilter {
  every: FieldWhereInput
  some: FieldWhereInput
  none: FieldWhereInput
}

input AttributeManyRelationFilter {
  every: AttributeWhereInput
  some: AttributeWhereInput
  none: AttributeWhereInput
}

input ContainerManyRelationFilter {
  every: ContainerWhereInput
  some: ContainerWhereInput
  none: ContainerWhereInput
}

input AttributeOrderByInput {
  id: OrderDirection
  title: OrderDirection
  key: OrderDirection
  tooltip: OrderDirection
  formatter: OrderDirection
  formatterOptions: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AttributeUpdateInput {
  title: String
  key: String
  vertical: VerticalRelateToOneForUpdateInput
  component: ComponentRelateToOneForUpdateInput
  tooltip: String
  formatter: String
  formatterOptions: String
  fields: FieldRelateToManyForUpdateInput
  attributes: AttributeRelateToManyForUpdateInput
  containers: ContainerRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input FieldRelateToManyForUpdateInput {
  disconnect: [FieldWhereUniqueInput!]
  set: [FieldWhereUniqueInput!]
  create: [FieldCreateInput!]
  connect: [FieldWhereUniqueInput!]
}

input AttributeRelateToManyForUpdateInput {
  disconnect: [AttributeWhereUniqueInput!]
  set: [AttributeWhereUniqueInput!]
  create: [AttributeCreateInput!]
  connect: [AttributeWhereUniqueInput!]
}

input ContainerRelateToManyForUpdateInput {
  disconnect: [ContainerWhereUniqueInput!]
  set: [ContainerWhereUniqueInput!]
  create: [ContainerCreateInput!]
  connect: [ContainerWhereUniqueInput!]
}

input AttributeUpdateArgs {
  where: AttributeWhereUniqueInput!
  data: AttributeUpdateInput!
}

input AttributeCreateInput {
  title: String
  key: String
  vertical: VerticalRelateToOneForCreateInput
  component: ComponentRelateToOneForCreateInput
  tooltip: String
  formatter: String
  formatterOptions: String
  fields: FieldRelateToManyForCreateInput
  attributes: AttributeRelateToManyForCreateInput
  containers: ContainerRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input FieldRelateToManyForCreateInput {
  create: [FieldCreateInput!]
  connect: [FieldWhereUniqueInput!]
}

input AttributeRelateToManyForCreateInput {
  create: [AttributeCreateInput!]
  connect: [AttributeWhereUniqueInput!]
}

input ContainerRelateToManyForCreateInput {
  create: [ContainerCreateInput!]
  connect: [ContainerWhereUniqueInput!]
}

type Component {
  id: ID!
  name: String
  slug: String
  attributes(where: AttributeWhereInput! = {}, orderBy: [AttributeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AttributeWhereUniqueInput): [Attribute!]
  attributesCount(where: AttributeWhereInput! = {}): Int
  title: String
  tooltip: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ComponentWhereUniqueInput {
  id: ID
}

input ComponentWhereInput {
  AND: [ComponentWhereInput!]
  OR: [ComponentWhereInput!]
  NOT: [ComponentWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  attributes: AttributeManyRelationFilter
  title: StringFilter
  tooltip: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ComponentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  title: OrderDirection
  tooltip: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ComponentUpdateInput {
  name: String
  slug: String
  attributes: AttributeRelateToManyForUpdateInput
  title: String
  tooltip: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ComponentUpdateArgs {
  where: ComponentWhereUniqueInput!
  data: ComponentUpdateInput!
}

input ComponentCreateInput {
  name: String
  slug: String
  attributes: AttributeRelateToManyForCreateInput
  title: String
  tooltip: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Container {
  id: ID!
  name: String
  attributes(where: AttributeWhereInput! = {}, orderBy: [AttributeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AttributeWhereUniqueInput): [Attribute!]
  attributesCount(where: AttributeWhereInput! = {}): Int
}

input ContainerWhereUniqueInput {
  id: ID
}

input ContainerWhereInput {
  AND: [ContainerWhereInput!]
  OR: [ContainerWhereInput!]
  NOT: [ContainerWhereInput!]
  id: IDFilter
  name: StringFilter
  attributes: AttributeManyRelationFilter
}

input ContainerOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ContainerUpdateInput {
  name: String
  attributes: AttributeRelateToManyForUpdateInput
}

input ContainerUpdateArgs {
  where: ContainerWhereUniqueInput!
  data: ContainerUpdateInput!
}

input ContainerCreateInput {
  name: String
  attributes: AttributeRelateToManyForCreateInput
}

type Field {
  id: ID!
  key: String
  name: String
  title: String
  isDynamic: Boolean
  tooltip: String
  fields(where: FieldWhereInput! = {}, orderBy: [FieldOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FieldWhereUniqueInput): [Field!]
  fieldsCount(where: FieldWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input FieldWhereUniqueInput {
  id: ID
  name: String
}

input FieldWhereInput {
  AND: [FieldWhereInput!]
  OR: [FieldWhereInput!]
  NOT: [FieldWhereInput!]
  id: IDFilter
  key: StringFilter
  name: StringFilter
  title: StringFilter
  isDynamic: BooleanFilter
  tooltip: StringFilter
  fields: FieldManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input FieldOrderByInput {
  id: OrderDirection
  key: OrderDirection
  name: OrderDirection
  title: OrderDirection
  isDynamic: OrderDirection
  tooltip: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FieldUpdateInput {
  key: String
  name: String
  title: String
  isDynamic: Boolean
  tooltip: String
  fields: FieldRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input FieldUpdateArgs {
  where: FieldWhereUniqueInput!
  data: FieldUpdateInput!
}

input FieldCreateInput {
  key: String
  name: String
  title: String
  isDynamic: Boolean
  tooltip: String
  fields: FieldRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Filter {
  id: ID!
  title: String
  type: String
  placeholder: String
  formatter: Boolean
  aggregate: Boolean
  min: Int
  max: Int
  value: String
  collapsed: Boolean
  isApplied: Boolean
  attribute: Attribute
  elements(where: FilterWhereInput! = {}, orderBy: [FilterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FilterWhereUniqueInput): [Filter!]
  elementsCount(where: FilterWhereInput! = {}): Int
  vertical: Vertical
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
}

input FilterWhereUniqueInput {
  id: ID
}

input FilterWhereInput {
  AND: [FilterWhereInput!]
  OR: [FilterWhereInput!]
  NOT: [FilterWhereInput!]
  id: IDFilter
  title: StringFilter
  type: StringFilter
  placeholder: StringFilter
  formatter: BooleanFilter
  aggregate: BooleanFilter
  min: IntNullableFilter
  max: IntNullableFilter
  value: StringFilter
  collapsed: BooleanFilter
  isApplied: BooleanFilter
  attribute: AttributeWhereInput
  elements: FilterManyRelationFilter
  vertical: VerticalWhereInput
  pages: PageManyRelationFilter
}

input FilterManyRelationFilter {
  every: FilterWhereInput
  some: FilterWhereInput
  none: FilterWhereInput
}

input FilterOrderByInput {
  id: OrderDirection
  title: OrderDirection
  type: OrderDirection
  placeholder: OrderDirection
  formatter: OrderDirection
  aggregate: OrderDirection
  min: OrderDirection
  max: OrderDirection
  value: OrderDirection
  collapsed: OrderDirection
  isApplied: OrderDirection
}

input FilterUpdateInput {
  title: String
  type: String
  placeholder: String
  formatter: Boolean
  aggregate: Boolean
  min: Int
  max: Int
  value: String
  collapsed: Boolean
  isApplied: Boolean
  attribute: AttributeRelateToOneForUpdateInput
  elements: FilterRelateToManyForUpdateInput
  vertical: VerticalRelateToOneForUpdateInput
  pages: PageRelateToManyForUpdateInput
}

input AttributeRelateToOneForUpdateInput {
  create: AttributeCreateInput
  connect: AttributeWhereUniqueInput
  disconnect: Boolean
}

input FilterRelateToManyForUpdateInput {
  disconnect: [FilterWhereUniqueInput!]
  set: [FilterWhereUniqueInput!]
  create: [FilterCreateInput!]
  connect: [FilterWhereUniqueInput!]
}

input FilterUpdateArgs {
  where: FilterWhereUniqueInput!
  data: FilterUpdateInput!
}

input FilterCreateInput {
  title: String
  type: String
  placeholder: String
  formatter: Boolean
  aggregate: Boolean
  min: Int
  max: Int
  value: String
  collapsed: Boolean
  isApplied: Boolean
  attribute: AttributeRelateToOneForCreateInput
  elements: FilterRelateToManyForCreateInput
  vertical: VerticalRelateToOneForCreateInput
  pages: PageRelateToManyForCreateInput
}

input AttributeRelateToOneForCreateInput {
  create: AttributeCreateInput
  connect: AttributeWhereUniqueInput
}

input FilterRelateToManyForCreateInput {
  create: [FilterCreateInput!]
  connect: [FilterWhereUniqueInput!]
}

type CustomAttribute {
  id: ID!
  name: String
  attribute: Attribute
  headerTooltip: String
  infoTooltip: String
  formatter: String
}

input CustomAttributeWhereUniqueInput {
  id: ID
}

input CustomAttributeWhereInput {
  AND: [CustomAttributeWhereInput!]
  OR: [CustomAttributeWhereInput!]
  NOT: [CustomAttributeWhereInput!]
  id: IDFilter
  name: StringFilter
  attribute: AttributeWhereInput
  headerTooltip: StringFilter
  infoTooltip: StringFilter
  formatter: StringFilter
}

input CustomAttributeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  headerTooltip: OrderDirection
  infoTooltip: OrderDirection
  formatter: OrderDirection
}

input CustomAttributeUpdateInput {
  name: String
  attribute: AttributeRelateToOneForUpdateInput
  headerTooltip: String
  infoTooltip: String
  formatter: String
}

input CustomAttributeUpdateArgs {
  where: CustomAttributeWhereUniqueInput!
  data: CustomAttributeUpdateInput!
}

input CustomAttributeCreateInput {
  name: String
  attribute: AttributeRelateToOneForCreateInput
  headerTooltip: String
  infoTooltip: String
  formatter: String
}

type UploadCategory {
  id: ID!
  label: String
  key: String
  documents(where: UploadDocumentWhereInput! = {}, orderBy: [UploadDocumentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UploadDocumentWhereUniqueInput): [UploadDocument!]
  documentsCount(where: UploadDocumentWhereInput! = {}): Int
  infoText: String
  requiredLength: Int
  mappedDocuments: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UploadCategoryWhereUniqueInput {
  id: ID
}

input UploadCategoryWhereInput {
  AND: [UploadCategoryWhereInput!]
  OR: [UploadCategoryWhereInput!]
  NOT: [UploadCategoryWhereInput!]
  id: IDFilter
  label: StringFilter
  documents: UploadDocumentManyRelationFilter
  infoText: StringFilter
  requiredLength: IntFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input UploadDocumentManyRelationFilter {
  every: UploadDocumentWhereInput
  some: UploadDocumentWhereInput
  none: UploadDocumentWhereInput
}

input UploadCategoryOrderByInput {
  id: OrderDirection
  label: OrderDirection
  key: OrderDirection
  infoText: OrderDirection
  requiredLength: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input UploadCategoryUpdateInput {
  label: String
  key: String
  documents: UploadDocumentRelateToManyForUpdateInput
  infoText: String
  requiredLength: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input UploadDocumentRelateToManyForUpdateInput {
  disconnect: [UploadDocumentWhereUniqueInput!]
  set: [UploadDocumentWhereUniqueInput!]
  create: [UploadDocumentCreateInput!]
  connect: [UploadDocumentWhereUniqueInput!]
}

input UploadCategoryUpdateArgs {
  where: UploadCategoryWhereUniqueInput!
  data: UploadCategoryUpdateInput!
}

input UploadCategoryCreateInput {
  label: String
  key: String
  documents: UploadDocumentRelateToManyForCreateInput
  infoText: String
  requiredLength: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input UploadDocumentRelateToManyForCreateInput {
  create: [UploadDocumentCreateInput!]
  connect: [UploadDocumentWhereUniqueInput!]
}

type UploadDocument {
  id: ID!
  name: String
  label: String
  key: String
  isRequired: Boolean
  order: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input UploadDocumentWhereUniqueInput {
  id: ID
}

input UploadDocumentWhereInput {
  AND: [UploadDocumentWhereInput!]
  OR: [UploadDocumentWhereInput!]
  NOT: [UploadDocumentWhereInput!]
  id: IDFilter
  label: StringFilter
  isRequired: BooleanFilter
  order: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input UploadDocumentOrderByInput {
  id: OrderDirection
  label: OrderDirection
  key: OrderDirection
  isRequired: OrderDirection
  order: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input UploadDocumentUpdateInput {
  label: String
  key: String
  isRequired: Boolean
  order: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input UploadDocumentUpdateArgs {
  where: UploadDocumentWhereUniqueInput!
  data: UploadDocumentUpdateInput!
}

input UploadDocumentCreateInput {
  label: String
  key: String
  isRequired: Boolean
  order: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type GenericProvider {
  id: ID!
  name: String
  slug: String
  businessName: String
  legalName: String
  vertical: Vertical
  affiliates(where: AffiliateWhereInput! = {}, orderBy: [AffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AffiliateWhereUniqueInput): [Affiliate!]
  affiliatesCount(where: AffiliateWhereInput! = {}): Int
  includeAllSubAff: Boolean
  subAffiliates(where: SubAffiliateWhereInput! = {}, orderBy: [SubAffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubAffiliateWhereUniqueInput): [SubAffiliate!]
  subAffiliatesCount(where: SubAffiliateWhereInput! = {}): Int
  disallowAff(where: AffiliateWhereInput! = {}, orderBy: [AffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AffiliateWhereUniqueInput): [Affiliate!]
  disallowAffCount(where: AffiliateWhereInput! = {}): Int
  disallowSubaff(where: SubAffiliateWhereInput! = {}, orderBy: [SubAffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubAffiliateWhereUniqueInput): [SubAffiliate!]
  disallowSubaffCount(where: SubAffiliateWhereInput! = {}): Int
  country: String
  logos(where: LogoWhereInput! = {}, orderBy: [LogoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LogoWhereUniqueInput): [Logo!]
  logosCount(where: LogoWhereInput! = {}): Int
  plans(where: GenericPlanWhereInput! = {}, orderBy: [GenericPlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GenericPlanWhereUniqueInput): [GenericPlan!]
  plansCount(where: GenericPlanWhereInput! = {}): Int
  addons(where: GenericAddonWhereInput! = {}, orderBy: [GenericAddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GenericAddonWhereUniqueInput): [GenericAddon!]
  addonsCount(where: GenericAddonWhereInput! = {}): Int
  qaEmails(where: MemberWhereInput! = {}, orderBy: [MemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MemberWhereUniqueInput): [Member!]
  qaEmailsCount(where: MemberWhereInput! = {}): Int
  termsCondition: String
  postSubmissionContent: String
  applyNowContent: String
  status: Boolean
  csStatus: Boolean
  agentStatus: Boolean
  applyStatus: Boolean
  customConfig: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input GenericProviderWhereUniqueInput {
  id: ID
  slug: String
}

input GenericProviderWhereInput {
  AND: [GenericProviderWhereInput!]
  OR: [GenericProviderWhereInput!]
  NOT: [GenericProviderWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  businessName: StringFilter
  legalName: StringFilter
  vertical: VerticalWhereInput
  affiliates: AffiliateManyRelationFilter
  includeAllSubAff: BooleanFilter
  subAffiliates: SubAffiliateManyRelationFilter
  disallowAff: AffiliateManyRelationFilter
  disallowSubaff: SubAffiliateManyRelationFilter
  logos: LogoManyRelationFilter
  plans: GenericPlanManyRelationFilter
  addons: GenericAddonManyRelationFilter
  qaEmails: MemberManyRelationFilter
  termsCondition: StringFilter
  postSubmissionContent: StringFilter
  applyNowContent: StringFilter
  status: BooleanFilter
  csStatus: BooleanFilter
  agentStatus: BooleanFilter
  applyStatus: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input LogoManyRelationFilter {
  every: LogoWhereInput
  some: LogoWhereInput
  none: LogoWhereInput
}

input GenericPlanManyRelationFilter {
  every: GenericPlanWhereInput
  some: GenericPlanWhereInput
  none: GenericPlanWhereInput
}

input GenericAddonManyRelationFilter {
  every: GenericAddonWhereInput
  some: GenericAddonWhereInput
  none: GenericAddonWhereInput
}

input MemberManyRelationFilter {
  every: MemberWhereInput
  some: MemberWhereInput
  none: MemberWhereInput
}

input GenericProviderOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  businessName: OrderDirection
  legalName: OrderDirection
  includeAllSubAff: OrderDirection
  country: OrderDirection
  termsCondition: OrderDirection
  postSubmissionContent: OrderDirection
  applyNowContent: OrderDirection
  status: OrderDirection
  csStatus: OrderDirection
  agentStatus: OrderDirection
  applyStatus: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input GenericProviderUpdateInput {
  name: String
  slug: String
  businessName: String
  legalName: String
  vertical: VerticalRelateToOneForUpdateInput
  affiliates: AffiliateRelateToManyForUpdateInput
  includeAllSubAff: Boolean
  subAffiliates: SubAffiliateRelateToManyForUpdateInput
  disallowAff: AffiliateRelateToManyForUpdateInput
  disallowSubaff: SubAffiliateRelateToManyForUpdateInput
  country: String
  logos: LogoRelateToManyForUpdateInput
  plans: GenericPlanRelateToManyForUpdateInput
  addons: GenericAddonRelateToManyForUpdateInput
  qaEmails: MemberRelateToManyForUpdateInput
  termsCondition: String
  postSubmissionContent: String
  applyNowContent: String
  status: Boolean
  csStatus: Boolean
  agentStatus: Boolean
  applyStatus: Boolean
  customConfig: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input LogoRelateToManyForUpdateInput {
  disconnect: [LogoWhereUniqueInput!]
  set: [LogoWhereUniqueInput!]
  create: [LogoCreateInput!]
  connect: [LogoWhereUniqueInput!]
}

input GenericPlanRelateToManyForUpdateInput {
  disconnect: [GenericPlanWhereUniqueInput!]
  set: [GenericPlanWhereUniqueInput!]
  create: [GenericPlanCreateInput!]
  connect: [GenericPlanWhereUniqueInput!]
}

input GenericAddonRelateToManyForUpdateInput {
  disconnect: [GenericAddonWhereUniqueInput!]
  set: [GenericAddonWhereUniqueInput!]
  create: [GenericAddonCreateInput!]
  connect: [GenericAddonWhereUniqueInput!]
}

input MemberRelateToManyForUpdateInput {
  disconnect: [MemberWhereUniqueInput!]
  set: [MemberWhereUniqueInput!]
  create: [MemberCreateInput!]
  connect: [MemberWhereUniqueInput!]
}

input GenericProviderUpdateArgs {
  where: GenericProviderWhereUniqueInput!
  data: GenericProviderUpdateInput!
}

input GenericProviderCreateInput {
  name: String
  slug: String
  businessName: String
  legalName: String
  vertical: VerticalRelateToOneForCreateInput
  affiliates: AffiliateRelateToManyForCreateInput
  includeAllSubAff: Boolean
  subAffiliates: SubAffiliateRelateToManyForCreateInput
  disallowAff: AffiliateRelateToManyForCreateInput
  disallowSubaff: SubAffiliateRelateToManyForCreateInput
  country: String
  logos: LogoRelateToManyForCreateInput
  plans: GenericPlanRelateToManyForCreateInput
  addons: GenericAddonRelateToManyForCreateInput
  qaEmails: MemberRelateToManyForCreateInput
  termsCondition: String
  postSubmissionContent: String
  applyNowContent: String
  status: Boolean
  csStatus: Boolean
  agentStatus: Boolean
  applyStatus: Boolean
  customConfig: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input LogoRelateToManyForCreateInput {
  create: [LogoCreateInput!]
  connect: [LogoWhereUniqueInput!]
}

input GenericPlanRelateToManyForCreateInput {
  create: [GenericPlanCreateInput!]
  connect: [GenericPlanWhereUniqueInput!]
}

input GenericAddonRelateToManyForCreateInput {
  create: [GenericAddonCreateInput!]
  connect: [GenericAddonWhereUniqueInput!]
}

input MemberRelateToManyForCreateInput {
  create: [MemberCreateInput!]
  connect: [MemberWhereUniqueInput!]
}

type GenericPlan {
  id: ID!
  label: String
  name: String
  description: GenericPlanField
  benefits(where: GenericPlanFieldWhereInput! = {}, orderBy: [GenericPlanFieldOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GenericPlanFieldWhereUniqueInput): [GenericPlanField!]
  benefitsCount(where: GenericPlanFieldWhereInput! = {}): Int
  features(where: GenericPlanFieldWhereInput! = {}, orderBy: [GenericPlanFieldOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GenericPlanFieldWhereUniqueInput): [GenericPlanField!]
  featuresCount(where: GenericPlanFieldWhereInput! = {}): Int
  parameters(where: GenericPlanFieldWhereInput! = {}, orderBy: [GenericPlanFieldOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GenericPlanFieldWhereUniqueInput): [GenericPlanField!]
  parametersCount(where: GenericPlanFieldWhereInput! = {}): Int
  attachments(where: GenericPlanFieldWhereInput! = {}, orderBy: [GenericPlanFieldOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GenericPlanFieldWhereUniqueInput): [GenericPlanField!]
  attachmentsCount(where: GenericPlanFieldWhereInput! = {}): Int
  termsCondition: GenericPlanField
  specialOffer: GenericPlanField
  preferenceOrder: Int
  viewDetails: GenericPlanField
  clickoutURL: GenericPlanField
  consents(where: CheckBoxContentWhereInput! = {}, orderBy: [CheckBoxContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CheckBoxContentWhereUniqueInput): [CheckBoxContent!]
  consentsCount(where: CheckBoxContentWhereInput! = {}): Int
  provider: GenericProvider
  affiliates(where: AffiliateWhereInput! = {}, orderBy: [AffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AffiliateWhereUniqueInput): [Affiliate!]
  affiliatesCount(where: AffiliateWhereInput! = {}): Int
  includeAllSubAff: Boolean
  subAffiliates(where: SubAffiliateWhereInput! = {}, orderBy: [SubAffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubAffiliateWhereUniqueInput): [SubAffiliate!]
  subAffiliatesCount(where: SubAffiliateWhereInput! = {}): Int
  disallowAff(where: AffiliateWhereInput! = {}, orderBy: [AffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AffiliateWhereUniqueInput): [Affiliate!]
  disallowAffCount(where: AffiliateWhereInput! = {}): Int
  disallowSubaff(where: SubAffiliateWhereInput! = {}, orderBy: [SubAffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubAffiliateWhereUniqueInput): [SubAffiliate!]
  disallowSubaffCount(where: SubAffiliateWhereInput! = {}): Int
  addons(where: GenericAddonWhereInput! = {}, orderBy: [GenericAddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GenericAddonWhereUniqueInput): [GenericAddon!]
  addonsCount(where: GenericAddonWhereInput! = {}): Int
  applyNowContent: String
  status: Boolean
  csStatus: Boolean
  agentStatus: Boolean
  viewStatus: Boolean
  agentSendStatus: Boolean
  clickoutStatus: Boolean
  inboundCallStatus: Boolean
  applyStatus: Boolean
  agentApplyStatus: Boolean
  customConfig: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input GenericPlanWhereUniqueInput {
  id: ID
}

input GenericPlanWhereInput {
  AND: [GenericPlanWhereInput!]
  OR: [GenericPlanWhereInput!]
  NOT: [GenericPlanWhereInput!]
  id: IDFilter
  label: StringFilter
  name: StringFilter
  description: GenericPlanFieldWhereInput
  benefits: GenericPlanFieldManyRelationFilter
  features: GenericPlanFieldManyRelationFilter
  parameters: GenericPlanFieldManyRelationFilter
  attachments: GenericPlanFieldManyRelationFilter
  termsCondition: GenericPlanFieldWhereInput
  specialOffer: GenericPlanFieldWhereInput
  preferenceOrder: IntNullableFilter
  viewDetails: GenericPlanFieldWhereInput
  clickoutURL: GenericPlanFieldWhereInput
  consents: CheckBoxContentManyRelationFilter
  provider: GenericProviderWhereInput
  affiliates: AffiliateManyRelationFilter
  includeAllSubAff: BooleanFilter
  subAffiliates: SubAffiliateManyRelationFilter
  disallowAff: AffiliateManyRelationFilter
  disallowSubaff: SubAffiliateManyRelationFilter
  addons: GenericAddonManyRelationFilter
  applyNowContent: StringFilter
  status: BooleanFilter
  csStatus: BooleanFilter
  agentStatus: BooleanFilter
  viewStatus: BooleanFilter
  agentSendStatus: BooleanFilter
  clickoutStatus: BooleanFilter
  inboundCallStatus: BooleanFilter
  applyStatus: BooleanFilter
  agentApplyStatus: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input GenericPlanFieldManyRelationFilter {
  every: GenericPlanFieldWhereInput
  some: GenericPlanFieldWhereInput
  none: GenericPlanFieldWhereInput
}

input CheckBoxContentManyRelationFilter {
  every: CheckBoxContentWhereInput
  some: CheckBoxContentWhereInput
  none: CheckBoxContentWhereInput
}

input GenericPlanOrderByInput {
  id: OrderDirection
  label: OrderDirection
  name: OrderDirection
  preferenceOrder: OrderDirection
  includeAllSubAff: OrderDirection
  applyNowContent: OrderDirection
  status: OrderDirection
  csStatus: OrderDirection
  agentStatus: OrderDirection
  viewStatus: OrderDirection
  agentSendStatus: OrderDirection
  clickoutStatus: OrderDirection
  inboundCallStatus: OrderDirection
  applyStatus: OrderDirection
  agentApplyStatus: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input GenericPlanUpdateInput {
  label: String
  name: String
  description: GenericPlanFieldRelateToOneForUpdateInput
  benefits: GenericPlanFieldRelateToManyForUpdateInput
  features: GenericPlanFieldRelateToManyForUpdateInput
  parameters: GenericPlanFieldRelateToManyForUpdateInput
  attachments: GenericPlanFieldRelateToManyForUpdateInput
  termsCondition: GenericPlanFieldRelateToOneForUpdateInput
  specialOffer: GenericPlanFieldRelateToOneForUpdateInput
  preferenceOrder: Int
  viewDetails: GenericPlanFieldRelateToOneForUpdateInput
  clickoutURL: GenericPlanFieldRelateToOneForUpdateInput
  consents: CheckBoxContentRelateToManyForUpdateInput
  provider: GenericProviderRelateToOneForUpdateInput
  affiliates: AffiliateRelateToManyForUpdateInput
  includeAllSubAff: Boolean
  subAffiliates: SubAffiliateRelateToManyForUpdateInput
  disallowAff: AffiliateRelateToManyForUpdateInput
  disallowSubaff: SubAffiliateRelateToManyForUpdateInput
  addons: GenericAddonRelateToManyForUpdateInput
  applyNowContent: String
  status: Boolean
  csStatus: Boolean
  agentStatus: Boolean
  viewStatus: Boolean
  agentSendStatus: Boolean
  clickoutStatus: Boolean
  inboundCallStatus: Boolean
  applyStatus: Boolean
  agentApplyStatus: Boolean
  customConfig: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input GenericPlanFieldRelateToOneForUpdateInput {
  create: GenericPlanFieldCreateInput
  connect: GenericPlanFieldWhereUniqueInput
  disconnect: Boolean
}

input GenericPlanFieldRelateToManyForUpdateInput {
  disconnect: [GenericPlanFieldWhereUniqueInput!]
  set: [GenericPlanFieldWhereUniqueInput!]
  create: [GenericPlanFieldCreateInput!]
  connect: [GenericPlanFieldWhereUniqueInput!]
}

input CheckBoxContentRelateToManyForUpdateInput {
  disconnect: [CheckBoxContentWhereUniqueInput!]
  set: [CheckBoxContentWhereUniqueInput!]
  create: [CheckBoxContentCreateInput!]
  connect: [CheckBoxContentWhereUniqueInput!]
}

input GenericProviderRelateToOneForUpdateInput {
  create: GenericProviderCreateInput
  connect: GenericProviderWhereUniqueInput
  disconnect: Boolean
}

input GenericPlanUpdateArgs {
  where: GenericPlanWhereUniqueInput!
  data: GenericPlanUpdateInput!
}

input GenericPlanCreateInput {
  label: String
  name: String
  description: GenericPlanFieldRelateToOneForCreateInput
  benefits: GenericPlanFieldRelateToManyForCreateInput
  features: GenericPlanFieldRelateToManyForCreateInput
  parameters: GenericPlanFieldRelateToManyForCreateInput
  attachments: GenericPlanFieldRelateToManyForCreateInput
  termsCondition: GenericPlanFieldRelateToOneForCreateInput
  specialOffer: GenericPlanFieldRelateToOneForCreateInput
  preferenceOrder: Int
  viewDetails: GenericPlanFieldRelateToOneForCreateInput
  clickoutURL: GenericPlanFieldRelateToOneForCreateInput
  consents: CheckBoxContentRelateToManyForCreateInput
  provider: GenericProviderRelateToOneForCreateInput
  affiliates: AffiliateRelateToManyForCreateInput
  includeAllSubAff: Boolean
  subAffiliates: SubAffiliateRelateToManyForCreateInput
  disallowAff: AffiliateRelateToManyForCreateInput
  disallowSubaff: SubAffiliateRelateToManyForCreateInput
  addons: GenericAddonRelateToManyForCreateInput
  applyNowContent: String
  status: Boolean
  csStatus: Boolean
  agentStatus: Boolean
  viewStatus: Boolean
  agentSendStatus: Boolean
  clickoutStatus: Boolean
  inboundCallStatus: Boolean
  applyStatus: Boolean
  agentApplyStatus: Boolean
  customConfig: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input GenericPlanFieldRelateToOneForCreateInput {
  create: GenericPlanFieldCreateInput
  connect: GenericPlanFieldWhereUniqueInput
}

input GenericPlanFieldRelateToManyForCreateInput {
  create: [GenericPlanFieldCreateInput!]
  connect: [GenericPlanFieldWhereUniqueInput!]
}

input CheckBoxContentRelateToManyForCreateInput {
  create: [CheckBoxContentCreateInput!]
  connect: [CheckBoxContentWhereUniqueInput!]
}

input GenericProviderRelateToOneForCreateInput {
  create: GenericProviderCreateInput
  connect: GenericProviderWhereUniqueInput
}

type GenericPlanField {
  id: ID!
  name: String
  label: String
  key: String
  type: String
  value: String
  formatter: String
  suffix: String
  tooltip: String
  content: String
  hasListing: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input GenericPlanFieldWhereUniqueInput {
  id: ID
}

input GenericPlanFieldWhereInput {
  AND: [GenericPlanFieldWhereInput!]
  OR: [GenericPlanFieldWhereInput!]
  NOT: [GenericPlanFieldWhereInput!]
  id: IDFilter
  name: StringFilter
  label: StringFilter
  key: StringFilter
  value: StringFilter
  suffix: StringFilter
  tooltip: StringFilter
  content: StringFilter
  hasListing: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input GenericPlanFieldOrderByInput {
  id: OrderDirection
  name: OrderDirection
  label: OrderDirection
  key: OrderDirection
  type: OrderDirection
  value: OrderDirection
  formatter: OrderDirection
  suffix: OrderDirection
  tooltip: OrderDirection
  content: OrderDirection
  hasListing: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input GenericPlanFieldUpdateInput {
  name: String
  label: String
  key: String
  type: String
  value: String
  formatter: String
  suffix: String
  tooltip: String
  content: String
  hasListing: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input GenericPlanFieldUpdateArgs {
  where: GenericPlanFieldWhereUniqueInput!
  data: GenericPlanFieldUpdateInput!
}

input GenericPlanFieldCreateInput {
  name: String
  label: String
  key: String
  type: String
  value: String
  formatter: String
  suffix: String
  tooltip: String
  content: String
  hasListing: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type GenericAddon {
  id: ID!
  addonName: String
  price: String
  plans(where: GenericPlanWhereInput! = {}, orderBy: [GenericPlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GenericPlanWhereUniqueInput): [GenericPlan!]
  plansCount(where: GenericPlanWhereInput! = {}): Int
  provider: GenericProvider
  createdAt: DateTime
  updatedAt: DateTime
}

input GenericAddonWhereUniqueInput {
  id: ID
}

input GenericAddonWhereInput {
  AND: [GenericAddonWhereInput!]
  OR: [GenericAddonWhereInput!]
  NOT: [GenericAddonWhereInput!]
  id: IDFilter
  addonName: StringFilter
  price: StringFilter
  plans: GenericPlanManyRelationFilter
  provider: GenericProviderWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input GenericAddonOrderByInput {
  id: OrderDirection
  addonName: OrderDirection
  price: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input GenericAddonUpdateInput {
  addonName: String
  price: String
  plans: GenericPlanRelateToManyForUpdateInput
  provider: GenericProviderRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input GenericAddonUpdateArgs {
  where: GenericAddonWhereUniqueInput!
  data: GenericAddonUpdateInput!
}

input GenericAddonCreateInput {
  addonName: String
  price: String
  plans: GenericPlanRelateToManyForCreateInput
  provider: GenericProviderRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Addon {
  id: ID!
  uuid: String
  label: String
  addonFields: AddonField
  addonGroup: String
  price: String
  isMandatory: Int
  include: Int
  plans(where: PlanWhereInput! = {}, orderBy: [PlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanWhereUniqueInput): [Plan!]
  plansCount(where: PlanWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input AddonWhereUniqueInput {
  id: ID
  uuid: String
}

input AddonWhereInput {
  AND: [AddonWhereInput!]
  OR: [AddonWhereInput!]
  NOT: [AddonWhereInput!]
  id: IDFilter
  uuid: StringFilter
  addonFields: AddonFieldWhereInput
  addonGroup: StringNullableFilter
  price: StringFilter
  isMandatory: IntNullableFilter
  include: IntNullableFilter
  plans: PlanManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input AddonOrderByInput {
  id: OrderDirection
  uuid: OrderDirection
  addonGroup: OrderDirection
  price: OrderDirection
  isMandatory: OrderDirection
  include: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AddonUpdateInput {
  uuid: String
  addonFields: AddonFieldRelateToOneForUpdateInput
  addonGroup: String
  price: String
  isMandatory: Int
  include: Int
  plans: PlanRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AddonFieldRelateToOneForUpdateInput {
  create: AddonFieldCreateInput
  connect: AddonFieldWhereUniqueInput
  disconnect: Boolean
}

input AddonUpdateArgs {
  where: AddonWhereUniqueInput!
  data: AddonUpdateInput!
}

input AddonCreateInput {
  uuid: String
  addonFields: AddonFieldRelateToOneForCreateInput
  addonGroup: String
  price: String
  isMandatory: Int
  include: Int
  plans: PlanRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AddonFieldRelateToOneForCreateInput {
  create: AddonFieldCreateInput
  connect: AddonFieldWhereUniqueInput
}

type AddonField {
  id: ID!
  label: String
  addonId: Int
  addonName: String
  category: Int
  addons(where: AddonWhereInput! = {}, orderBy: [AddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddonWhereUniqueInput): [Addon!]
  addonsCount(where: AddonWhereInput! = {}): Int
  scripts(where: ScriptWhereInput! = {}, orderBy: [ScriptOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScriptWhereUniqueInput): [Script!]
  scriptsCount(where: ScriptWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input AddonFieldWhereUniqueInput {
  id: ID
  addonId: Int
}

input AddonFieldWhereInput {
  AND: [AddonFieldWhereInput!]
  OR: [AddonFieldWhereInput!]
  NOT: [AddonFieldWhereInput!]
  id: IDFilter
  addonId: IntFilter
  addonName: StringFilter
  category: IntNullableFilter
  addons: AddonManyRelationFilter
  scripts: ScriptManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input AddonManyRelationFilter {
  every: AddonWhereInput
  some: AddonWhereInput
  none: AddonWhereInput
}

input AddonFieldOrderByInput {
  id: OrderDirection
  addonId: OrderDirection
  addonName: OrderDirection
  category: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AddonFieldUpdateInput {
  addonId: Int
  addonName: String
  category: Int
  addons: AddonRelateToManyForUpdateInput
  scripts: ScriptRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AddonRelateToManyForUpdateInput {
  disconnect: [AddonWhereUniqueInput!]
  set: [AddonWhereUniqueInput!]
  create: [AddonCreateInput!]
  connect: [AddonWhereUniqueInput!]
}

input AddonFieldUpdateArgs {
  where: AddonFieldWhereUniqueInput!
  data: AddonFieldUpdateInput!
}

input AddonFieldCreateInput {
  addonId: Int
  addonName: String
  category: Int
  addons: AddonRelateToManyForCreateInput
  scripts: ScriptRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AddonRelateToManyForCreateInput {
  create: [AddonCreateInput!]
  connect: [AddonWhereUniqueInput!]
}

type Plan {
  id: ID!
  label: String
  uuid: String
  planId: Int
  name: String
  planStatus: Boolean
  scripts(where: ScriptWhereInput! = {}, orderBy: [ScriptOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScriptWhereUniqueInput): [Script!]
  scriptsCount(where: ScriptWhereInput! = {}): Int
  provider: Provider
  addons(where: AddonWhereInput! = {}, orderBy: [AddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddonWhereUniqueInput): [Addon!]
  addonsCount(where: AddonWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input PlanWhereUniqueInput {
  id: ID
  uuid: String
}

input PlanWhereInput {
  AND: [PlanWhereInput!]
  OR: [PlanWhereInput!]
  NOT: [PlanWhereInput!]
  id: IDFilter
  uuid: StringFilter
  planId: IntFilter
  name: StringFilter
  planStatus: BooleanFilter
  scripts: ScriptManyRelationFilter
  provider: ProviderWhereInput
  addons: AddonManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PlanOrderByInput {
  id: OrderDirection
  uuid: OrderDirection
  planId: OrderDirection
  name: OrderDirection
  planStatus: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PlanUpdateInput {
  uuid: String
  planId: Int
  name: String
  planStatus: Boolean
  scripts: ScriptRelateToManyForUpdateInput
  provider: ProviderRelateToOneForUpdateInput
  addons: AddonRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PlanUpdateArgs {
  where: PlanWhereUniqueInput!
  data: PlanUpdateInput!
}

input PlanCreateInput {
  uuid: String
  planId: Int
  name: String
  planStatus: Boolean
  scripts: ScriptRelateToManyForCreateInput
  provider: ProviderRelateToOneForCreateInput
  addons: AddonRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Provider {
  id: ID!
  label: String
  providerId: String
  name: String
  slug: String
  vertical(where: VerticalWhereInput! = {}, orderBy: [VerticalOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VerticalWhereUniqueInput): [Vertical!]
  verticalCount(where: VerticalWhereInput! = {}): Int
  scripts(where: ScriptWhereInput! = {}, orderBy: [ScriptOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScriptWhereUniqueInput): [Script!]
  scriptsCount(where: ScriptWhereInput! = {}): Int
  plans(where: PlanWhereInput! = {}, orderBy: [PlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanWhereUniqueInput): [Plan!]
  plansCount(where: PlanWhereInput! = {}): Int
  logo: Media
  postSubmissionContent: String
  australianCreditLicence: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ProviderWhereUniqueInput {
  id: ID
  providerId: String
  slug: String
}

input ProviderWhereInput {
  AND: [ProviderWhereInput!]
  OR: [ProviderWhereInput!]
  NOT: [ProviderWhereInput!]
  id: IDFilter
  providerId: StringFilter
  name: StringFilter
  slug: StringFilter
  vertical: VerticalManyRelationFilter
  scripts: ScriptManyRelationFilter
  plans: PlanManyRelationFilter
  logo: MediaWhereInput
  postSubmissionContent: StringFilter
  australianCreditLicence: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ProviderOrderByInput {
  id: OrderDirection
  providerId: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  postSubmissionContent: OrderDirection
  australianCreditLicence: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProviderUpdateInput {
  providerId: String
  name: String
  slug: String
  vertical: VerticalRelateToManyForUpdateInput
  scripts: ScriptRelateToManyForUpdateInput
  plans: PlanRelateToManyForUpdateInput
  logo: MediaRelateToOneForUpdateInput
  postSubmissionContent: String
  australianCreditLicence: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ProviderUpdateArgs {
  where: ProviderWhereUniqueInput!
  data: ProviderUpdateInput!
}

input ProviderCreateInput {
  providerId: String
  name: String
  slug: String
  vertical: VerticalRelateToManyForCreateInput
  scripts: ScriptRelateToManyForCreateInput
  plans: PlanRelateToManyForCreateInput
  logo: MediaRelateToOneForCreateInput
  postSubmissionContent: String
  australianCreditLicence: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type ProviderCreditCard {
  id: ID!
  status: Boolean
  slug: String
  providerId: String
  name: String
  logo: Media
  postSubmissionContent: String
  australianCreditLicence: Int
  hasAllAffiliates: Boolean
  affiliate(where: AffiliateWhereInput! = {}, orderBy: [AffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AffiliateWhereUniqueInput): [Affiliate!]
  affiliateCount(where: AffiliateWhereInput! = {}): Int
  includeAllSubAff: Boolean
  subAffiliate(where: SubAffiliateWhereInput! = {}, orderBy: [SubAffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubAffiliateWhereUniqueInput): [SubAffiliate!]
  subAffiliateCount(where: SubAffiliateWhereInput! = {}): Int
  creditCards(where: CreditCardWhereInput! = {}, orderBy: [CreditCardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CreditCardWhereUniqueInput): [CreditCard!]
  creditCardsCount(where: CreditCardWhereInput! = {}): Int
  formContainer(where: CCFormContainerWhereInput! = {}, orderBy: [CCFormContainerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CCFormContainerWhereUniqueInput): [CCFormContainer!]
  formContainerCount(where: CCFormContainerWhereInput! = {}): Int
  uploadGroup(where: CCUploadGroupWhereInput! = {}, orderBy: [CCUploadGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CCUploadGroupWhereUniqueInput): [CCUploadGroup!]
  uploadGroupCount(where: CCUploadGroupWhereInput! = {}): Int
  scripts(where: ScriptWhereInput! = {}, orderBy: [ScriptOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScriptWhereUniqueInput): [Script!]
  scriptsCount(where: ScriptWhereInput! = {}): Int
  clickoutStatus: String
  clickoutParams: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input ProviderCreditCardWhereUniqueInput {
  id: ID
  slug: String
  providerId: String
}

input ProviderCreditCardWhereInput {
  AND: [ProviderCreditCardWhereInput!]
  OR: [ProviderCreditCardWhereInput!]
  NOT: [ProviderCreditCardWhereInput!]
  id: IDFilter
  status: BooleanFilter
  slug: StringFilter
  providerId: StringFilter
  name: StringFilter
  logo: MediaWhereInput
  postSubmissionContent: StringFilter
  australianCreditLicence: IntNullableFilter
  hasAllAffiliates: BooleanFilter
  affiliate: AffiliateManyRelationFilter
  includeAllSubAff: BooleanFilter
  subAffiliate: SubAffiliateManyRelationFilter
  creditCards: CreditCardManyRelationFilter
  formContainer: CCFormContainerManyRelationFilter
  uploadGroup: CCUploadGroupManyRelationFilter
  scripts: ScriptManyRelationFilter
  clickoutStatus: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CCUploadGroupManyRelationFilter {
  every: CCUploadGroupWhereInput
  some: CCUploadGroupWhereInput
  none: CCUploadGroupWhereInput
}

input ProviderCreditCardOrderByInput {
  id: OrderDirection
  status: OrderDirection
  slug: OrderDirection
  providerId: OrderDirection
  name: OrderDirection
  postSubmissionContent: OrderDirection
  australianCreditLicence: OrderDirection
  hasAllAffiliates: OrderDirection
  includeAllSubAff: OrderDirection
  clickoutStatus: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProviderCreditCardUpdateInput {
  status: Boolean
  slug: String
  providerId: String
  name: String
  logo: MediaRelateToOneForUpdateInput
  postSubmissionContent: String
  australianCreditLicence: Int
  hasAllAffiliates: Boolean
  affiliate: AffiliateRelateToManyForUpdateInput
  includeAllSubAff: Boolean
  subAffiliate: SubAffiliateRelateToManyForUpdateInput
  creditCards: CreditCardRelateToManyForUpdateInput
  formContainer: CCFormContainerRelateToManyForUpdateInput
  uploadGroup: CCUploadGroupRelateToManyForUpdateInput
  scripts: ScriptRelateToManyForUpdateInput
  clickoutStatus: String
  clickoutParams: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input CCUploadGroupRelateToManyForUpdateInput {
  disconnect: [CCUploadGroupWhereUniqueInput!]
  set: [CCUploadGroupWhereUniqueInput!]
  create: [CCUploadGroupCreateInput!]
  connect: [CCUploadGroupWhereUniqueInput!]
}

input ProviderCreditCardUpdateArgs {
  where: ProviderCreditCardWhereUniqueInput!
  data: ProviderCreditCardUpdateInput!
}

input ProviderCreditCardCreateInput {
  status: Boolean
  slug: String
  providerId: String
  name: String
  logo: MediaRelateToOneForCreateInput
  postSubmissionContent: String
  australianCreditLicence: Int
  hasAllAffiliates: Boolean
  affiliate: AffiliateRelateToManyForCreateInput
  includeAllSubAff: Boolean
  subAffiliate: SubAffiliateRelateToManyForCreateInput
  creditCards: CreditCardRelateToManyForCreateInput
  formContainer: CCFormContainerRelateToManyForCreateInput
  uploadGroup: CCUploadGroupRelateToManyForCreateInput
  scripts: ScriptRelateToManyForCreateInput
  clickoutStatus: String
  clickoutParams: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input CCUploadGroupRelateToManyForCreateInput {
  create: [CCUploadGroupCreateInput!]
  connect: [CCUploadGroupWhereUniqueInput!]
}

type CreditCard {
  id: ID!
  label: String
  isDiscontinued: Boolean
  name: String
  description: String
  uuid: String
  slug: String
  image: Media
  provider: ProviderCreditCard
  hasAllAffiliates: Boolean
  affiliate(where: AffiliateWhereInput! = {}, orderBy: [AffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AffiliateWhereUniqueInput): [Affiliate!]
  affiliateCount(where: AffiliateWhereInput! = {}): Int
  includeAllSubAff: Boolean
  subAffiliate(where: SubAffiliateWhereInput! = {}, orderBy: [SubAffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubAffiliateWhereUniqueInput): [SubAffiliate!]
  subAffiliateCount(where: SubAffiliateWhereInput! = {}): Int
  details: CardDetail
  fees: CreditCardFee
  rates: Rate
  overseasSpends: OverseasSpend
  eligibility: CCEligibility
  documents: CCDocument
  balanceTransfer: BalanceTransfer
  rewardProgram: RewardProgram
  cardFeatures(where: CardFeatureWhereInput! = {}, orderBy: [CardFeatureOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CardFeatureWhereUniqueInput): [CardFeature!]
  cardFeaturesCount(where: CardFeatureWhereInput! = {}): Int
  earnRates(where: EarnRateWhereInput! = {}, orderBy: [EarnRateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EarnRateWhereUniqueInput): [EarnRate!]
  earnRatesCount(where: EarnRateWhereInput! = {}): Int
  specials(where: SpecialWhereInput! = {}, orderBy: [SpecialOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SpecialWhereUniqueInput): [Special!]
  specialsCount(where: SpecialWhereInput! = {}): Int
  perks(where: CCPerkWhereInput! = {}, orderBy: [CCPerkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CCPerkWhereUniqueInput): [CCPerk!]
  perksCount(where: CCPerkWhereInput! = {}): Int
  uploadGroup(where: CCUploadGroupWhereInput! = {}, orderBy: [CCUploadGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CCUploadGroupWhereUniqueInput): [CCUploadGroup!]
  uploadGroupCount(where: CCUploadGroupWhereInput! = {}): Int
  additionalQuestions(where: AdditionalQuestionWhereInput! = {}, orderBy: [AdditionalQuestionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AdditionalQuestionWhereUniqueInput): [AdditionalQuestion!]
  additionalQuestionsCount(where: AdditionalQuestionWhereInput! = {}): Int
  creditScores(where: CreditScoreWhereInput! = {}, orderBy: [CreditScoreOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CreditScoreWhereUniqueInput): [CreditScore!]
  creditScoresCount(where: CreditScoreWhereInput! = {}): Int
  customConfig(where: CustomAttributeWhereInput! = {}, orderBy: [CustomAttributeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CustomAttributeWhereUniqueInput): [CustomAttribute!]
  customConfigCount(where: CustomAttributeWhereInput! = {}): Int
  clickoutStatus: String
  clickoutParams: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input CreditCardWhereUniqueInput {
  id: ID
  uuid: String
}

input CreditCardWhereInput {
  AND: [CreditCardWhereInput!]
  OR: [CreditCardWhereInput!]
  NOT: [CreditCardWhereInput!]
  id: IDFilter
  isDiscontinued: BooleanFilter
  name: StringFilter
  description: StringFilter
  uuid: StringFilter
  slug: StringFilter
  image: MediaWhereInput
  provider: ProviderCreditCardWhereInput
  hasAllAffiliates: BooleanFilter
  affiliate: AffiliateManyRelationFilter
  includeAllSubAff: BooleanFilter
  subAffiliate: SubAffiliateManyRelationFilter
  details: CardDetailWhereInput
  fees: CreditCardFeeWhereInput
  rates: RateWhereInput
  overseasSpends: OverseasSpendWhereInput
  eligibility: CCEligibilityWhereInput
  documents: CCDocumentWhereInput
  balanceTransfer: BalanceTransferWhereInput
  rewardProgram: RewardProgramWhereInput
  cardFeatures: CardFeatureManyRelationFilter
  earnRates: EarnRateManyRelationFilter
  specials: SpecialManyRelationFilter
  perks: CCPerkManyRelationFilter
  uploadGroup: CCUploadGroupManyRelationFilter
  additionalQuestions: AdditionalQuestionManyRelationFilter
  creditScores: CreditScoreManyRelationFilter
  customConfig: CustomAttributeManyRelationFilter
  clickoutStatus: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CardFeatureManyRelationFilter {
  every: CardFeatureWhereInput
  some: CardFeatureWhereInput
  none: CardFeatureWhereInput
}

input EarnRateManyRelationFilter {
  every: EarnRateWhereInput
  some: EarnRateWhereInput
  none: EarnRateWhereInput
}

input SpecialManyRelationFilter {
  every: SpecialWhereInput
  some: SpecialWhereInput
  none: SpecialWhereInput
}

input CCPerkManyRelationFilter {
  every: CCPerkWhereInput
  some: CCPerkWhereInput
  none: CCPerkWhereInput
}

input AdditionalQuestionManyRelationFilter {
  every: AdditionalQuestionWhereInput
  some: AdditionalQuestionWhereInput
  none: AdditionalQuestionWhereInput
}

input CreditScoreManyRelationFilter {
  every: CreditScoreWhereInput
  some: CreditScoreWhereInput
  none: CreditScoreWhereInput
}

input CustomAttributeManyRelationFilter {
  every: CustomAttributeWhereInput
  some: CustomAttributeWhereInput
  none: CustomAttributeWhereInput
}

input CreditCardOrderByInput {
  id: OrderDirection
  isDiscontinued: OrderDirection
  name: OrderDirection
  description: OrderDirection
  uuid: OrderDirection
  slug: OrderDirection
  hasAllAffiliates: OrderDirection
  includeAllSubAff: OrderDirection
  clickoutStatus: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CreditCardUpdateInput {
  isDiscontinued: Boolean
  name: String
  description: String
  uuid: String
  slug: String
  image: MediaRelateToOneForUpdateInput
  provider: ProviderCreditCardRelateToOneForUpdateInput
  hasAllAffiliates: Boolean
  affiliate: AffiliateRelateToManyForUpdateInput
  includeAllSubAff: Boolean
  subAffiliate: SubAffiliateRelateToManyForUpdateInput
  details: CardDetailRelateToOneForUpdateInput
  fees: CreditCardFeeRelateToOneForUpdateInput
  rates: RateRelateToOneForUpdateInput
  overseasSpends: OverseasSpendRelateToOneForUpdateInput
  eligibility: CCEligibilityRelateToOneForUpdateInput
  documents: CCDocumentRelateToOneForUpdateInput
  balanceTransfer: BalanceTransferRelateToOneForUpdateInput
  rewardProgram: RewardProgramRelateToOneForUpdateInput
  cardFeatures: CardFeatureRelateToManyForUpdateInput
  earnRates: EarnRateRelateToManyForUpdateInput
  specials: SpecialRelateToManyForUpdateInput
  perks: CCPerkRelateToManyForUpdateInput
  uploadGroup: CCUploadGroupRelateToManyForUpdateInput
  additionalQuestions: AdditionalQuestionRelateToManyForUpdateInput
  creditScores: CreditScoreRelateToManyForUpdateInput
  customConfig: CustomAttributeRelateToManyForUpdateInput
  clickoutStatus: String
  clickoutParams: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input ProviderCreditCardRelateToOneForUpdateInput {
  create: ProviderCreditCardCreateInput
  connect: ProviderCreditCardWhereUniqueInput
  disconnect: Boolean
}

input CardDetailRelateToOneForUpdateInput {
  create: CardDetailCreateInput
  connect: CardDetailWhereUniqueInput
  disconnect: Boolean
}

input CreditCardFeeRelateToOneForUpdateInput {
  create: CreditCardFeeCreateInput
  connect: CreditCardFeeWhereUniqueInput
  disconnect: Boolean
}

input RateRelateToOneForUpdateInput {
  create: RateCreateInput
  connect: RateWhereUniqueInput
  disconnect: Boolean
}

input OverseasSpendRelateToOneForUpdateInput {
  create: OverseasSpendCreateInput
  connect: OverseasSpendWhereUniqueInput
  disconnect: Boolean
}

input CCEligibilityRelateToOneForUpdateInput {
  create: CCEligibilityCreateInput
  connect: CCEligibilityWhereUniqueInput
  disconnect: Boolean
}

input CCDocumentRelateToOneForUpdateInput {
  create: CCDocumentCreateInput
  connect: CCDocumentWhereUniqueInput
  disconnect: Boolean
}

input BalanceTransferRelateToOneForUpdateInput {
  create: BalanceTransferCreateInput
  connect: BalanceTransferWhereUniqueInput
  disconnect: Boolean
}

input RewardProgramRelateToOneForUpdateInput {
  create: RewardProgramCreateInput
  connect: RewardProgramWhereUniqueInput
  disconnect: Boolean
}

input CardFeatureRelateToManyForUpdateInput {
  disconnect: [CardFeatureWhereUniqueInput!]
  set: [CardFeatureWhereUniqueInput!]
  create: [CardFeatureCreateInput!]
  connect: [CardFeatureWhereUniqueInput!]
}

input EarnRateRelateToManyForUpdateInput {
  disconnect: [EarnRateWhereUniqueInput!]
  set: [EarnRateWhereUniqueInput!]
  create: [EarnRateCreateInput!]
  connect: [EarnRateWhereUniqueInput!]
}

input SpecialRelateToManyForUpdateInput {
  disconnect: [SpecialWhereUniqueInput!]
  set: [SpecialWhereUniqueInput!]
  create: [SpecialCreateInput!]
  connect: [SpecialWhereUniqueInput!]
}

input CCPerkRelateToManyForUpdateInput {
  disconnect: [CCPerkWhereUniqueInput!]
  set: [CCPerkWhereUniqueInput!]
  create: [CCPerkCreateInput!]
  connect: [CCPerkWhereUniqueInput!]
}

input AdditionalQuestionRelateToManyForUpdateInput {
  disconnect: [AdditionalQuestionWhereUniqueInput!]
  set: [AdditionalQuestionWhereUniqueInput!]
  create: [AdditionalQuestionCreateInput!]
  connect: [AdditionalQuestionWhereUniqueInput!]
}

input CreditScoreRelateToManyForUpdateInput {
  disconnect: [CreditScoreWhereUniqueInput!]
  set: [CreditScoreWhereUniqueInput!]
  create: [CreditScoreCreateInput!]
  connect: [CreditScoreWhereUniqueInput!]
}

input CustomAttributeRelateToManyForUpdateInput {
  disconnect: [CustomAttributeWhereUniqueInput!]
  set: [CustomAttributeWhereUniqueInput!]
  create: [CustomAttributeCreateInput!]
  connect: [CustomAttributeWhereUniqueInput!]
}

input CreditCardUpdateArgs {
  where: CreditCardWhereUniqueInput!
  data: CreditCardUpdateInput!
}

input CreditCardCreateInput {
  isDiscontinued: Boolean
  name: String
  description: String
  uuid: String
  slug: String
  image: MediaRelateToOneForCreateInput
  provider: ProviderCreditCardRelateToOneForCreateInput
  hasAllAffiliates: Boolean
  affiliate: AffiliateRelateToManyForCreateInput
  includeAllSubAff: Boolean
  subAffiliate: SubAffiliateRelateToManyForCreateInput
  details: CardDetailRelateToOneForCreateInput
  fees: CreditCardFeeRelateToOneForCreateInput
  rates: RateRelateToOneForCreateInput
  overseasSpends: OverseasSpendRelateToOneForCreateInput
  eligibility: CCEligibilityRelateToOneForCreateInput
  documents: CCDocumentRelateToOneForCreateInput
  balanceTransfer: BalanceTransferRelateToOneForCreateInput
  rewardProgram: RewardProgramRelateToOneForCreateInput
  cardFeatures: CardFeatureRelateToManyForCreateInput
  earnRates: EarnRateRelateToManyForCreateInput
  specials: SpecialRelateToManyForCreateInput
  perks: CCPerkRelateToManyForCreateInput
  uploadGroup: CCUploadGroupRelateToManyForCreateInput
  additionalQuestions: AdditionalQuestionRelateToManyForCreateInput
  creditScores: CreditScoreRelateToManyForCreateInput
  customConfig: CustomAttributeRelateToManyForCreateInput
  clickoutStatus: String
  clickoutParams: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input ProviderCreditCardRelateToOneForCreateInput {
  create: ProviderCreditCardCreateInput
  connect: ProviderCreditCardWhereUniqueInput
}

input CardDetailRelateToOneForCreateInput {
  create: CardDetailCreateInput
  connect: CardDetailWhereUniqueInput
}

input CreditCardFeeRelateToOneForCreateInput {
  create: CreditCardFeeCreateInput
  connect: CreditCardFeeWhereUniqueInput
}

input RateRelateToOneForCreateInput {
  create: RateCreateInput
  connect: RateWhereUniqueInput
}

input OverseasSpendRelateToOneForCreateInput {
  create: OverseasSpendCreateInput
  connect: OverseasSpendWhereUniqueInput
}

input CCEligibilityRelateToOneForCreateInput {
  create: CCEligibilityCreateInput
  connect: CCEligibilityWhereUniqueInput
}

input CCDocumentRelateToOneForCreateInput {
  create: CCDocumentCreateInput
  connect: CCDocumentWhereUniqueInput
}

input BalanceTransferRelateToOneForCreateInput {
  create: BalanceTransferCreateInput
  connect: BalanceTransferWhereUniqueInput
}

input RewardProgramRelateToOneForCreateInput {
  create: RewardProgramCreateInput
  connect: RewardProgramWhereUniqueInput
}

input CardFeatureRelateToManyForCreateInput {
  create: [CardFeatureCreateInput!]
  connect: [CardFeatureWhereUniqueInput!]
}

input EarnRateRelateToManyForCreateInput {
  create: [EarnRateCreateInput!]
  connect: [EarnRateWhereUniqueInput!]
}

input SpecialRelateToManyForCreateInput {
  create: [SpecialCreateInput!]
  connect: [SpecialWhereUniqueInput!]
}

input CCPerkRelateToManyForCreateInput {
  create: [CCPerkCreateInput!]
  connect: [CCPerkWhereUniqueInput!]
}

input AdditionalQuestionRelateToManyForCreateInput {
  create: [AdditionalQuestionCreateInput!]
  connect: [AdditionalQuestionWhereUniqueInput!]
}

input CreditScoreRelateToManyForCreateInput {
  create: [CreditScoreCreateInput!]
  connect: [CreditScoreWhereUniqueInput!]
}

input CustomAttributeRelateToManyForCreateInput {
  create: [CustomAttributeCreateInput!]
  connect: [CustomAttributeWhereUniqueInput!]
}

type CardDetail {
  id: ID!
  label: String
  creditCard: CreditCard
  cardNetwork: String
  cardLevel: String
  isLowRate: Boolean
  isLowFee: Boolean
  isReward: Boolean
  isStoreCard: Boolean
  quickApproval: Boolean
  hasCashbackOffers: Boolean
  interestFreeDays: Int
  interestFreeDaysDescription: String
  minRepaymentDollars: Decimal
  minRepaymentPercent: Decimal
  minCreditLimit: Int
  maxCreditLimit: Int
  ewalletPaymentOptions: [String!]
  calculationMethodology: String
  bonusPoints: Int
  bonusPointDescription: String
  cashbackDiscounts: String
}

input CardDetailWhereUniqueInput {
  id: ID
}

input CardDetailWhereInput {
  AND: [CardDetailWhereInput!]
  OR: [CardDetailWhereInput!]
  NOT: [CardDetailWhereInput!]
  id: IDFilter
  creditCard: CreditCardWhereInput
  cardNetwork: StringFilter
  cardLevel: StringFilter
  isLowRate: BooleanFilter
  isLowFee: BooleanFilter
  isReward: BooleanFilter
  isStoreCard: BooleanFilter
  quickApproval: BooleanFilter
  hasCashbackOffers: BooleanFilter
  interestFreeDays: IntNullableFilter
  interestFreeDaysDescription: StringFilter
  minRepaymentDollars: DecimalNullableFilter
  minRepaymentPercent: DecimalNullableFilter
  minCreditLimit: IntNullableFilter
  maxCreditLimit: IntNullableFilter
  calculationMethodology: StringFilter
  bonusPoints: IntNullableFilter
  bonusPointDescription: StringFilter
  cashbackDiscounts: StringFilter
}

input DecimalNullableFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalNullableFilter
}

input CardDetailOrderByInput {
  id: OrderDirection
  cardNetwork: OrderDirection
  cardLevel: OrderDirection
  isLowRate: OrderDirection
  isLowFee: OrderDirection
  isReward: OrderDirection
  isStoreCard: OrderDirection
  quickApproval: OrderDirection
  hasCashbackOffers: OrderDirection
  interestFreeDays: OrderDirection
  interestFreeDaysDescription: OrderDirection
  minRepaymentDollars: OrderDirection
  minRepaymentPercent: OrderDirection
  minCreditLimit: OrderDirection
  maxCreditLimit: OrderDirection
  calculationMethodology: OrderDirection
  bonusPoints: OrderDirection
  bonusPointDescription: OrderDirection
  cashbackDiscounts: OrderDirection
}

input CardDetailUpdateInput {
  creditCard: CreditCardRelateToOneForUpdateInput
  cardNetwork: String
  cardLevel: String
  isLowRate: Boolean
  isLowFee: Boolean
  isReward: Boolean
  isStoreCard: Boolean
  quickApproval: Boolean
  hasCashbackOffers: Boolean
  interestFreeDays: Int
  interestFreeDaysDescription: String
  minRepaymentDollars: Decimal
  minRepaymentPercent: Decimal
  minCreditLimit: Int
  maxCreditLimit: Int
  ewalletPaymentOptions: [String!]
  calculationMethodology: String
  bonusPoints: Int
  bonusPointDescription: String
  cashbackDiscounts: String
}

input CreditCardRelateToOneForUpdateInput {
  create: CreditCardCreateInput
  connect: CreditCardWhereUniqueInput
  disconnect: Boolean
}

input CardDetailUpdateArgs {
  where: CardDetailWhereUniqueInput!
  data: CardDetailUpdateInput!
}

input CardDetailCreateInput {
  creditCard: CreditCardRelateToOneForCreateInput
  cardNetwork: String
  cardLevel: String
  isLowRate: Boolean
  isLowFee: Boolean
  isReward: Boolean
  isStoreCard: Boolean
  quickApproval: Boolean
  hasCashbackOffers: Boolean
  interestFreeDays: Int
  interestFreeDaysDescription: String
  minRepaymentDollars: Decimal
  minRepaymentPercent: Decimal
  minCreditLimit: Int
  maxCreditLimit: Int
  ewalletPaymentOptions: [String!]
  calculationMethodology: String
  bonusPoints: Int
  bonusPointDescription: String
  cashbackDiscounts: String
}

input CreditCardRelateToOneForCreateInput {
  create: CreditCardCreateInput
  connect: CreditCardWhereUniqueInput
}

type CardFeature {
  id: ID!
  label: String
  name: String
  creditCard: CreditCard
  description: String
}

input CardFeatureWhereUniqueInput {
  id: ID
}

input CardFeatureWhereInput {
  AND: [CardFeatureWhereInput!]
  OR: [CardFeatureWhereInput!]
  NOT: [CardFeatureWhereInput!]
  id: IDFilter
  name: StringFilter
  creditCard: CreditCardWhereInput
  description: StringFilter
}

input CardFeatureOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input CardFeatureUpdateInput {
  name: String
  creditCard: CreditCardRelateToOneForUpdateInput
  description: String
}

input CardFeatureUpdateArgs {
  where: CardFeatureWhereUniqueInput!
  data: CardFeatureUpdateInput!
}

input CardFeatureCreateInput {
  name: String
  creditCard: CreditCardRelateToOneForCreateInput
  description: String
}

type Rate {
  id: ID!
  label: String
  creditCard: CreditCard
  cashAdvRateIntro: Decimal
  cashAdvRateIntroTerm: Int
  cashAdvRateStandard: Decimal
  purchaseRateIntro: Decimal
  purchaseRateIntroTerm: Int
  purchaseRateStandard: Decimal
}

input RateWhereUniqueInput {
  id: ID
}

input RateWhereInput {
  AND: [RateWhereInput!]
  OR: [RateWhereInput!]
  NOT: [RateWhereInput!]
  id: IDFilter
  creditCard: CreditCardWhereInput
  cashAdvRateIntro: DecimalNullableFilter
  cashAdvRateIntroTerm: IntNullableFilter
  cashAdvRateStandard: DecimalNullableFilter
  purchaseRateIntro: DecimalNullableFilter
  purchaseRateIntroTerm: IntNullableFilter
  purchaseRateStandard: DecimalNullableFilter
}

input RateOrderByInput {
  id: OrderDirection
  cashAdvRateIntro: OrderDirection
  cashAdvRateIntroTerm: OrderDirection
  cashAdvRateStandard: OrderDirection
  purchaseRateIntro: OrderDirection
  purchaseRateIntroTerm: OrderDirection
  purchaseRateStandard: OrderDirection
}

input RateUpdateInput {
  creditCard: CreditCardRelateToOneForUpdateInput
  cashAdvRateIntro: Decimal
  cashAdvRateIntroTerm: Int
  cashAdvRateStandard: Decimal
  purchaseRateIntro: Decimal
  purchaseRateIntroTerm: Int
  purchaseRateStandard: Decimal
}

input RateUpdateArgs {
  where: RateWhereUniqueInput!
  data: RateUpdateInput!
}

input RateCreateInput {
  creditCard: CreditCardRelateToOneForCreateInput
  cashAdvRateIntro: Decimal
  cashAdvRateIntroTerm: Int
  cashAdvRateStandard: Decimal
  purchaseRateIntro: Decimal
  purchaseRateIntroTerm: Int
  purchaseRateStandard: Decimal
}

type CreditCardFee {
  id: ID!
  label: String
  creditCard: CreditCard
  annualFeeIntro: Decimal
  annualFeeIntroTerm: Int
  annualFeeStandard: Decimal
  annualFeeSpendWaiver: Decimal
  annualFeeSpendWaiverTerm: Int
  annualFeeOtherWaiver: String
  cashAdvanceMinFee: Decimal
  cashAdvanceMaxFee: Decimal
  cashAdvancePercent: Decimal
  atmFeeStandard: Decimal
  latePaymentFee: Decimal
  additionalCardHolders: Int
  additionalCardHoldersFee: Decimal
  crossBorderFee: Decimal
  crossBorderFeePercent: Decimal
  overLimitFee: Decimal
  duplicateStatementFee: Decimal
  dishonourFee: Decimal
  paperStatementFee: Decimal
  informationRequestFee: Decimal
  voucherRequestFee: Decimal
  overTheCounterTransactionFee: Decimal
}

input CreditCardFeeWhereUniqueInput {
  id: ID
}

input CreditCardFeeWhereInput {
  AND: [CreditCardFeeWhereInput!]
  OR: [CreditCardFeeWhereInput!]
  NOT: [CreditCardFeeWhereInput!]
  id: IDFilter
  creditCard: CreditCardWhereInput
  annualFeeIntro: DecimalNullableFilter
  annualFeeIntroTerm: IntNullableFilter
  annualFeeStandard: DecimalNullableFilter
  annualFeeSpendWaiver: DecimalNullableFilter
  annualFeeSpendWaiverTerm: IntNullableFilter
  annualFeeOtherWaiver: StringFilter
  cashAdvanceMinFee: DecimalNullableFilter
  cashAdvanceMaxFee: DecimalNullableFilter
  cashAdvancePercent: DecimalNullableFilter
  atmFeeStandard: DecimalNullableFilter
  latePaymentFee: DecimalNullableFilter
  additionalCardHolders: IntNullableFilter
  additionalCardHoldersFee: DecimalNullableFilter
  crossBorderFee: DecimalNullableFilter
  crossBorderFeePercent: DecimalNullableFilter
  overLimitFee: DecimalNullableFilter
  duplicateStatementFee: DecimalNullableFilter
  dishonourFee: DecimalNullableFilter
  paperStatementFee: DecimalNullableFilter
  informationRequestFee: DecimalNullableFilter
  voucherRequestFee: DecimalNullableFilter
  overTheCounterTransactionFee: DecimalNullableFilter
}

input CreditCardFeeOrderByInput {
  id: OrderDirection
  annualFeeIntro: OrderDirection
  annualFeeIntroTerm: OrderDirection
  annualFeeStandard: OrderDirection
  annualFeeSpendWaiver: OrderDirection
  annualFeeSpendWaiverTerm: OrderDirection
  annualFeeOtherWaiver: OrderDirection
  cashAdvanceMinFee: OrderDirection
  cashAdvanceMaxFee: OrderDirection
  cashAdvancePercent: OrderDirection
  atmFeeStandard: OrderDirection
  latePaymentFee: OrderDirection
  additionalCardHolders: OrderDirection
  additionalCardHoldersFee: OrderDirection
  crossBorderFee: OrderDirection
  crossBorderFeePercent: OrderDirection
  overLimitFee: OrderDirection
  duplicateStatementFee: OrderDirection
  dishonourFee: OrderDirection
  paperStatementFee: OrderDirection
  informationRequestFee: OrderDirection
  voucherRequestFee: OrderDirection
  overTheCounterTransactionFee: OrderDirection
}

input CreditCardFeeUpdateInput {
  creditCard: CreditCardRelateToOneForUpdateInput
  annualFeeIntro: Decimal
  annualFeeIntroTerm: Int
  annualFeeStandard: Decimal
  annualFeeSpendWaiver: Decimal
  annualFeeSpendWaiverTerm: Int
  annualFeeOtherWaiver: String
  cashAdvanceMinFee: Decimal
  cashAdvanceMaxFee: Decimal
  cashAdvancePercent: Decimal
  atmFeeStandard: Decimal
  latePaymentFee: Decimal
  additionalCardHolders: Int
  additionalCardHoldersFee: Decimal
  crossBorderFee: Decimal
  crossBorderFeePercent: Decimal
  overLimitFee: Decimal
  duplicateStatementFee: Decimal
  dishonourFee: Decimal
  paperStatementFee: Decimal
  informationRequestFee: Decimal
  voucherRequestFee: Decimal
  overTheCounterTransactionFee: Decimal
}

input CreditCardFeeUpdateArgs {
  where: CreditCardFeeWhereUniqueInput!
  data: CreditCardFeeUpdateInput!
}

input CreditCardFeeCreateInput {
  creditCard: CreditCardRelateToOneForCreateInput
  annualFeeIntro: Decimal
  annualFeeIntroTerm: Int
  annualFeeStandard: Decimal
  annualFeeSpendWaiver: Decimal
  annualFeeSpendWaiverTerm: Int
  annualFeeOtherWaiver: String
  cashAdvanceMinFee: Decimal
  cashAdvanceMaxFee: Decimal
  cashAdvancePercent: Decimal
  atmFeeStandard: Decimal
  latePaymentFee: Decimal
  additionalCardHolders: Int
  additionalCardHoldersFee: Decimal
  crossBorderFee: Decimal
  crossBorderFeePercent: Decimal
  overLimitFee: Decimal
  duplicateStatementFee: Decimal
  dishonourFee: Decimal
  paperStatementFee: Decimal
  informationRequestFee: Decimal
  voucherRequestFee: Decimal
  overTheCounterTransactionFee: Decimal
}

type CCFormContainer {
  id: ID!
  label: String
  provider(where: ProviderCreditCardWhereInput! = {}, orderBy: [ProviderCreditCardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProviderCreditCardWhereUniqueInput): [ProviderCreditCard!]
  providerCount(where: ProviderCreditCardWhereInput! = {}): Int
  isDefault: Boolean
  v2: Boolean
  hasAllAffiliates: Boolean
  affiliate(where: AffiliateWhereInput! = {}, orderBy: [AffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AffiliateWhereUniqueInput): [Affiliate!]
  affiliateCount(where: AffiliateWhereInput! = {}): Int
  includeAllSubAff: Boolean
  subAffiliate(where: SubAffiliateWhereInput! = {}, orderBy: [SubAffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubAffiliateWhereUniqueInput): [SubAffiliate!]
  subAffiliateCount(where: SubAffiliateWhereInput! = {}): Int
  page: String
  formComponents(where: FormComponentWhereInput! = {}, orderBy: [FormComponentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormComponentWhereUniqueInput): [FormComponent!]
  formComponentsCount(where: FormComponentWhereInput! = {}): Int
  formOrder: JSON
  defaultProps: JSON
  staticData: JSON
  scripts(where: ScriptWhereInput! = {}, orderBy: [ScriptOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScriptWhereUniqueInput): [Script!]
  scriptsCount(where: ScriptWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input CCFormContainerWhereUniqueInput {
  id: ID
}

input CCFormContainerWhereInput {
  AND: [CCFormContainerWhereInput!]
  OR: [CCFormContainerWhereInput!]
  NOT: [CCFormContainerWhereInput!]
  id: IDFilter
  label: StringFilter
  provider: ProviderCreditCardManyRelationFilter
  isDefault: BooleanFilter
  v2: BooleanFilter
  hasAllAffiliates: BooleanFilter
  affiliate: AffiliateManyRelationFilter
  includeAllSubAff: BooleanFilter
  subAffiliate: SubAffiliateManyRelationFilter
  page: StringFilter
  formComponents: FormComponentManyRelationFilter
  scripts: ScriptManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CCFormContainerOrderByInput {
  id: OrderDirection
  label: OrderDirection
  isDefault: OrderDirection
  v2: OrderDirection
  hasAllAffiliates: OrderDirection
  includeAllSubAff: OrderDirection
  page: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CCFormContainerUpdateInput {
  label: String
  provider: ProviderCreditCardRelateToManyForUpdateInput
  isDefault: Boolean
  v2: Boolean
  hasAllAffiliates: Boolean
  affiliate: AffiliateRelateToManyForUpdateInput
  includeAllSubAff: Boolean
  subAffiliate: SubAffiliateRelateToManyForUpdateInput
  page: String
  formComponents: FormComponentRelateToManyForUpdateInput
  formOrder: JSON
  defaultProps: JSON
  staticData: JSON
  scripts: ScriptRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CCFormContainerUpdateArgs {
  where: CCFormContainerWhereUniqueInput!
  data: CCFormContainerUpdateInput!
}

input CCFormContainerCreateInput {
  label: String
  provider: ProviderCreditCardRelateToManyForCreateInput
  isDefault: Boolean
  v2: Boolean
  hasAllAffiliates: Boolean
  affiliate: AffiliateRelateToManyForCreateInput
  includeAllSubAff: Boolean
  subAffiliate: SubAffiliateRelateToManyForCreateInput
  page: String
  formComponents: FormComponentRelateToManyForCreateInput
  formOrder: JSON
  defaultProps: JSON
  staticData: JSON
  scripts: ScriptRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type CCPerk {
  id: ID!
  label: String
  name: String
  type: [String!]
  value: Int
  assumptions: String
  conditions: String
  days: Int
  daysConditions: String
  creditCard: CreditCard
}

input CCPerkWhereUniqueInput {
  id: ID
}

input CCPerkWhereInput {
  AND: [CCPerkWhereInput!]
  OR: [CCPerkWhereInput!]
  NOT: [CCPerkWhereInput!]
  id: IDFilter
  name: StringFilter
  value: IntNullableFilter
  assumptions: StringFilter
  conditions: StringFilter
  days: IntNullableFilter
  daysConditions: StringFilter
  creditCard: CreditCardWhereInput
}

input CCPerkOrderByInput {
  id: OrderDirection
  name: OrderDirection
  value: OrderDirection
  assumptions: OrderDirection
  conditions: OrderDirection
  days: OrderDirection
  daysConditions: OrderDirection
}

input CCPerkUpdateInput {
  name: String
  type: [String!]
  value: Int
  assumptions: String
  conditions: String
  days: Int
  daysConditions: String
  creditCard: CreditCardRelateToOneForUpdateInput
}

input CCPerkUpdateArgs {
  where: CCPerkWhereUniqueInput!
  data: CCPerkUpdateInput!
}

input CCPerkCreateInput {
  name: String
  type: [String!]
  value: Int
  assumptions: String
  conditions: String
  days: Int
  daysConditions: String
  creditCard: CreditCardRelateToOneForCreateInput
}

type RewardProgram {
  id: ID!
  creditCard: CreditCard
  name: String
  isReward: Boolean
  isFrequentFlyer: Boolean
  icon: Media
  rewards(where: RewardWhereInput! = {}, orderBy: [RewardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RewardWhereUniqueInput): [Reward!]
  rewardsCount(where: RewardWhereInput! = {}): Int
  pointsCondition: String
  rewardProgramFee: Decimal
  rewardPointsExpiry: String
}

input RewardProgramWhereUniqueInput {
  id: ID
}

input RewardProgramWhereInput {
  AND: [RewardProgramWhereInput!]
  OR: [RewardProgramWhereInput!]
  NOT: [RewardProgramWhereInput!]
  id: IDFilter
  creditCard: CreditCardWhereInput
  name: StringFilter
  isReward: BooleanFilter
  isFrequentFlyer: BooleanFilter
  icon: MediaWhereInput
  rewards: RewardManyRelationFilter
  pointsCondition: StringFilter
  rewardProgramFee: DecimalNullableFilter
  rewardPointsExpiry: StringFilter
}

input RewardManyRelationFilter {
  every: RewardWhereInput
  some: RewardWhereInput
  none: RewardWhereInput
}

input RewardProgramOrderByInput {
  id: OrderDirection
  name: OrderDirection
  isReward: OrderDirection
  isFrequentFlyer: OrderDirection
  pointsCondition: OrderDirection
  rewardProgramFee: OrderDirection
  rewardPointsExpiry: OrderDirection
}

input RewardProgramUpdateInput {
  creditCard: CreditCardRelateToOneForUpdateInput
  name: String
  isReward: Boolean
  isFrequentFlyer: Boolean
  icon: MediaRelateToOneForUpdateInput
  rewards: RewardRelateToManyForUpdateInput
  pointsCondition: String
  rewardProgramFee: Decimal
  rewardPointsExpiry: String
}

input RewardRelateToManyForUpdateInput {
  disconnect: [RewardWhereUniqueInput!]
  set: [RewardWhereUniqueInput!]
  create: [RewardCreateInput!]
  connect: [RewardWhereUniqueInput!]
}

input RewardProgramUpdateArgs {
  where: RewardProgramWhereUniqueInput!
  data: RewardProgramUpdateInput!
}

input RewardProgramCreateInput {
  creditCard: CreditCardRelateToOneForCreateInput
  name: String
  isReward: Boolean
  isFrequentFlyer: Boolean
  icon: MediaRelateToOneForCreateInput
  rewards: RewardRelateToManyForCreateInput
  pointsCondition: String
  rewardProgramFee: Decimal
  rewardPointsExpiry: String
}

input RewardRelateToManyForCreateInput {
  create: [RewardCreateInput!]
  connect: [RewardWhereUniqueInput!]
}

type CCDocument {
  id: ID!
  label: String
  creditCard: CreditCard
  keyFactSheet: Media
  targetMarketDetermination: Media
  document(where: MediaWhereInput! = {}, orderBy: [MediaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MediaWhereUniqueInput): [Media!]
  documentCount(where: MediaWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input CCDocumentWhereUniqueInput {
  id: ID
}

input CCDocumentWhereInput {
  AND: [CCDocumentWhereInput!]
  OR: [CCDocumentWhereInput!]
  NOT: [CCDocumentWhereInput!]
  id: IDFilter
  creditCard: CreditCardWhereInput
  keyFactSheet: MediaWhereInput
  targetMarketDetermination: MediaWhereInput
  document: MediaManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input MediaManyRelationFilter {
  every: MediaWhereInput
  some: MediaWhereInput
  none: MediaWhereInput
}

input CCDocumentOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CCDocumentUpdateInput {
  creditCard: CreditCardRelateToOneForUpdateInput
  keyFactSheet: MediaRelateToOneForUpdateInput
  targetMarketDetermination: MediaRelateToOneForUpdateInput
  document: MediaRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input MediaRelateToManyForUpdateInput {
  disconnect: [MediaWhereUniqueInput!]
  set: [MediaWhereUniqueInput!]
  create: [MediaCreateInput!]
  connect: [MediaWhereUniqueInput!]
}

input CCDocumentUpdateArgs {
  where: CCDocumentWhereUniqueInput!
  data: CCDocumentUpdateInput!
}

input CCDocumentCreateInput {
  creditCard: CreditCardRelateToOneForCreateInput
  keyFactSheet: MediaRelateToOneForCreateInput
  targetMarketDetermination: MediaRelateToOneForCreateInput
  document: MediaRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input MediaRelateToManyForCreateInput {
  create: [MediaCreateInput!]
  connect: [MediaWhereUniqueInput!]
}

type BalanceTransfer {
  id: ID!
  label: String
  creditCard: CreditCard
  btIntro: Decimal
  btIntroTerm: Int
  btRateStandard: Decimal
  btConditions: String
  minBTAmount: Decimal
  maxBTAmount: Decimal
  btRevertRate: Decimal
  isBTFromPersonalLoanAllowed: Boolean
  btFeeDollars: Decimal
  btFeePercent: Decimal
  btNotAllowedFromBanks: [BalanceTransferBtNotAllowedFromBankType!]
}

enum BalanceTransferBtNotAllowedFromBankType {
  citi
  westpac
}

input BalanceTransferWhereUniqueInput {
  id: ID
}

input BalanceTransferWhereInput {
  AND: [BalanceTransferWhereInput!]
  OR: [BalanceTransferWhereInput!]
  NOT: [BalanceTransferWhereInput!]
  id: IDFilter
  creditCard: CreditCardWhereInput
  btIntro: DecimalNullableFilter
  btIntroTerm: IntNullableFilter
  btRateStandard: DecimalNullableFilter
  btConditions: StringFilter
  minBTAmount: DecimalNullableFilter
  maxBTAmount: DecimalNullableFilter
  btRevertRate: DecimalNullableFilter
  isBTFromPersonalLoanAllowed: BooleanFilter
  btFeeDollars: DecimalNullableFilter
  btFeePercent: DecimalNullableFilter
}

input BalanceTransferOrderByInput {
  id: OrderDirection
  btIntro: OrderDirection
  btIntroTerm: OrderDirection
  btRateStandard: OrderDirection
  btConditions: OrderDirection
  minBTAmount: OrderDirection
  maxBTAmount: OrderDirection
  btRevertRate: OrderDirection
  isBTFromPersonalLoanAllowed: OrderDirection
  btFeeDollars: OrderDirection
  btFeePercent: OrderDirection
}

input BalanceTransferUpdateInput {
  creditCard: CreditCardRelateToOneForUpdateInput
  btIntro: Decimal
  btIntroTerm: Int
  btRateStandard: Decimal
  btConditions: String
  minBTAmount: Decimal
  maxBTAmount: Decimal
  btRevertRate: Decimal
  isBTFromPersonalLoanAllowed: Boolean
  btFeeDollars: Decimal
  btFeePercent: Decimal
  btNotAllowedFromBanks: [BalanceTransferBtNotAllowedFromBankType!]
}

input BalanceTransferUpdateArgs {
  where: BalanceTransferWhereUniqueInput!
  data: BalanceTransferUpdateInput!
}

input BalanceTransferCreateInput {
  creditCard: CreditCardRelateToOneForCreateInput
  btIntro: Decimal
  btIntroTerm: Int
  btRateStandard: Decimal
  btConditions: String
  minBTAmount: Decimal
  maxBTAmount: Decimal
  btRevertRate: Decimal
  isBTFromPersonalLoanAllowed: Boolean
  btFeeDollars: Decimal
  btFeePercent: Decimal
  btNotAllowedFromBanks: [BalanceTransferBtNotAllowedFromBankType!]
}

type EarnRate {
  id: ID!
  label: String
  creditCard: CreditCard
  isGenericEarnRate: Boolean
  isUncappedEarnRate: Boolean
  pointsEarned: Decimal
  spendAt: String
  rangeMinimum: Int
  rangeMax: Int
  rangeUnit: EarnRateRangeUnitType
  rangePeriod: EarnRateRangePeriodType
}

enum EarnRateRangeUnitType {
  points
  dollars
}

enum EarnRateRangePeriodType {
  monthly
  annually
}

input EarnRateWhereUniqueInput {
  id: ID
}

input EarnRateWhereInput {
  AND: [EarnRateWhereInput!]
  OR: [EarnRateWhereInput!]
  NOT: [EarnRateWhereInput!]
  id: IDFilter
  creditCard: CreditCardWhereInput
  isGenericEarnRate: BooleanFilter
  isUncappedEarnRate: BooleanFilter
  pointsEarned: DecimalFilter
  spendAt: StringFilter
  rangeMinimum: IntNullableFilter
  rangeMax: IntNullableFilter
  rangeUnit: EarnRateRangeUnitTypeNullableFilter
  rangePeriod: EarnRateRangePeriodTypeNullableFilter
}

input EarnRateRangeUnitTypeNullableFilter {
  equals: EarnRateRangeUnitType
  in: [EarnRateRangeUnitType!]
  notIn: [EarnRateRangeUnitType!]
  not: EarnRateRangeUnitTypeNullableFilter
}

input EarnRateRangePeriodTypeNullableFilter {
  equals: EarnRateRangePeriodType
  in: [EarnRateRangePeriodType!]
  notIn: [EarnRateRangePeriodType!]
  not: EarnRateRangePeriodTypeNullableFilter
}

input EarnRateOrderByInput {
  id: OrderDirection
  isGenericEarnRate: OrderDirection
  isUncappedEarnRate: OrderDirection
  pointsEarned: OrderDirection
  spendAt: OrderDirection
  rangeMinimum: OrderDirection
  rangeMax: OrderDirection
  rangeUnit: OrderDirection
  rangePeriod: OrderDirection
}

input EarnRateUpdateInput {
  creditCard: CreditCardRelateToOneForUpdateInput
  isGenericEarnRate: Boolean
  isUncappedEarnRate: Boolean
  pointsEarned: Decimal
  spendAt: String
  rangeMinimum: Int
  rangeMax: Int
  rangeUnit: EarnRateRangeUnitType
  rangePeriod: EarnRateRangePeriodType
}

input EarnRateUpdateArgs {
  where: EarnRateWhereUniqueInput!
  data: EarnRateUpdateInput!
}

input EarnRateCreateInput {
  creditCard: CreditCardRelateToOneForCreateInput
  isGenericEarnRate: Boolean
  isUncappedEarnRate: Boolean
  pointsEarned: Decimal
  spendAt: String
  rangeMinimum: Int
  rangeMax: Int
  rangeUnit: EarnRateRangeUnitType
  rangePeriod: EarnRateRangePeriodType
}

type OverseasSpend {
  id: ID!
  label: String
  creditCard: CreditCard
  foreignExchangeFeeStandard: Decimal
  overseascashAdvancerate: Decimal
  cashAdvanceFeeInternational: Decimal
  cashAdvanceFeeInternationalPercent: Decimal
  fxATMFeeDollar: Decimal
  fxATMFeePercent: Decimal
  overseasReplaceCardFee: Decimal
}

input OverseasSpendWhereUniqueInput {
  id: ID
}

input OverseasSpendWhereInput {
  AND: [OverseasSpendWhereInput!]
  OR: [OverseasSpendWhereInput!]
  NOT: [OverseasSpendWhereInput!]
  id: IDFilter
  creditCard: CreditCardWhereInput
  foreignExchangeFeeStandard: DecimalNullableFilter
  overseascashAdvancerate: DecimalNullableFilter
  cashAdvanceFeeInternational: DecimalNullableFilter
  cashAdvanceFeeInternationalPercent: DecimalNullableFilter
  fxATMFeeDollar: DecimalNullableFilter
  fxATMFeePercent: DecimalNullableFilter
  overseasReplaceCardFee: DecimalNullableFilter
}

input OverseasSpendOrderByInput {
  id: OrderDirection
  foreignExchangeFeeStandard: OrderDirection
  overseascashAdvancerate: OrderDirection
  cashAdvanceFeeInternational: OrderDirection
  cashAdvanceFeeInternationalPercent: OrderDirection
  fxATMFeeDollar: OrderDirection
  fxATMFeePercent: OrderDirection
  overseasReplaceCardFee: OrderDirection
}

input OverseasSpendUpdateInput {
  creditCard: CreditCardRelateToOneForUpdateInput
  foreignExchangeFeeStandard: Decimal
  overseascashAdvancerate: Decimal
  cashAdvanceFeeInternational: Decimal
  cashAdvanceFeeInternationalPercent: Decimal
  fxATMFeeDollar: Decimal
  fxATMFeePercent: Decimal
  overseasReplaceCardFee: Decimal
}

input OverseasSpendUpdateArgs {
  where: OverseasSpendWhereUniqueInput!
  data: OverseasSpendUpdateInput!
}

input OverseasSpendCreateInput {
  creditCard: CreditCardRelateToOneForCreateInput
  foreignExchangeFeeStandard: Decimal
  overseascashAdvancerate: Decimal
  cashAdvanceFeeInternational: Decimal
  cashAdvanceFeeInternationalPercent: Decimal
  fxATMFeeDollar: Decimal
  fxATMFeePercent: Decimal
  overseasReplaceCardFee: Decimal
}

type CCEligibility {
  id: ID!
  label: String
  creditCard: CreditCard
  minAge: Int
  minIncome: Int
  eligibilityCondition: String
  residency: [String!]
  visaValidity: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input CCEligibilityWhereUniqueInput {
  id: ID
}

input CCEligibilityWhereInput {
  AND: [CCEligibilityWhereInput!]
  OR: [CCEligibilityWhereInput!]
  NOT: [CCEligibilityWhereInput!]
  id: IDFilter
  creditCard: CreditCardWhereInput
  minAge: IntNullableFilter
  minIncome: IntNullableFilter
  eligibilityCondition: StringFilter
  visaValidity: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CCEligibilityOrderByInput {
  id: OrderDirection
  minAge: OrderDirection
  minIncome: OrderDirection
  eligibilityCondition: OrderDirection
  visaValidity: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CCEligibilityUpdateInput {
  creditCard: CreditCardRelateToOneForUpdateInput
  minAge: Int
  minIncome: Int
  eligibilityCondition: String
  residency: [String!]
  visaValidity: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input CCEligibilityUpdateArgs {
  where: CCEligibilityWhereUniqueInput!
  data: CCEligibilityUpdateInput!
}

input CCEligibilityCreateInput {
  creditCard: CreditCardRelateToOneForCreateInput
  minAge: Int
  minIncome: Int
  eligibilityCondition: String
  residency: [String!]
  visaValidity: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type Special {
  id: ID!
  label: String
  creditCard: CreditCard
  name: String
  type: [String!]
  offerType: String
  introText: String
  blurb: String
  startDate: DateTime
  endDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SpecialWhereUniqueInput {
  id: ID
}

input SpecialWhereInput {
  AND: [SpecialWhereInput!]
  OR: [SpecialWhereInput!]
  NOT: [SpecialWhereInput!]
  id: IDFilter
  creditCard: CreditCardWhereInput
  name: StringFilter
  offerType: StringFilter
  introText: StringFilter
  blurb: StringFilter
  startDate: DateTimeFilter
  endDate: DateTimeNullableFilter
  url: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SpecialOrderByInput {
  id: OrderDirection
  name: OrderDirection
  offerType: OrderDirection
  introText: OrderDirection
  blurb: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  url: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SpecialUpdateInput {
  creditCard: CreditCardRelateToOneForUpdateInput
  name: String
  type: [String!]
  offerType: String
  introText: String
  blurb: String
  startDate: DateTime
  endDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SpecialUpdateArgs {
  where: SpecialWhereUniqueInput!
  data: SpecialUpdateInput!
}

input SpecialCreateInput {
  creditCard: CreditCardRelateToOneForCreateInput
  name: String
  type: [String!]
  offerType: String
  introText: String
  blurb: String
  startDate: DateTime
  endDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Reward {
  id: ID!
  name: String
  slug: String
}

input RewardWhereUniqueInput {
  id: ID
  name: String
}

input RewardWhereInput {
  AND: [RewardWhereInput!]
  OR: [RewardWhereInput!]
  NOT: [RewardWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
}

input RewardOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input RewardUpdateInput {
  name: String
  slug: String
}

input RewardUpdateArgs {
  where: RewardWhereUniqueInput!
  data: RewardUpdateInput!
}

input RewardCreateInput {
  name: String
  slug: String
}

type AdditionalQuestion {
  id: ID!
  name: String
  creditCard(where: CreditCardWhereInput! = {}, orderBy: [CreditCardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CreditCardWhereUniqueInput): [CreditCard!]
  creditCardCount(where: CreditCardWhereInput! = {}): Int
  tooltip: String
  infoText: String
  infoPosition: String
}

input AdditionalQuestionWhereUniqueInput {
  id: ID
}

input AdditionalQuestionWhereInput {
  AND: [AdditionalQuestionWhereInput!]
  OR: [AdditionalQuestionWhereInput!]
  NOT: [AdditionalQuestionWhereInput!]
  id: IDFilter
  name: StringFilter
  creditCard: CreditCardManyRelationFilter
  tooltip: StringFilter
  infoText: StringFilter
  infoPosition: StringNullableFilter
}

input AdditionalQuestionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  tooltip: OrderDirection
  infoText: OrderDirection
  infoPosition: OrderDirection
}

input AdditionalQuestionUpdateInput {
  name: String
  creditCard: CreditCardRelateToManyForUpdateInput
  tooltip: String
  infoText: String
  infoPosition: String
}

input AdditionalQuestionUpdateArgs {
  where: AdditionalQuestionWhereUniqueInput!
  data: AdditionalQuestionUpdateInput!
}

input AdditionalQuestionCreateInput {
  name: String
  creditCard: CreditCardRelateToManyForCreateInput
  tooltip: String
  infoText: String
  infoPosition: String
}

type CCUploadGroup {
  id: ID!
  label: String
  key: String
  categories(where: UploadCategoryWhereInput! = {}, orderBy: [UploadCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UploadCategoryWhereUniqueInput): [UploadCategory!]
  categoriesCount(where: UploadCategoryWhereInput! = {}): Int
  order: Int
  provider(where: ProviderCreditCardWhereInput! = {}, orderBy: [ProviderCreditCardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProviderCreditCardWhereUniqueInput): [ProviderCreditCard!]
  providerCount(where: ProviderCreditCardWhereInput! = {}): Int
  creditCard(where: CreditCardWhereInput! = {}, orderBy: [CreditCardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CreditCardWhereUniqueInput): [CreditCard!]
  creditCardCount(where: CreditCardWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input CCUploadGroupWhereUniqueInput {
  id: ID
}

input CCUploadGroupWhereInput {
  AND: [CCUploadGroupWhereInput!]
  OR: [CCUploadGroupWhereInput!]
  NOT: [CCUploadGroupWhereInput!]
  id: IDFilter
  label: StringFilter
  categories: UploadCategoryManyRelationFilter
  order: IntNullableFilter
  provider: ProviderCreditCardManyRelationFilter
  creditCard: CreditCardManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input UploadCategoryManyRelationFilter {
  every: UploadCategoryWhereInput
  some: UploadCategoryWhereInput
  none: UploadCategoryWhereInput
}

input CCUploadGroupOrderByInput {
  id: OrderDirection
  label: OrderDirection
  key: OrderDirection
  order: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CCUploadGroupUpdateInput {
  label: String
  key: String
  categories: UploadCategoryRelateToManyForUpdateInput
  order: Int
  provider: ProviderCreditCardRelateToManyForUpdateInput
  creditCard: CreditCardRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UploadCategoryRelateToManyForUpdateInput {
  disconnect: [UploadCategoryWhereUniqueInput!]
  set: [UploadCategoryWhereUniqueInput!]
  create: [UploadCategoryCreateInput!]
  connect: [UploadCategoryWhereUniqueInput!]
}

input CCUploadGroupUpdateArgs {
  where: CCUploadGroupWhereUniqueInput!
  data: CCUploadGroupUpdateInput!
}

input CCUploadGroupCreateInput {
  label: String
  key: String
  categories: UploadCategoryRelateToManyForCreateInput
  order: Int
  provider: ProviderCreditCardRelateToManyForCreateInput
  creditCard: CreditCardRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UploadCategoryRelateToManyForCreateInput {
  create: [UploadCategoryCreateInput!]
  connect: [UploadCategoryWhereUniqueInput!]
}

type Mirn {
  id: ID!
  fileName: String
  status: Boolean
  createdAt: DateTime
}

input MirnWhereUniqueInput {
  id: ID
  fileName: String
}

input MirnWhereInput {
  AND: [MirnWhereInput!]
  OR: [MirnWhereInput!]
  NOT: [MirnWhereInput!]
  id: IDFilter
  fileName: StringFilter
  status: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input MirnOrderByInput {
  id: OrderDirection
  fileName: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
}

input MirnUpdateInput {
  fileName: String
  status: Boolean
  createdAt: DateTime
}

input MirnUpdateArgs {
  where: MirnWhereUniqueInput!
  data: MirnUpdateInput!
}

input MirnCreateInput {
  fileName: String
  status: Boolean
  createdAt: DateTime
}

type TariffCode {
  id: ID!
  serialNo: String
  distributor: String
  provider: String
  propertyType: String
  states: String
  tariffCode: String
  tariffType: String
  vertical: String
}

input TariffCodeWhereUniqueInput {
  id: ID
  tariffCode: String
}

input TariffCodeWhereInput {
  AND: [TariffCodeWhereInput!]
  OR: [TariffCodeWhereInput!]
  NOT: [TariffCodeWhereInput!]
  id: IDFilter
  serialNo: StringFilter
  distributor: StringFilter
  provider: StringFilter
  propertyType: StringFilter
  states: StringFilter
  tariffCode: StringFilter
  tariffType: StringFilter
  vertical: StringFilter
}

input TariffCodeOrderByInput {
  id: OrderDirection
  serialNo: OrderDirection
  distributor: OrderDirection
  provider: OrderDirection
  propertyType: OrderDirection
  states: OrderDirection
  tariffCode: OrderDirection
  tariffType: OrderDirection
  vertical: OrderDirection
}

input TariffCodeUpdateInput {
  serialNo: String
  distributor: String
  provider: String
  propertyType: String
  states: String
  tariffCode: String
  tariffType: String
  vertical: String
}

input TariffCodeUpdateArgs {
  where: TariffCodeWhereUniqueInput!
  data: TariffCodeUpdateInput!
}

input TariffCodeCreateInput {
  serialNo: String
  distributor: String
  provider: String
  propertyType: String
  states: String
  tariffCode: String
  tariffType: String
  vertical: String
}

type OpenEnergyBillRule {
  id: ID!
  transactionUType: String
  value: String
  isExclusive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input OpenEnergyBillRuleWhereUniqueInput {
  id: ID
}

input OpenEnergyBillRuleWhereInput {
  AND: [OpenEnergyBillRuleWhereInput!]
  OR: [OpenEnergyBillRuleWhereInput!]
  NOT: [OpenEnergyBillRuleWhereInput!]
  id: IDFilter
  transactionUType: StringFilter
  value: StringFilter
  isExclusive: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input OpenEnergyBillRuleOrderByInput {
  id: OrderDirection
  transactionUType: OrderDirection
  value: OrderDirection
  isExclusive: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input OpenEnergyBillRuleUpdateInput {
  transactionUType: String
  value: String
  isExclusive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input OpenEnergyBillRuleUpdateArgs {
  where: OpenEnergyBillRuleWhereUniqueInput!
  data: OpenEnergyBillRuleUpdateInput!
}

input OpenEnergyBillRuleCreateInput {
  transactionUType: String
  value: String
  isExclusive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type HIProvider {
  id: ID!
  status: Boolean
  slug: String
  providerId: String
  name: String
  logo: Media
  postSubmissionContent: String
  australianCreditLicence: Int
  hasAllAffiliates: Boolean
  affiliate(where: AffiliateWhereInput! = {}, orderBy: [AffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AffiliateWhereUniqueInput): [Affiliate!]
  affiliateCount(where: AffiliateWhereInput! = {}): Int
  includeAllSubAff: Boolean
  subAffiliate(where: SubAffiliateWhereInput! = {}, orderBy: [SubAffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubAffiliateWhereUniqueInput): [SubAffiliate!]
  subAffiliateCount(where: SubAffiliateWhereInput! = {}): Int
  formContainer(where: HIFormContainerWhereInput! = {}, orderBy: [HIFormContainerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HIFormContainerWhereUniqueInput): [HIFormContainer!]
  formContainerCount(where: HIFormContainerWhereInput! = {}): Int
  scripts(where: ScriptWhereInput! = {}, orderBy: [ScriptOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScriptWhereUniqueInput): [Script!]
  scriptsCount(where: ScriptWhereInput! = {}): Int
  clickoutStatus: String
  clickoutParams: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input HIProviderWhereUniqueInput {
  id: ID
  slug: String
  providerId: String
}

input HIProviderWhereInput {
  AND: [HIProviderWhereInput!]
  OR: [HIProviderWhereInput!]
  NOT: [HIProviderWhereInput!]
  id: IDFilter
  status: BooleanFilter
  slug: StringFilter
  providerId: StringFilter
  name: StringFilter
  logo: MediaWhereInput
  postSubmissionContent: StringFilter
  australianCreditLicence: IntNullableFilter
  hasAllAffiliates: BooleanFilter
  affiliate: AffiliateManyRelationFilter
  includeAllSubAff: BooleanFilter
  subAffiliate: SubAffiliateManyRelationFilter
  formContainer: HIFormContainerManyRelationFilter
  scripts: ScriptManyRelationFilter
  clickoutStatus: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input HIProviderOrderByInput {
  id: OrderDirection
  status: OrderDirection
  slug: OrderDirection
  providerId: OrderDirection
  name: OrderDirection
  postSubmissionContent: OrderDirection
  australianCreditLicence: OrderDirection
  hasAllAffiliates: OrderDirection
  includeAllSubAff: OrderDirection
  clickoutStatus: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input HIProviderUpdateInput {
  status: Boolean
  slug: String
  providerId: String
  name: String
  logo: MediaRelateToOneForUpdateInput
  postSubmissionContent: String
  australianCreditLicence: Int
  hasAllAffiliates: Boolean
  affiliate: AffiliateRelateToManyForUpdateInput
  includeAllSubAff: Boolean
  subAffiliate: SubAffiliateRelateToManyForUpdateInput
  formContainer: HIFormContainerRelateToManyForUpdateInput
  scripts: ScriptRelateToManyForUpdateInput
  clickoutStatus: String
  clickoutParams: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input HIProviderUpdateArgs {
  where: HIProviderWhereUniqueInput!
  data: HIProviderUpdateInput!
}

input HIProviderCreateInput {
  status: Boolean
  slug: String
  providerId: String
  name: String
  logo: MediaRelateToOneForCreateInput
  postSubmissionContent: String
  australianCreditLicence: Int
  hasAllAffiliates: Boolean
  affiliate: AffiliateRelateToManyForCreateInput
  includeAllSubAff: Boolean
  subAffiliate: SubAffiliateRelateToManyForCreateInput
  formContainer: HIFormContainerRelateToManyForCreateInput
  scripts: ScriptRelateToManyForCreateInput
  clickoutStatus: String
  clickoutParams: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

type HIFormContainer {
  id: ID!
  label: String
  provider(where: HIProviderWhereInput! = {}, orderBy: [HIProviderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HIProviderWhereUniqueInput): [HIProvider!]
  providerCount(where: HIProviderWhereInput! = {}): Int
  isDefault: Boolean
  v2: Boolean
  hasAllAffiliates: Boolean
  affiliate(where: AffiliateWhereInput! = {}, orderBy: [AffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AffiliateWhereUniqueInput): [Affiliate!]
  affiliateCount(where: AffiliateWhereInput! = {}): Int
  includeAllSubAff: Boolean
  subAffiliate(where: SubAffiliateWhereInput! = {}, orderBy: [SubAffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubAffiliateWhereUniqueInput): [SubAffiliate!]
  subAffiliateCount(where: SubAffiliateWhereInput! = {}): Int
  page: String
  formComponents(where: FormComponentWhereInput! = {}, orderBy: [FormComponentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormComponentWhereUniqueInput): [FormComponent!]
  formComponentsCount(where: FormComponentWhereInput! = {}): Int
  formOrder: JSON
  defaultProps: JSON
  staticData: JSON
  scripts(where: ScriptWhereInput! = {}, orderBy: [ScriptOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScriptWhereUniqueInput): [Script!]
  scriptsCount(where: ScriptWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input HIFormContainerWhereUniqueInput {
  id: ID
}

input HIFormContainerWhereInput {
  AND: [HIFormContainerWhereInput!]
  OR: [HIFormContainerWhereInput!]
  NOT: [HIFormContainerWhereInput!]
  id: IDFilter
  label: StringFilter
  provider: HIProviderManyRelationFilter
  isDefault: BooleanFilter
  v2: BooleanFilter
  hasAllAffiliates: BooleanFilter
  affiliate: AffiliateManyRelationFilter
  includeAllSubAff: BooleanFilter
  subAffiliate: SubAffiliateManyRelationFilter
  page: StringFilter
  formComponents: FormComponentManyRelationFilter
  scripts: ScriptManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input HIFormContainerOrderByInput {
  id: OrderDirection
  label: OrderDirection
  isDefault: OrderDirection
  v2: OrderDirection
  hasAllAffiliates: OrderDirection
  includeAllSubAff: OrderDirection
  page: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input HIFormContainerUpdateInput {
  label: String
  provider: HIProviderRelateToManyForUpdateInput
  isDefault: Boolean
  v2: Boolean
  hasAllAffiliates: Boolean
  affiliate: AffiliateRelateToManyForUpdateInput
  includeAllSubAff: Boolean
  subAffiliate: SubAffiliateRelateToManyForUpdateInput
  page: String
  formComponents: FormComponentRelateToManyForUpdateInput
  formOrder: JSON
  defaultProps: JSON
  staticData: JSON
  scripts: ScriptRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input HIFormContainerUpdateArgs {
  where: HIFormContainerWhereUniqueInput!
  data: HIFormContainerUpdateInput!
}

input HIFormContainerCreateInput {
  label: String
  provider: HIProviderRelateToManyForCreateInput
  isDefault: Boolean
  v2: Boolean
  hasAllAffiliates: Boolean
  affiliate: AffiliateRelateToManyForCreateInput
  includeAllSubAff: Boolean
  subAffiliate: SubAffiliateRelateToManyForCreateInput
  page: String
  formComponents: FormComponentRelateToManyForCreateInput
  formOrder: JSON
  defaultProps: JSON
  staticData: JSON
  scripts: ScriptRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type HIRebate {
  id: ID!
  name: String
  ageGroup: String
  tier: String
  rebate: Float
}

input HIRebateWhereUniqueInput {
  id: ID
}

input HIRebateWhereInput {
  AND: [HIRebateWhereInput!]
  OR: [HIRebateWhereInput!]
  NOT: [HIRebateWhereInput!]
  id: IDFilter
  name: StringFilter
  ageGroup: StringFilter
  tier: StringFilter
  rebate: FloatFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input HIRebateOrderByInput {
  id: OrderDirection
  name: OrderDirection
  ageGroup: OrderDirection
  tier: OrderDirection
  rebate: OrderDirection
}

input HIRebateUpdateInput {
  name: String
  ageGroup: String
  tier: String
  rebate: Float
}

input HIRebateUpdateArgs {
  where: HIRebateWhereUniqueInput!
  data: HIRebateUpdateInput!
}

input HIRebateCreateInput {
  name: String
  ageGroup: String
  tier: String
  rebate: Float
}

type ProductTier {
  id: ID!
  name: String
  hospitalCovers(where: HospitalCoverWhereInput! = {}, orderBy: [HospitalCoverOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HospitalCoverWhereUniqueInput): [HospitalCover!]
  hospitalCoversCount(where: HospitalCoverWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductTierWhereUniqueInput {
  id: ID
  name: String
}

input ProductTierWhereInput {
  AND: [ProductTierWhereInput!]
  OR: [ProductTierWhereInput!]
  NOT: [ProductTierWhereInput!]
  id: IDFilter
  name: StringFilter
  hospitalCovers: HospitalCoverManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input HospitalCoverManyRelationFilter {
  every: HospitalCoverWhereInput
  some: HospitalCoverWhereInput
  none: HospitalCoverWhereInput
}

input ProductTierOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProductTierUpdateInput {
  name: String
  hospitalCovers: HospitalCoverRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input HospitalCoverRelateToManyForUpdateInput {
  disconnect: [HospitalCoverWhereUniqueInput!]
  set: [HospitalCoverWhereUniqueInput!]
  create: [HospitalCoverCreateInput!]
  connect: [HospitalCoverWhereUniqueInput!]
}

input ProductTierUpdateArgs {
  where: ProductTierWhereUniqueInput!
  data: ProductTierUpdateInput!
}

input ProductTierCreateInput {
  name: String
  hospitalCovers: HospitalCoverRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input HospitalCoverRelateToManyForCreateInput {
  create: [HospitalCoverCreateInput!]
  connect: [HospitalCoverWhereUniqueInput!]
}

type HospitalCover {
  id: ID!
  name: String
  description: String
  productTiers(where: ProductTierWhereInput! = {}, orderBy: [ProductTierOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductTierWhereUniqueInput): [ProductTier!]
  productTiersCount(where: ProductTierWhereInput! = {}): Int
  isEnabled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input HospitalCoverWhereUniqueInput {
  id: ID
  name: String
}

input HospitalCoverWhereInput {
  AND: [HospitalCoverWhereInput!]
  OR: [HospitalCoverWhereInput!]
  NOT: [HospitalCoverWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  productTiers: ProductTierManyRelationFilter
  isEnabled: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ProductTierManyRelationFilter {
  every: ProductTierWhereInput
  some: ProductTierWhereInput
  none: ProductTierWhereInput
}

input HospitalCoverOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  isEnabled: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input HospitalCoverUpdateInput {
  name: String
  description: String
  productTiers: ProductTierRelateToManyForUpdateInput
  isEnabled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductTierRelateToManyForUpdateInput {
  disconnect: [ProductTierWhereUniqueInput!]
  set: [ProductTierWhereUniqueInput!]
  create: [ProductTierCreateInput!]
  connect: [ProductTierWhereUniqueInput!]
}

input HospitalCoverUpdateArgs {
  where: HospitalCoverWhereUniqueInput!
  data: HospitalCoverUpdateInput!
}

input HospitalCoverCreateInput {
  name: String
  description: String
  productTiers: ProductTierRelateToManyForCreateInput
  isEnabled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductTierRelateToManyForCreateInput {
  create: [ProductTierCreateInput!]
  connect: [ProductTierWhereUniqueInput!]
}

type ExtrasCover {
  id: ID!
  name: String
  description: String
  isEnabled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input ExtrasCoverWhereUniqueInput {
  id: ID
  name: String
}

input ExtrasCoverWhereInput {
  AND: [ExtrasCoverWhereInput!]
  OR: [ExtrasCoverWhereInput!]
  NOT: [ExtrasCoverWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  isEnabled: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ExtrasCoverOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  isEnabled: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ExtrasCoverUpdateInput {
  name: String
  description: String
  isEnabled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input ExtrasCoverUpdateArgs {
  where: ExtrasCoverWhereUniqueInput!
  data: ExtrasCoverUpdateInput!
}

input ExtrasCoverCreateInput {
  name: String
  description: String
  isEnabled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type PaymentFrequency {
  id: ID!
  label: String
  name: String
  numOfDays: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input PaymentFrequencyWhereUniqueInput {
  id: ID
  label: String
  name: String
}

input PaymentFrequencyWhereInput {
  AND: [PaymentFrequencyWhereInput!]
  OR: [PaymentFrequencyWhereInput!]
  NOT: [PaymentFrequencyWhereInput!]
  id: IDFilter
  label: StringFilter
  name: StringFilter
  numOfDays: IntFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PaymentFrequencyOrderByInput {
  id: OrderDirection
  label: OrderDirection
  name: OrderDirection
  numOfDays: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PaymentFrequencyUpdateInput {
  label: String
  name: String
  numOfDays: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input PaymentFrequencyUpdateArgs {
  where: PaymentFrequencyWhereUniqueInput!
  data: PaymentFrequencyUpdateInput!
}

input PaymentFrequencyCreateInput {
  label: String
  name: String
  numOfDays: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type PLProvider {
  id: ID!
  status: Boolean
  slug: String
  providerId: String
  name: String
  logo: Media
  postSubmissionContent: String
  australianCreditLicence: Int
  hasAllAffiliates: Boolean
  affiliate(where: AffiliateWhereInput! = {}, orderBy: [AffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AffiliateWhereUniqueInput): [Affiliate!]
  affiliateCount(where: AffiliateWhereInput! = {}): Int
  includeAllSubAff: Boolean
  subAffiliate(where: SubAffiliateWhereInput! = {}, orderBy: [SubAffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubAffiliateWhereUniqueInput): [SubAffiliate!]
  subAffiliateCount(where: SubAffiliateWhereInput! = {}): Int
  loans(where: PersonalLoanWhereInput! = {}, orderBy: [PersonalLoanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonalLoanWhereUniqueInput): [PersonalLoan!]
  loansCount(where: PersonalLoanWhereInput! = {}): Int
  formContainer(where: PLFormContainerWhereInput! = {}, orderBy: [PLFormContainerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PLFormContainerWhereUniqueInput): [PLFormContainer!]
  formContainerCount(where: PLFormContainerWhereInput! = {}): Int
  scripts(where: ScriptWhereInput! = {}, orderBy: [ScriptOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScriptWhereUniqueInput): [Script!]
  scriptsCount(where: ScriptWhereInput! = {}): Int
  clickoutStatus: String
  clickoutParams: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input PLProviderWhereUniqueInput {
  id: ID
  slug: String
  providerId: String
}

input PLProviderWhereInput {
  AND: [PLProviderWhereInput!]
  OR: [PLProviderWhereInput!]
  NOT: [PLProviderWhereInput!]
  id: IDFilter
  status: BooleanFilter
  slug: StringFilter
  providerId: StringFilter
  name: StringFilter
  logo: MediaWhereInput
  postSubmissionContent: StringFilter
  australianCreditLicence: IntNullableFilter
  hasAllAffiliates: BooleanFilter
  affiliate: AffiliateManyRelationFilter
  includeAllSubAff: BooleanFilter
  subAffiliate: SubAffiliateManyRelationFilter
  loans: PersonalLoanManyRelationFilter
  formContainer: PLFormContainerManyRelationFilter
  scripts: ScriptManyRelationFilter
  clickoutStatus: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PLProviderOrderByInput {
  id: OrderDirection
  status: OrderDirection
  slug: OrderDirection
  providerId: OrderDirection
  name: OrderDirection
  postSubmissionContent: OrderDirection
  australianCreditLicence: OrderDirection
  hasAllAffiliates: OrderDirection
  includeAllSubAff: OrderDirection
  clickoutStatus: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PLProviderUpdateInput {
  status: Boolean
  slug: String
  providerId: String
  name: String
  logo: MediaRelateToOneForUpdateInput
  postSubmissionContent: String
  australianCreditLicence: Int
  hasAllAffiliates: Boolean
  affiliate: AffiliateRelateToManyForUpdateInput
  includeAllSubAff: Boolean
  subAffiliate: SubAffiliateRelateToManyForUpdateInput
  loans: PersonalLoanRelateToManyForUpdateInput
  formContainer: PLFormContainerRelateToManyForUpdateInput
  scripts: ScriptRelateToManyForUpdateInput
  clickoutStatus: String
  clickoutParams: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input PLProviderUpdateArgs {
  where: PLProviderWhereUniqueInput!
  data: PLProviderUpdateInput!
}

input PLProviderCreateInput {
  status: Boolean
  slug: String
  providerId: String
  name: String
  logo: MediaRelateToOneForCreateInput
  postSubmissionContent: String
  australianCreditLicence: Int
  hasAllAffiliates: Boolean
  affiliate: AffiliateRelateToManyForCreateInput
  includeAllSubAff: Boolean
  subAffiliate: SubAffiliateRelateToManyForCreateInput
  loans: PersonalLoanRelateToManyForCreateInput
  formContainer: PLFormContainerRelateToManyForCreateInput
  scripts: ScriptRelateToManyForCreateInput
  clickoutStatus: String
  clickoutParams: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

type PersonalLoan {
  id: ID!
  label: String
  isDiscontinued: Boolean
  name: String
  description: String
  uuid: String
  slug: String
  image: Media
  provider: PLProvider
  hasAllAffiliates: Boolean
  affiliate(where: AffiliateWhereInput! = {}, orderBy: [AffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AffiliateWhereUniqueInput): [Affiliate!]
  affiliateCount(where: AffiliateWhereInput! = {}): Int
  includeAllSubAff: Boolean
  subAffiliate(where: SubAffiliateWhereInput! = {}, orderBy: [SubAffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubAffiliateWhereUniqueInput): [SubAffiliate!]
  subAffiliateCount(where: SubAffiliateWhereInput! = {}): Int
  loanDetail: PLLoanDetail
  fees: PLFee
  features: PLFeature
  eligibility: PLEligibility
  documents: PLDocument
  specials(where: PLSpecialWhereInput! = {}, orderBy: [PLSpecialOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PLSpecialWhereUniqueInput): [PLSpecial!]
  specialsCount(where: PLSpecialWhereInput! = {}): Int
  perks(where: PLPerkWhereInput! = {}, orderBy: [PLPerkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PLPerkWhereUniqueInput): [PLPerk!]
  perksCount(where: PLPerkWhereInput! = {}): Int
  creditScores(where: CreditScoreWhereInput! = {}, orderBy: [CreditScoreOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CreditScoreWhereUniqueInput): [CreditScore!]
  creditScoresCount(where: CreditScoreWhereInput! = {}): Int
  clickoutStatus: String
  clickoutParams: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input PersonalLoanWhereUniqueInput {
  id: ID
  uuid: String
}

input PersonalLoanWhereInput {
  AND: [PersonalLoanWhereInput!]
  OR: [PersonalLoanWhereInput!]
  NOT: [PersonalLoanWhereInput!]
  id: IDFilter
  isDiscontinued: BooleanFilter
  name: StringFilter
  description: StringFilter
  uuid: StringFilter
  slug: StringFilter
  image: MediaWhereInput
  provider: PLProviderWhereInput
  hasAllAffiliates: BooleanFilter
  affiliate: AffiliateManyRelationFilter
  includeAllSubAff: BooleanFilter
  subAffiliate: SubAffiliateManyRelationFilter
  loanDetail: PLLoanDetailWhereInput
  fees: PLFeeWhereInput
  features: PLFeatureWhereInput
  eligibility: PLEligibilityWhereInput
  documents: PLDocumentWhereInput
  specials: PLSpecialManyRelationFilter
  perks: PLPerkManyRelationFilter
  creditScores: CreditScoreManyRelationFilter
  clickoutStatus: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PLSpecialManyRelationFilter {
  every: PLSpecialWhereInput
  some: PLSpecialWhereInput
  none: PLSpecialWhereInput
}

input PLPerkManyRelationFilter {
  every: PLPerkWhereInput
  some: PLPerkWhereInput
  none: PLPerkWhereInput
}

input PersonalLoanOrderByInput {
  id: OrderDirection
  isDiscontinued: OrderDirection
  name: OrderDirection
  description: OrderDirection
  uuid: OrderDirection
  slug: OrderDirection
  hasAllAffiliates: OrderDirection
  includeAllSubAff: OrderDirection
  clickoutStatus: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PersonalLoanUpdateInput {
  isDiscontinued: Boolean
  name: String
  description: String
  uuid: String
  slug: String
  image: MediaRelateToOneForUpdateInput
  provider: PLProviderRelateToOneForUpdateInput
  hasAllAffiliates: Boolean
  affiliate: AffiliateRelateToManyForUpdateInput
  includeAllSubAff: Boolean
  subAffiliate: SubAffiliateRelateToManyForUpdateInput
  loanDetail: PLLoanDetailRelateToOneForUpdateInput
  fees: PLFeeRelateToOneForUpdateInput
  features: PLFeatureRelateToOneForUpdateInput
  eligibility: PLEligibilityRelateToOneForUpdateInput
  documents: PLDocumentRelateToOneForUpdateInput
  specials: PLSpecialRelateToManyForUpdateInput
  perks: PLPerkRelateToManyForUpdateInput
  creditScores: CreditScoreRelateToManyForUpdateInput
  clickoutStatus: String
  clickoutParams: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input PLProviderRelateToOneForUpdateInput {
  create: PLProviderCreateInput
  connect: PLProviderWhereUniqueInput
  disconnect: Boolean
}

input PLLoanDetailRelateToOneForUpdateInput {
  create: PLLoanDetailCreateInput
  connect: PLLoanDetailWhereUniqueInput
  disconnect: Boolean
}

input PLFeeRelateToOneForUpdateInput {
  create: PLFeeCreateInput
  connect: PLFeeWhereUniqueInput
  disconnect: Boolean
}

input PLFeatureRelateToOneForUpdateInput {
  create: PLFeatureCreateInput
  connect: PLFeatureWhereUniqueInput
  disconnect: Boolean
}

input PLEligibilityRelateToOneForUpdateInput {
  create: PLEligibilityCreateInput
  connect: PLEligibilityWhereUniqueInput
  disconnect: Boolean
}

input PLDocumentRelateToOneForUpdateInput {
  create: PLDocumentCreateInput
  connect: PLDocumentWhereUniqueInput
  disconnect: Boolean
}

input PLSpecialRelateToManyForUpdateInput {
  disconnect: [PLSpecialWhereUniqueInput!]
  set: [PLSpecialWhereUniqueInput!]
  create: [PLSpecialCreateInput!]
  connect: [PLSpecialWhereUniqueInput!]
}

input PLPerkRelateToManyForUpdateInput {
  disconnect: [PLPerkWhereUniqueInput!]
  set: [PLPerkWhereUniqueInput!]
  create: [PLPerkCreateInput!]
  connect: [PLPerkWhereUniqueInput!]
}

input PersonalLoanUpdateArgs {
  where: PersonalLoanWhereUniqueInput!
  data: PersonalLoanUpdateInput!
}

input PersonalLoanCreateInput {
  isDiscontinued: Boolean
  name: String
  description: String
  uuid: String
  slug: String
  image: MediaRelateToOneForCreateInput
  provider: PLProviderRelateToOneForCreateInput
  hasAllAffiliates: Boolean
  affiliate: AffiliateRelateToManyForCreateInput
  includeAllSubAff: Boolean
  subAffiliate: SubAffiliateRelateToManyForCreateInput
  loanDetail: PLLoanDetailRelateToOneForCreateInput
  fees: PLFeeRelateToOneForCreateInput
  features: PLFeatureRelateToOneForCreateInput
  eligibility: PLEligibilityRelateToOneForCreateInput
  documents: PLDocumentRelateToOneForCreateInput
  specials: PLSpecialRelateToManyForCreateInput
  perks: PLPerkRelateToManyForCreateInput
  creditScores: CreditScoreRelateToManyForCreateInput
  clickoutStatus: String
  clickoutParams: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input PLProviderRelateToOneForCreateInput {
  create: PLProviderCreateInput
  connect: PLProviderWhereUniqueInput
}

input PLLoanDetailRelateToOneForCreateInput {
  create: PLLoanDetailCreateInput
  connect: PLLoanDetailWhereUniqueInput
}

input PLFeeRelateToOneForCreateInput {
  create: PLFeeCreateInput
  connect: PLFeeWhereUniqueInput
}

input PLFeatureRelateToOneForCreateInput {
  create: PLFeatureCreateInput
  connect: PLFeatureWhereUniqueInput
}

input PLEligibilityRelateToOneForCreateInput {
  create: PLEligibilityCreateInput
  connect: PLEligibilityWhereUniqueInput
}

input PLDocumentRelateToOneForCreateInput {
  create: PLDocumentCreateInput
  connect: PLDocumentWhereUniqueInput
}

input PLSpecialRelateToManyForCreateInput {
  create: [PLSpecialCreateInput!]
  connect: [PLSpecialWhereUniqueInput!]
}

input PLPerkRelateToManyForCreateInput {
  create: [PLPerkCreateInput!]
  connect: [PLPerkWhereUniqueInput!]
}

type PLLoanDetail {
  id: ID!
  label: String
  personalLoan: PersonalLoan
  interestType: String
  securityType: String
  repaymentFrequency: [String!]
  loanPurpose: String
  minLoanAmount: Int
  maxLoanAmount: Int
  minLoanTerm: Int
  maxLoanTerm: Int
  minInterestRate: Float
  maxInterestRate: Float
  minComparisonRate: Float
  maxComparisonRate: Float
  fixedRepresentativeRate: Float
  comparisonRepresentativeRate: Float
  fundingTime: Int
  fundingTimeFrequency: String
  otherInformation: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PLLoanDetailWhereUniqueInput {
  id: ID
}

input PLLoanDetailWhereInput {
  AND: [PLLoanDetailWhereInput!]
  OR: [PLLoanDetailWhereInput!]
  NOT: [PLLoanDetailWhereInput!]
  id: IDFilter
  personalLoan: PersonalLoanWhereInput
  interestType: StringFilter
  securityType: StringFilter
  minLoanAmount: IntFilter
  maxLoanAmount: IntNullableFilter
  minLoanTerm: IntFilter
  maxLoanTerm: IntFilter
  minInterestRate: FloatFilter
  maxInterestRate: FloatNullableFilter
  minComparisonRate: FloatFilter
  maxComparisonRate: FloatNullableFilter
  fixedRepresentativeRate: FloatNullableFilter
  comparisonRepresentativeRate: FloatNullableFilter
  fundingTime: IntNullableFilter
  fundingTimeFrequency: StringNullableFilter
  otherInformation: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input PLLoanDetailOrderByInput {
  id: OrderDirection
  interestType: OrderDirection
  securityType: OrderDirection
  loanPurpose: OrderDirection
  minLoanAmount: OrderDirection
  maxLoanAmount: OrderDirection
  minLoanTerm: OrderDirection
  maxLoanTerm: OrderDirection
  minInterestRate: OrderDirection
  maxInterestRate: OrderDirection
  minComparisonRate: OrderDirection
  maxComparisonRate: OrderDirection
  fixedRepresentativeRate: OrderDirection
  comparisonRepresentativeRate: OrderDirection
  fundingTime: OrderDirection
  fundingTimeFrequency: OrderDirection
  otherInformation: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PLLoanDetailUpdateInput {
  personalLoan: PersonalLoanRelateToOneForUpdateInput
  interestType: String
  securityType: String
  repaymentFrequency: [String!]
  loanPurpose: String
  minLoanAmount: Int
  maxLoanAmount: Int
  minLoanTerm: Int
  maxLoanTerm: Int
  minInterestRate: Float
  maxInterestRate: Float
  minComparisonRate: Float
  maxComparisonRate: Float
  fixedRepresentativeRate: Float
  comparisonRepresentativeRate: Float
  fundingTime: Int
  fundingTimeFrequency: String
  otherInformation: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PersonalLoanRelateToOneForUpdateInput {
  create: PersonalLoanCreateInput
  connect: PersonalLoanWhereUniqueInput
  disconnect: Boolean
}

input PLLoanDetailUpdateArgs {
  where: PLLoanDetailWhereUniqueInput!
  data: PLLoanDetailUpdateInput!
}

input PLLoanDetailCreateInput {
  personalLoan: PersonalLoanRelateToOneForCreateInput
  interestType: String
  securityType: String
  repaymentFrequency: [String!]
  loanPurpose: String
  minLoanAmount: Int
  maxLoanAmount: Int
  minLoanTerm: Int
  maxLoanTerm: Int
  minInterestRate: Float
  maxInterestRate: Float
  minComparisonRate: Float
  maxComparisonRate: Float
  fixedRepresentativeRate: Float
  comparisonRepresentativeRate: Float
  fundingTime: Int
  fundingTimeFrequency: String
  otherInformation: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PersonalLoanRelateToOneForCreateInput {
  create: PersonalLoanCreateInput
  connect: PersonalLoanWhereUniqueInput
}

type PLFeature {
  id: ID!
  label: String
  personalLoan: PersonalLoan
  withExtraRepayment: Boolean
  withRedrawFacility: Boolean
  isFullyDrawnAdvance: Boolean
  withInstantApproval: Boolean
  topUpFacilityAvailable: Boolean
  featureDescription: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PLFeatureWhereUniqueInput {
  id: ID
}

input PLFeatureWhereInput {
  AND: [PLFeatureWhereInput!]
  OR: [PLFeatureWhereInput!]
  NOT: [PLFeatureWhereInput!]
  id: IDFilter
  personalLoan: PersonalLoanWhereInput
  withExtraRepayment: BooleanFilter
  withRedrawFacility: BooleanFilter
  isFullyDrawnAdvance: BooleanFilter
  withInstantApproval: BooleanFilter
  topUpFacilityAvailable: BooleanFilter
  featureDescription: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PLFeatureOrderByInput {
  id: OrderDirection
  withExtraRepayment: OrderDirection
  withRedrawFacility: OrderDirection
  isFullyDrawnAdvance: OrderDirection
  withInstantApproval: OrderDirection
  topUpFacilityAvailable: OrderDirection
  featureDescription: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PLFeatureUpdateInput {
  personalLoan: PersonalLoanRelateToOneForUpdateInput
  withExtraRepayment: Boolean
  withRedrawFacility: Boolean
  isFullyDrawnAdvance: Boolean
  withInstantApproval: Boolean
  topUpFacilityAvailable: Boolean
  featureDescription: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PLFeatureUpdateArgs {
  where: PLFeatureWhereUniqueInput!
  data: PLFeatureUpdateInput!
}

input PLFeatureCreateInput {
  personalLoan: PersonalLoanRelateToOneForCreateInput
  withExtraRepayment: Boolean
  withRedrawFacility: Boolean
  isFullyDrawnAdvance: Boolean
  withInstantApproval: Boolean
  topUpFacilityAvailable: Boolean
  featureDescription: String
  createdAt: DateTime
  updatedAt: DateTime
}

type PLFee {
  id: ID!
  label: String
  personalLoan: PersonalLoan
  upfrontFeeType: String
  minUpfrontFee: Float
  maxUpfrontFee: Float
  applicationFeeType: String
  minApplicationFee: Float
  maxApplicationFee: Float
  minRiskFee: Float
  maxRiskFee: Float
  settlementFreeCheque: Int
  settlementChequeFee: Float
  earlyTerminationFee: Float
  extraRepaymentFee: Float
  missedPaymentPenalty: Float
  ongoingFee: Float
  overCounterPaymentFee: Float
  establishmentFee: Float
  brokerageFee: Float
  securityFee: Float
  monthlyFee: Float
  loanServiceFee: Float
  dishonourFee: Float
  overdueAccountFee: Float
  brokerOriginationFee: Float
  createdAt: DateTime
  updatedAt: DateTime
}

input PLFeeWhereUniqueInput {
  id: ID
}

input PLFeeWhereInput {
  AND: [PLFeeWhereInput!]
  OR: [PLFeeWhereInput!]
  NOT: [PLFeeWhereInput!]
  id: IDFilter
  personalLoan: PersonalLoanWhereInput
  upfrontFeeType: StringNullableFilter
  minUpfrontFee: FloatNullableFilter
  maxUpfrontFee: FloatNullableFilter
  applicationFeeType: StringNullableFilter
  minApplicationFee: FloatNullableFilter
  maxApplicationFee: FloatNullableFilter
  minRiskFee: FloatNullableFilter
  maxRiskFee: FloatNullableFilter
  settlementFreeCheque: IntNullableFilter
  settlementChequeFee: FloatNullableFilter
  earlyTerminationFee: FloatNullableFilter
  extraRepaymentFee: FloatNullableFilter
  missedPaymentPenalty: FloatNullableFilter
  ongoingFee: FloatNullableFilter
  overCounterPaymentFee: FloatNullableFilter
  establishmentFee: FloatNullableFilter
  brokerageFee: FloatNullableFilter
  securityFee: FloatNullableFilter
  monthlyFee: FloatNullableFilter
  loanServiceFee: FloatNullableFilter
  dishonourFee: FloatNullableFilter
  overdueAccountFee: FloatNullableFilter
  brokerOriginationFee: FloatNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PLFeeOrderByInput {
  id: OrderDirection
  upfrontFeeType: OrderDirection
  minUpfrontFee: OrderDirection
  maxUpfrontFee: OrderDirection
  applicationFeeType: OrderDirection
  minApplicationFee: OrderDirection
  maxApplicationFee: OrderDirection
  minRiskFee: OrderDirection
  maxRiskFee: OrderDirection
  settlementFreeCheque: OrderDirection
  settlementChequeFee: OrderDirection
  earlyTerminationFee: OrderDirection
  extraRepaymentFee: OrderDirection
  missedPaymentPenalty: OrderDirection
  ongoingFee: OrderDirection
  overCounterPaymentFee: OrderDirection
  establishmentFee: OrderDirection
  brokerageFee: OrderDirection
  securityFee: OrderDirection
  monthlyFee: OrderDirection
  loanServiceFee: OrderDirection
  dishonourFee: OrderDirection
  overdueAccountFee: OrderDirection
  brokerOriginationFee: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PLFeeUpdateInput {
  personalLoan: PersonalLoanRelateToOneForUpdateInput
  upfrontFeeType: String
  minUpfrontFee: Float
  maxUpfrontFee: Float
  applicationFeeType: String
  minApplicationFee: Float
  maxApplicationFee: Float
  minRiskFee: Float
  maxRiskFee: Float
  settlementFreeCheque: Int
  settlementChequeFee: Float
  earlyTerminationFee: Float
  extraRepaymentFee: Float
  missedPaymentPenalty: Float
  ongoingFee: Float
  overCounterPaymentFee: Float
  establishmentFee: Float
  brokerageFee: Float
  securityFee: Float
  monthlyFee: Float
  loanServiceFee: Float
  dishonourFee: Float
  overdueAccountFee: Float
  brokerOriginationFee: Float
  createdAt: DateTime
  updatedAt: DateTime
}

input PLFeeUpdateArgs {
  where: PLFeeWhereUniqueInput!
  data: PLFeeUpdateInput!
}

input PLFeeCreateInput {
  personalLoan: PersonalLoanRelateToOneForCreateInput
  upfrontFeeType: String
  minUpfrontFee: Float
  maxUpfrontFee: Float
  applicationFeeType: String
  minApplicationFee: Float
  maxApplicationFee: Float
  minRiskFee: Float
  maxRiskFee: Float
  settlementFreeCheque: Int
  settlementChequeFee: Float
  earlyTerminationFee: Float
  extraRepaymentFee: Float
  missedPaymentPenalty: Float
  ongoingFee: Float
  overCounterPaymentFee: Float
  establishmentFee: Float
  brokerageFee: Float
  securityFee: Float
  monthlyFee: Float
  loanServiceFee: Float
  dishonourFee: Float
  overdueAccountFee: Float
  brokerOriginationFee: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type PLPerk {
  id: ID!
  label: String
  personalLoan: PersonalLoan
  name: String
  type: [String!]
  value: Int
  assumptions: String
  conditions: String
  days: Int
  daysConditions: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PLPerkWhereUniqueInput {
  id: ID
}

input PLPerkWhereInput {
  AND: [PLPerkWhereInput!]
  OR: [PLPerkWhereInput!]
  NOT: [PLPerkWhereInput!]
  id: IDFilter
  personalLoan: PersonalLoanWhereInput
  name: StringFilter
  value: IntNullableFilter
  assumptions: StringFilter
  conditions: StringFilter
  days: IntNullableFilter
  daysConditions: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PLPerkOrderByInput {
  id: OrderDirection
  name: OrderDirection
  value: OrderDirection
  assumptions: OrderDirection
  conditions: OrderDirection
  days: OrderDirection
  daysConditions: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PLPerkUpdateInput {
  personalLoan: PersonalLoanRelateToOneForUpdateInput
  name: String
  type: [String!]
  value: Int
  assumptions: String
  conditions: String
  days: Int
  daysConditions: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PLPerkUpdateArgs {
  where: PLPerkWhereUniqueInput!
  data: PLPerkUpdateInput!
}

input PLPerkCreateInput {
  personalLoan: PersonalLoanRelateToOneForCreateInput
  name: String
  type: [String!]
  value: Int
  assumptions: String
  conditions: String
  days: Int
  daysConditions: String
  createdAt: DateTime
  updatedAt: DateTime
}

type PLDocument {
  id: ID!
  label: String
  keyFactSheet: Media
  targetMarketDetermination: Media
  document(where: MediaWhereInput! = {}, orderBy: [MediaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MediaWhereUniqueInput): [Media!]
  documentCount(where: MediaWhereInput! = {}): Int
  personalLoan: PersonalLoan
  createdAt: DateTime
  updatedAt: DateTime
}

input PLDocumentWhereUniqueInput {
  id: ID
}

input PLDocumentWhereInput {
  AND: [PLDocumentWhereInput!]
  OR: [PLDocumentWhereInput!]
  NOT: [PLDocumentWhereInput!]
  id: IDFilter
  keyFactSheet: MediaWhereInput
  targetMarketDetermination: MediaWhereInput
  document: MediaManyRelationFilter
  personalLoan: PersonalLoanWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PLDocumentOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PLDocumentUpdateInput {
  keyFactSheet: MediaRelateToOneForUpdateInput
  targetMarketDetermination: MediaRelateToOneForUpdateInput
  document: MediaRelateToManyForUpdateInput
  personalLoan: PersonalLoanRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PLDocumentUpdateArgs {
  where: PLDocumentWhereUniqueInput!
  data: PLDocumentUpdateInput!
}

input PLDocumentCreateInput {
  keyFactSheet: MediaRelateToOneForCreateInput
  targetMarketDetermination: MediaRelateToOneForCreateInput
  document: MediaRelateToManyForCreateInput
  personalLoan: PersonalLoanRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type PLSpecial {
  id: ID!
  label: String
  personalLoan: PersonalLoan
  name: String
  type: [String!]
  offerType: String
  introText: String
  blurb: String
  startDate: DateTime
  endDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PLSpecialWhereUniqueInput {
  id: ID
}

input PLSpecialWhereInput {
  AND: [PLSpecialWhereInput!]
  OR: [PLSpecialWhereInput!]
  NOT: [PLSpecialWhereInput!]
  id: IDFilter
  personalLoan: PersonalLoanWhereInput
  name: StringFilter
  offerType: StringFilter
  introText: StringFilter
  blurb: StringFilter
  startDate: DateTimeFilter
  endDate: DateTimeNullableFilter
  url: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PLSpecialOrderByInput {
  id: OrderDirection
  name: OrderDirection
  offerType: OrderDirection
  introText: OrderDirection
  blurb: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  url: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PLSpecialUpdateInput {
  personalLoan: PersonalLoanRelateToOneForUpdateInput
  name: String
  type: [String!]
  offerType: String
  introText: String
  blurb: String
  startDate: DateTime
  endDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PLSpecialUpdateArgs {
  where: PLSpecialWhereUniqueInput!
  data: PLSpecialUpdateInput!
}

input PLSpecialCreateInput {
  personalLoan: PersonalLoanRelateToOneForCreateInput
  name: String
  type: [String!]
  offerType: String
  introText: String
  blurb: String
  startDate: DateTime
  endDate: DateTime
  url: String
  createdAt: DateTime
  updatedAt: DateTime
}

type PLEligibility {
  id: ID!
  label: String
  personalLoan: PersonalLoan
  minAge: Int
  minIncome: Int
  eligibilityCondition: String
  residency: [String!]
  visaValidity: Int
  createdAt: DateTime
  updatedAt: DateTime
  employment: JSON
}

input PLEligibilityWhereUniqueInput {
  id: ID
}

input PLEligibilityWhereInput {
  AND: [PLEligibilityWhereInput!]
  OR: [PLEligibilityWhereInput!]
  NOT: [PLEligibilityWhereInput!]
  id: IDFilter
  personalLoan: PersonalLoanWhereInput
  minAge: IntNullableFilter
  minIncome: IntNullableFilter
  eligibilityCondition: StringFilter
  visaValidity: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PLEligibilityOrderByInput {
  id: OrderDirection
  minAge: OrderDirection
  minIncome: OrderDirection
  eligibilityCondition: OrderDirection
  visaValidity: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PLEligibilityUpdateInput {
  personalLoan: PersonalLoanRelateToOneForUpdateInput
  minAge: Int
  minIncome: Int
  eligibilityCondition: String
  residency: [String!]
  visaValidity: Int
  createdAt: DateTime
  updatedAt: DateTime
  employment: JSON
}

input PLEligibilityUpdateArgs {
  where: PLEligibilityWhereUniqueInput!
  data: PLEligibilityUpdateInput!
}

input PLEligibilityCreateInput {
  personalLoan: PersonalLoanRelateToOneForCreateInput
  minAge: Int
  minIncome: Int
  eligibilityCondition: String
  residency: [String!]
  visaValidity: Int
  createdAt: DateTime
  updatedAt: DateTime
  employment: JSON
}

type PLFormContainer {
  id: ID!
  label: String
  provider(where: PLProviderWhereInput! = {}, orderBy: [PLProviderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PLProviderWhereUniqueInput): [PLProvider!]
  providerCount(where: PLProviderWhereInput! = {}): Int
  isDefault: Boolean
  v2: Boolean
  hasAllAffiliates: Boolean
  affiliate(where: AffiliateWhereInput! = {}, orderBy: [AffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AffiliateWhereUniqueInput): [Affiliate!]
  affiliateCount(where: AffiliateWhereInput! = {}): Int
  includeAllSubAff: Boolean
  subAffiliate(where: SubAffiliateWhereInput! = {}, orderBy: [SubAffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubAffiliateWhereUniqueInput): [SubAffiliate!]
  subAffiliateCount(where: SubAffiliateWhereInput! = {}): Int
  page: String
  formComponents(where: FormComponentWhereInput! = {}, orderBy: [FormComponentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormComponentWhereUniqueInput): [FormComponent!]
  formComponentsCount(where: FormComponentWhereInput! = {}): Int
  formOrder: JSON
  defaultProps: JSON
  staticData: JSON
  scripts(where: ScriptWhereInput! = {}, orderBy: [ScriptOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScriptWhereUniqueInput): [Script!]
  scriptsCount(where: ScriptWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input PLFormContainerWhereUniqueInput {
  id: ID
}

input PLFormContainerWhereInput {
  AND: [PLFormContainerWhereInput!]
  OR: [PLFormContainerWhereInput!]
  NOT: [PLFormContainerWhereInput!]
  id: IDFilter
  label: StringFilter
  provider: PLProviderManyRelationFilter
  isDefault: BooleanFilter
  v2: BooleanFilter
  hasAllAffiliates: BooleanFilter
  affiliate: AffiliateManyRelationFilter
  includeAllSubAff: BooleanFilter
  subAffiliate: SubAffiliateManyRelationFilter
  page: StringFilter
  formComponents: FormComponentManyRelationFilter
  scripts: ScriptManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PLFormContainerOrderByInput {
  id: OrderDirection
  label: OrderDirection
  isDefault: OrderDirection
  v2: OrderDirection
  hasAllAffiliates: OrderDirection
  includeAllSubAff: OrderDirection
  page: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PLFormContainerUpdateInput {
  label: String
  provider: PLProviderRelateToManyForUpdateInput
  isDefault: Boolean
  v2: Boolean
  hasAllAffiliates: Boolean
  affiliate: AffiliateRelateToManyForUpdateInput
  includeAllSubAff: Boolean
  subAffiliate: SubAffiliateRelateToManyForUpdateInput
  page: String
  formComponents: FormComponentRelateToManyForUpdateInput
  formOrder: JSON
  defaultProps: JSON
  staticData: JSON
  scripts: ScriptRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PLFormContainerUpdateArgs {
  where: PLFormContainerWhereUniqueInput!
  data: PLFormContainerUpdateInput!
}

input PLFormContainerCreateInput {
  label: String
  provider: PLProviderRelateToManyForCreateInput
  isDefault: Boolean
  v2: Boolean
  hasAllAffiliates: Boolean
  affiliate: AffiliateRelateToManyForCreateInput
  includeAllSubAff: Boolean
  subAffiliate: SubAffiliateRelateToManyForCreateInput
  page: String
  formComponents: FormComponentRelateToManyForCreateInput
  formOrder: JSON
  defaultProps: JSON
  staticData: JSON
  scripts: ScriptRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type AddonFeature {
  id: ID!
  description: String
}

input AddonFeatureWhereUniqueInput {
  id: ID
  description: String
}

input AddonFeatureWhereInput {
  AND: [AddonFeatureWhereInput!]
  OR: [AddonFeatureWhereInput!]
  NOT: [AddonFeatureWhereInput!]
  id: IDFilter
  description: StringFilter
}

input AddonFeatureOrderByInput {
  id: OrderDirection
  description: OrderDirection
}

input AddonFeatureUpdateInput {
  description: String
}

input AddonFeatureUpdateArgs {
  where: AddonFeatureWhereUniqueInput!
  data: AddonFeatureUpdateInput!
}

input AddonFeatureCreateInput {
  description: String
}

type Battery {
  id: ID!
  manufacturer: Manufacturer
  modelNumber: String
  series: String
  type: String
  cost: Decimal
  efficiency: Float
  outerDimensions: String
  weight: Float
  countryOfManufacturing: String
  warranty: Int
  warrantyClaims: Float
  powerRating: Float
  size: Float
  roundtripEfficiency: Float
  lifetime: String
  mount: String
  ipRating: Float
  detailsType: String
  details: String
  detailsDoc: Media
  approveDate: CalendarDay
  expiryDate: CalendarDay
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input BatteryWhereUniqueInput {
  id: ID
}

input BatteryWhereInput {
  AND: [BatteryWhereInput!]
  OR: [BatteryWhereInput!]
  NOT: [BatteryWhereInput!]
  id: IDFilter
  manufacturer: ManufacturerWhereInput
  modelNumber: StringFilter
  series: StringFilter
  type: StringFilter
  cost: DecimalNullableFilter
  efficiency: FloatNullableFilter
  outerDimensions: StringFilter
  weight: FloatNullableFilter
  countryOfManufacturing: StringFilter
  warranty: IntNullableFilter
  warrantyClaims: FloatNullableFilter
  powerRating: FloatNullableFilter
  size: FloatNullableFilter
  roundtripEfficiency: FloatNullableFilter
  lifetime: StringFilter
  mount: StringFilter
  ipRating: FloatNullableFilter
  detailsType: StringNullableFilter
  details: StringFilter
  detailsDoc: MediaWhereInput
  approveDate: CalendarDayFilter
  expiryDate: CalendarDayFilter
}

input CalendarDayFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayFilter
}

input BatteryOrderByInput {
  id: OrderDirection
  modelNumber: OrderDirection
  series: OrderDirection
  type: OrderDirection
  cost: OrderDirection
  efficiency: OrderDirection
  outerDimensions: OrderDirection
  weight: OrderDirection
  countryOfManufacturing: OrderDirection
  warranty: OrderDirection
  warrantyClaims: OrderDirection
  powerRating: OrderDirection
  size: OrderDirection
  roundtripEfficiency: OrderDirection
  lifetime: OrderDirection
  mount: OrderDirection
  ipRating: OrderDirection
  detailsType: OrderDirection
  details: OrderDirection
  approveDate: OrderDirection
  expiryDate: OrderDirection
}

input BatteryUpdateInput {
  manufacturer: ManufacturerRelateToOneForUpdateInput
  modelNumber: String
  series: String
  type: String
  cost: Decimal
  efficiency: Float
  outerDimensions: String
  weight: Float
  countryOfManufacturing: String
  warranty: Int
  warrantyClaims: Float
  powerRating: Float
  size: Float
  roundtripEfficiency: Float
  lifetime: String
  mount: String
  ipRating: Float
  detailsType: String
  details: String
  detailsDoc: MediaRelateToOneForUpdateInput
  approveDate: CalendarDay
  expiryDate: CalendarDay
}

input ManufacturerRelateToOneForUpdateInput {
  create: ManufacturerCreateInput
  connect: ManufacturerWhereUniqueInput
  disconnect: Boolean
}

input BatteryUpdateArgs {
  where: BatteryWhereUniqueInput!
  data: BatteryUpdateInput!
}

input BatteryCreateInput {
  manufacturer: ManufacturerRelateToOneForCreateInput
  modelNumber: String
  series: String
  type: String
  cost: Decimal
  efficiency: Float
  outerDimensions: String
  weight: Float
  countryOfManufacturing: String
  warranty: Int
  warrantyClaims: Float
  powerRating: Float
  size: Float
  roundtripEfficiency: Float
  lifetime: String
  mount: String
  ipRating: Float
  detailsType: String
  details: String
  detailsDoc: MediaRelateToOneForCreateInput
  approveDate: CalendarDay
  expiryDate: CalendarDay
}

input ManufacturerRelateToOneForCreateInput {
  create: ManufacturerCreateInput
  connect: ManufacturerWhereUniqueInput
}

type Manufacturer {
  id: ID!
  name: String
}

input ManufacturerWhereUniqueInput {
  id: ID
  name: String
}

input ManufacturerWhereInput {
  AND: [ManufacturerWhereInput!]
  OR: [ManufacturerWhereInput!]
  NOT: [ManufacturerWhereInput!]
  id: IDFilter
  name: StringFilter
}

input ManufacturerOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ManufacturerUpdateInput {
  name: String
}

input ManufacturerUpdateArgs {
  where: ManufacturerWhereUniqueInput!
  data: ManufacturerUpdateInput!
}

input ManufacturerCreateInput {
  name: String
}

type Installer {
  id: ID!
  name: String
  logo: Media
  displayLogo: Boolean
  affiliates(where: AffiliateWhereInput! = {}, orderBy: [AffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AffiliateWhereUniqueInput): [Affiliate!]
  affiliatesCount(where: AffiliateWhereInput! = {}): Int
  hasAllAffiliates: Boolean
  subAffiliates(where: SubAffiliateWhereInput! = {}, orderBy: [SubAffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubAffiliateWhereUniqueInput): [SubAffiliate!]
  subAffiliatesCount(where: SubAffiliateWhereInput! = {}): Int
  licence(where: InstallerLicenceWhereInput! = {}, orderBy: [InstallerLicenceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstallerLicenceWhereUniqueInput): [InstallerLicence!]
  licenceCount(where: InstallerLicenceWhereInput! = {}): Int
  zones(where: InstallerZoneWhereInput! = {}, orderBy: [InstallerZoneOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstallerZoneWhereUniqueInput): [InstallerZone!]
  zonesCount(where: InstallerZoneWhereInput! = {}): Int
  bundles(where: SolarBundleWhereInput! = {}, orderBy: [SolarBundleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SolarBundleWhereUniqueInput): [SolarBundle!]
  bundlesCount(where: SolarBundleWhereInput! = {}): Int
  contacts(where: InstallerContactWhereInput! = {}, orderBy: [InstallerContactOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstallerContactWhereUniqueInput): [InstallerContact!]
  contactsCount(where: InstallerContactWhereInput! = {}): Int
  addons(where: InstallerAddonWhereInput! = {}, orderBy: [InstallerAddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstallerAddonWhereUniqueInput): [InstallerAddon!]
  addonsCount(where: InstallerAddonWhereInput! = {}): Int
  depositType: String
  depositValue: Float
  nextStepGuidance: String
}

input InstallerWhereUniqueInput {
  id: ID
  name: String
}

input InstallerWhereInput {
  AND: [InstallerWhereInput!]
  OR: [InstallerWhereInput!]
  NOT: [InstallerWhereInput!]
  id: IDFilter
  name: StringFilter
  logo: MediaWhereInput
  displayLogo: BooleanFilter
  affiliates: AffiliateManyRelationFilter
  hasAllAffiliates: BooleanFilter
  subAffiliates: SubAffiliateManyRelationFilter
  licence: InstallerLicenceManyRelationFilter
  zones: InstallerZoneManyRelationFilter
  bundles: SolarBundleManyRelationFilter
  contacts: InstallerContactManyRelationFilter
  addons: InstallerAddonManyRelationFilter
  depositType: StringNullableFilter
  depositValue: FloatNullableFilter
  nextStepGuidance: StringFilter
}

input InstallerLicenceManyRelationFilter {
  every: InstallerLicenceWhereInput
  some: InstallerLicenceWhereInput
  none: InstallerLicenceWhereInput
}

input InstallerZoneManyRelationFilter {
  every: InstallerZoneWhereInput
  some: InstallerZoneWhereInput
  none: InstallerZoneWhereInput
}

input SolarBundleManyRelationFilter {
  every: SolarBundleWhereInput
  some: SolarBundleWhereInput
  none: SolarBundleWhereInput
}

input InstallerContactManyRelationFilter {
  every: InstallerContactWhereInput
  some: InstallerContactWhereInput
  none: InstallerContactWhereInput
}

input InstallerAddonManyRelationFilter {
  every: InstallerAddonWhereInput
  some: InstallerAddonWhereInput
  none: InstallerAddonWhereInput
}

input InstallerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  displayLogo: OrderDirection
  hasAllAffiliates: OrderDirection
  depositType: OrderDirection
  depositValue: OrderDirection
  nextStepGuidance: OrderDirection
}

input InstallerUpdateInput {
  name: String
  logo: MediaRelateToOneForUpdateInput
  displayLogo: Boolean
  affiliates: AffiliateRelateToManyForUpdateInput
  hasAllAffiliates: Boolean
  subAffiliates: SubAffiliateRelateToManyForUpdateInput
  licence: InstallerLicenceRelateToManyForUpdateInput
  zones: InstallerZoneRelateToManyForUpdateInput
  bundles: SolarBundleRelateToManyForUpdateInput
  contacts: InstallerContactRelateToManyForUpdateInput
  addons: InstallerAddonRelateToManyForUpdateInput
  depositType: String
  depositValue: Float
  nextStepGuidance: String
}

input InstallerLicenceRelateToManyForUpdateInput {
  disconnect: [InstallerLicenceWhereUniqueInput!]
  set: [InstallerLicenceWhereUniqueInput!]
  create: [InstallerLicenceCreateInput!]
  connect: [InstallerLicenceWhereUniqueInput!]
}

input InstallerZoneRelateToManyForUpdateInput {
  disconnect: [InstallerZoneWhereUniqueInput!]
  set: [InstallerZoneWhereUniqueInput!]
  create: [InstallerZoneCreateInput!]
  connect: [InstallerZoneWhereUniqueInput!]
}

input SolarBundleRelateToManyForUpdateInput {
  disconnect: [SolarBundleWhereUniqueInput!]
  set: [SolarBundleWhereUniqueInput!]
  create: [SolarBundleCreateInput!]
  connect: [SolarBundleWhereUniqueInput!]
}

input InstallerContactRelateToManyForUpdateInput {
  disconnect: [InstallerContactWhereUniqueInput!]
  set: [InstallerContactWhereUniqueInput!]
  create: [InstallerContactCreateInput!]
  connect: [InstallerContactWhereUniqueInput!]
}

input InstallerAddonRelateToManyForUpdateInput {
  disconnect: [InstallerAddonWhereUniqueInput!]
  set: [InstallerAddonWhereUniqueInput!]
  create: [InstallerAddonCreateInput!]
  connect: [InstallerAddonWhereUniqueInput!]
}

input InstallerUpdateArgs {
  where: InstallerWhereUniqueInput!
  data: InstallerUpdateInput!
}

input InstallerCreateInput {
  name: String
  logo: MediaRelateToOneForCreateInput
  displayLogo: Boolean
  affiliates: AffiliateRelateToManyForCreateInput
  hasAllAffiliates: Boolean
  subAffiliates: SubAffiliateRelateToManyForCreateInput
  licence: InstallerLicenceRelateToManyForCreateInput
  zones: InstallerZoneRelateToManyForCreateInput
  bundles: SolarBundleRelateToManyForCreateInput
  contacts: InstallerContactRelateToManyForCreateInput
  addons: InstallerAddonRelateToManyForCreateInput
  depositType: String
  depositValue: Float
  nextStepGuidance: String
}

input InstallerLicenceRelateToManyForCreateInput {
  create: [InstallerLicenceCreateInput!]
  connect: [InstallerLicenceWhereUniqueInput!]
}

input InstallerZoneRelateToManyForCreateInput {
  create: [InstallerZoneCreateInput!]
  connect: [InstallerZoneWhereUniqueInput!]
}

input SolarBundleRelateToManyForCreateInput {
  create: [SolarBundleCreateInput!]
  connect: [SolarBundleWhereUniqueInput!]
}

input InstallerContactRelateToManyForCreateInput {
  create: [InstallerContactCreateInput!]
  connect: [InstallerContactWhereUniqueInput!]
}

input InstallerAddonRelateToManyForCreateInput {
  create: [InstallerAddonCreateInput!]
  connect: [InstallerAddonWhereUniqueInput!]
}

type InstallerContact {
  id: ID!
  name: String
  type: InstallerContactTypeType
  contactNumber: Int
  email: String
  installer: Installer
}

enum InstallerContactTypeType {
  telephone
  mobile
}

input InstallerContactWhereUniqueInput {
  id: ID
  contactNumber: Int
}

input InstallerContactWhereInput {
  AND: [InstallerContactWhereInput!]
  OR: [InstallerContactWhereInput!]
  NOT: [InstallerContactWhereInput!]
  id: IDFilter
  name: StringFilter
  type: InstallerContactTypeTypeNullableFilter
  contactNumber: IntFilter
  email: StringFilter
  installer: InstallerWhereInput
}

input InstallerContactTypeTypeNullableFilter {
  equals: InstallerContactTypeType
  in: [InstallerContactTypeType!]
  notIn: [InstallerContactTypeType!]
  not: InstallerContactTypeTypeNullableFilter
}

input InstallerContactOrderByInput {
  id: OrderDirection
  name: OrderDirection
  type: OrderDirection
  contactNumber: OrderDirection
  email: OrderDirection
}

input InstallerContactUpdateInput {
  name: String
  type: InstallerContactTypeType
  contactNumber: Int
  email: String
  installer: InstallerRelateToOneForUpdateInput
}

input InstallerRelateToOneForUpdateInput {
  create: InstallerCreateInput
  connect: InstallerWhereUniqueInput
  disconnect: Boolean
}

input InstallerContactUpdateArgs {
  where: InstallerContactWhereUniqueInput!
  data: InstallerContactUpdateInput!
}

input InstallerContactCreateInput {
  name: String
  type: InstallerContactTypeType
  contactNumber: Int
  email: String
  installer: InstallerRelateToOneForCreateInput
}

input InstallerRelateToOneForCreateInput {
  create: InstallerCreateInput
  connect: InstallerWhereUniqueInput
}

type InstallerLicence {
  id: ID!
  state: State
  number: String
  postcodes: String
  installer: Installer
}

input InstallerLicenceWhereUniqueInput {
  id: ID
  number: String
}

input InstallerLicenceWhereInput {
  AND: [InstallerLicenceWhereInput!]
  OR: [InstallerLicenceWhereInput!]
  NOT: [InstallerLicenceWhereInput!]
  id: IDFilter
  state: StateWhereInput
  number: StringFilter
  postcodes: StringFilter
  installer: InstallerWhereInput
}

input InstallerLicenceOrderByInput {
  id: OrderDirection
  number: OrderDirection
  postcodes: OrderDirection
}

input InstallerLicenceUpdateInput {
  state: StateRelateToOneForUpdateInput
  number: String
  postcodes: String
  installer: InstallerRelateToOneForUpdateInput
}

input StateRelateToOneForUpdateInput {
  create: StateCreateInput
  connect: StateWhereUniqueInput
  disconnect: Boolean
}

input InstallerLicenceUpdateArgs {
  where: InstallerLicenceWhereUniqueInput!
  data: InstallerLicenceUpdateInput!
}

input InstallerLicenceCreateInput {
  state: StateRelateToOneForCreateInput
  number: String
  postcodes: String
  installer: InstallerRelateToOneForCreateInput
}

input StateRelateToOneForCreateInput {
  create: StateCreateInput
  connect: StateWhereUniqueInput
}

type InstallerInverter {
  id: ID!
  installer: Installer
  inverter: Inverter
  cost: Float
  warranty: Int
  warrantyClaims: Float
  image: Media
  name: String
}

input InstallerInverterWhereUniqueInput {
  id: ID
}

input InstallerInverterWhereInput {
  AND: [InstallerInverterWhereInput!]
  OR: [InstallerInverterWhereInput!]
  NOT: [InstallerInverterWhereInput!]
  id: IDFilter
  installer: InstallerWhereInput
  inverter: InverterWhereInput
  cost: FloatFilter
  warranty: IntFilter
  warrantyClaims: FloatFilter
  image: MediaWhereInput
  name: StringFilter
}

input InstallerInverterOrderByInput {
  id: OrderDirection
  cost: OrderDirection
  warranty: OrderDirection
  warrantyClaims: OrderDirection
  name: OrderDirection
}

input InstallerInverterUpdateInput {
  installer: InstallerRelateToOneForUpdateInput
  inverter: InverterRelateToOneForUpdateInput
  cost: Float
  warranty: Int
  warrantyClaims: Float
  image: MediaRelateToOneForUpdateInput
  name: String
}

input InverterRelateToOneForUpdateInput {
  create: InverterCreateInput
  connect: InverterWhereUniqueInput
  disconnect: Boolean
}

input InstallerInverterUpdateArgs {
  where: InstallerInverterWhereUniqueInput!
  data: InstallerInverterUpdateInput!
}

input InstallerInverterCreateInput {
  installer: InstallerRelateToOneForCreateInput
  inverter: InverterRelateToOneForCreateInput
  cost: Float
  warranty: Int
  warrantyClaims: Float
  image: MediaRelateToOneForCreateInput
  name: String
}

input InverterRelateToOneForCreateInput {
  create: InverterCreateInput
  connect: InverterWhereUniqueInput
}

type InstallerSolarPanel {
  id: ID!
  installer: Installer
  solarPanel: SolarPanel
  cost: Float
  warranty: Int
  warrantyClaims: Float
  image: Media
  name: String
}

input InstallerSolarPanelWhereUniqueInput {
  id: ID
}

input InstallerSolarPanelWhereInput {
  AND: [InstallerSolarPanelWhereInput!]
  OR: [InstallerSolarPanelWhereInput!]
  NOT: [InstallerSolarPanelWhereInput!]
  id: IDFilter
  installer: InstallerWhereInput
  solarPanel: SolarPanelWhereInput
  cost: FloatFilter
  warranty: IntFilter
  warrantyClaims: FloatFilter
  image: MediaWhereInput
  name: StringFilter
}

input InstallerSolarPanelOrderByInput {
  id: OrderDirection
  cost: OrderDirection
  warranty: OrderDirection
  warrantyClaims: OrderDirection
  name: OrderDirection
}

input InstallerSolarPanelUpdateInput {
  installer: InstallerRelateToOneForUpdateInput
  solarPanel: SolarPanelRelateToOneForUpdateInput
  cost: Float
  warranty: Int
  warrantyClaims: Float
  image: MediaRelateToOneForUpdateInput
  name: String
}

input SolarPanelRelateToOneForUpdateInput {
  create: SolarPanelCreateInput
  connect: SolarPanelWhereUniqueInput
  disconnect: Boolean
}

input InstallerSolarPanelUpdateArgs {
  where: InstallerSolarPanelWhereUniqueInput!
  data: InstallerSolarPanelUpdateInput!
}

input InstallerSolarPanelCreateInput {
  installer: InstallerRelateToOneForCreateInput
  solarPanel: SolarPanelRelateToOneForCreateInput
  cost: Float
  warranty: Int
  warrantyClaims: Float
  image: MediaRelateToOneForCreateInput
  name: String
}

input SolarPanelRelateToOneForCreateInput {
  create: SolarPanelCreateInput
  connect: SolarPanelWhereUniqueInput
}

type InstallerBattery {
  id: ID!
  installer: Installer
  battery: Battery
  cost: Float
  warranty: Int
  warrantyClaims: Float
  image: Media
  name: String
}

input InstallerBatteryWhereUniqueInput {
  id: ID
}

input InstallerBatteryWhereInput {
  AND: [InstallerBatteryWhereInput!]
  OR: [InstallerBatteryWhereInput!]
  NOT: [InstallerBatteryWhereInput!]
  id: IDFilter
  installer: InstallerWhereInput
  battery: BatteryWhereInput
  cost: FloatFilter
  warranty: IntFilter
  warrantyClaims: FloatFilter
  image: MediaWhereInput
  name: StringFilter
}

input InstallerBatteryOrderByInput {
  id: OrderDirection
  cost: OrderDirection
  warranty: OrderDirection
  warrantyClaims: OrderDirection
  name: OrderDirection
}

input InstallerBatteryUpdateInput {
  installer: InstallerRelateToOneForUpdateInput
  battery: BatteryRelateToOneForUpdateInput
  cost: Float
  warranty: Int
  warrantyClaims: Float
  image: MediaRelateToOneForUpdateInput
  name: String
}

input BatteryRelateToOneForUpdateInput {
  create: BatteryCreateInput
  connect: BatteryWhereUniqueInput
  disconnect: Boolean
}

input InstallerBatteryUpdateArgs {
  where: InstallerBatteryWhereUniqueInput!
  data: InstallerBatteryUpdateInput!
}

input InstallerBatteryCreateInput {
  installer: InstallerRelateToOneForCreateInput
  battery: BatteryRelateToOneForCreateInput
  cost: Float
  warranty: Int
  warrantyClaims: Float
  image: MediaRelateToOneForCreateInput
  name: String
}

input BatteryRelateToOneForCreateInput {
  create: BatteryCreateInput
  connect: BatteryWhereUniqueInput
}

type InstallerZone {
  id: ID!
  title: String
  state: State
  postcodes: String
  addedCostDifference: Int
  installer: Installer
}

input InstallerZoneWhereUniqueInput {
  id: ID
}

input InstallerZoneWhereInput {
  AND: [InstallerZoneWhereInput!]
  OR: [InstallerZoneWhereInput!]
  NOT: [InstallerZoneWhereInput!]
  id: IDFilter
  title: StringFilter
  state: StateWhereInput
  postcodes: StringFilter
  addedCostDifference: IntFilter
  installer: InstallerWhereInput
}

input InstallerZoneOrderByInput {
  id: OrderDirection
  title: OrderDirection
  postcodes: OrderDirection
  addedCostDifference: OrderDirection
}

input InstallerZoneUpdateInput {
  title: String
  state: StateRelateToOneForUpdateInput
  postcodes: String
  addedCostDifference: Int
  installer: InstallerRelateToOneForUpdateInput
}

input InstallerZoneUpdateArgs {
  where: InstallerZoneWhereUniqueInput!
  data: InstallerZoneUpdateInput!
}

input InstallerZoneCreateInput {
  title: String
  state: StateRelateToOneForCreateInput
  postcodes: String
  addedCostDifference: Int
  installer: InstallerRelateToOneForCreateInput
}

type Inverter {
  id: ID!
  manufacturer: Manufacturer
  modelNumber: String
  series: String
  type: String
  powerRating: Float
  maxEfficiency: Float
  outerDimensions: String
  weight: Float
  countryOfManufacturing: String
  warranty: Int
  warrantyClaims: Float
  totalMPPT: Int
  ipRating: Float
  detailsType: String
  details: String
  detailsDoc: Media
  approveDate: CalendarDay
  expiryDate: CalendarDay
}

input InverterWhereUniqueInput {
  id: ID
  modelNumber: String
}

input InverterWhereInput {
  AND: [InverterWhereInput!]
  OR: [InverterWhereInput!]
  NOT: [InverterWhereInput!]
  id: IDFilter
  manufacturer: ManufacturerWhereInput
  modelNumber: StringFilter
  series: StringFilter
  type: StringFilter
  powerRating: FloatNullableFilter
  maxEfficiency: FloatNullableFilter
  outerDimensions: StringFilter
  weight: FloatNullableFilter
  countryOfManufacturing: StringFilter
  warranty: IntNullableFilter
  warrantyClaims: FloatNullableFilter
  totalMPPT: IntNullableFilter
  ipRating: FloatNullableFilter
  detailsType: StringNullableFilter
  details: StringFilter
  detailsDoc: MediaWhereInput
  approveDate: CalendarDayFilter
  expiryDate: CalendarDayFilter
}

input InverterOrderByInput {
  id: OrderDirection
  modelNumber: OrderDirection
  series: OrderDirection
  type: OrderDirection
  powerRating: OrderDirection
  maxEfficiency: OrderDirection
  outerDimensions: OrderDirection
  weight: OrderDirection
  countryOfManufacturing: OrderDirection
  warranty: OrderDirection
  warrantyClaims: OrderDirection
  totalMPPT: OrderDirection
  ipRating: OrderDirection
  detailsType: OrderDirection
  details: OrderDirection
  approveDate: OrderDirection
  expiryDate: OrderDirection
}

input InverterUpdateInput {
  manufacturer: ManufacturerRelateToOneForUpdateInput
  modelNumber: String
  series: String
  type: String
  powerRating: Float
  maxEfficiency: Float
  outerDimensions: String
  weight: Float
  countryOfManufacturing: String
  warranty: Int
  warrantyClaims: Float
  totalMPPT: Int
  ipRating: Float
  detailsType: String
  details: String
  detailsDoc: MediaRelateToOneForUpdateInput
  approveDate: CalendarDay
  expiryDate: CalendarDay
}

input InverterUpdateArgs {
  where: InverterWhereUniqueInput!
  data: InverterUpdateInput!
}

input InverterCreateInput {
  manufacturer: ManufacturerRelateToOneForCreateInput
  modelNumber: String
  series: String
  type: String
  powerRating: Float
  maxEfficiency: Float
  outerDimensions: String
  weight: Float
  countryOfManufacturing: String
  warranty: Int
  warrantyClaims: Float
  totalMPPT: Int
  ipRating: Float
  detailsType: String
  details: String
  detailsDoc: MediaRelateToOneForCreateInput
  approveDate: CalendarDay
  expiryDate: CalendarDay
}

type SolarBundle {
  id: ID!
  name: String
  bundleStatus: Boolean
  energyPlanIncluded: Boolean
  energyPlanName: String
  subscriptionIncluded: Boolean
  durationMonths: Float
  costPerMonth: Float
  installer: Installer
  installerPanel: InstallerSolarPanel
  installerInverter: InstallerInverter
  installerBattery: InstallerBattery
  totalCost: Float
  stcRebate: Float
  capacity: Float
  numberOfPanels: Int
  areaNeeded: Float
  features(where: BundleFeatureWhereInput! = {}, orderBy: [BundleFeatureOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BundleFeatureWhereUniqueInput): [BundleFeature!]
  featuresCount(where: BundleFeatureWhereInput! = {}): Int
}

input SolarBundleWhereUniqueInput {
  id: ID
}

input SolarBundleWhereInput {
  AND: [SolarBundleWhereInput!]
  OR: [SolarBundleWhereInput!]
  NOT: [SolarBundleWhereInput!]
  id: IDFilter
  name: StringFilter
  bundleStatus: BooleanFilter
  energyPlanIncluded: BooleanFilter
  energyPlanName: StringFilter
  subscriptionIncluded: BooleanFilter
  durationMonths: FloatNullableFilter
  costPerMonth: FloatNullableFilter
  installer: InstallerWhereInput
  installerPanel: InstallerSolarPanelWhereInput
  installerInverter: InstallerInverterWhereInput
  installerBattery: InstallerBatteryWhereInput
  totalCost: FloatNullableFilter
  stcRebate: FloatNullableFilter
  capacity: FloatNullableFilter
  numberOfPanels: IntNullableFilter
  areaNeeded: FloatNullableFilter
  features: BundleFeatureManyRelationFilter
}

input BundleFeatureManyRelationFilter {
  every: BundleFeatureWhereInput
  some: BundleFeatureWhereInput
  none: BundleFeatureWhereInput
}

input SolarBundleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  bundleStatus: OrderDirection
  energyPlanIncluded: OrderDirection
  energyPlanName: OrderDirection
  subscriptionIncluded: OrderDirection
  durationMonths: OrderDirection
  costPerMonth: OrderDirection
  totalCost: OrderDirection
  stcRebate: OrderDirection
  capacity: OrderDirection
  numberOfPanels: OrderDirection
  areaNeeded: OrderDirection
}

input SolarBundleUpdateInput {
  name: String
  bundleStatus: Boolean
  energyPlanIncluded: Boolean
  energyPlanName: String
  subscriptionIncluded: Boolean
  durationMonths: Float
  costPerMonth: Float
  installer: InstallerRelateToOneForUpdateInput
  installerPanel: InstallerSolarPanelRelateToOneForUpdateInput
  installerInverter: InstallerInverterRelateToOneForUpdateInput
  installerBattery: InstallerBatteryRelateToOneForUpdateInput
  totalCost: Float
  stcRebate: Float
  capacity: Float
  numberOfPanels: Int
  areaNeeded: Float
  features: BundleFeatureRelateToManyForUpdateInput
}

input InstallerSolarPanelRelateToOneForUpdateInput {
  create: InstallerSolarPanelCreateInput
  connect: InstallerSolarPanelWhereUniqueInput
  disconnect: Boolean
}

input InstallerInverterRelateToOneForUpdateInput {
  create: InstallerInverterCreateInput
  connect: InstallerInverterWhereUniqueInput
  disconnect: Boolean
}

input InstallerBatteryRelateToOneForUpdateInput {
  create: InstallerBatteryCreateInput
  connect: InstallerBatteryWhereUniqueInput
  disconnect: Boolean
}

input BundleFeatureRelateToManyForUpdateInput {
  disconnect: [BundleFeatureWhereUniqueInput!]
  set: [BundleFeatureWhereUniqueInput!]
  create: [BundleFeatureCreateInput!]
  connect: [BundleFeatureWhereUniqueInput!]
}

input SolarBundleUpdateArgs {
  where: SolarBundleWhereUniqueInput!
  data: SolarBundleUpdateInput!
}

input SolarBundleCreateInput {
  name: String
  bundleStatus: Boolean
  energyPlanIncluded: Boolean
  energyPlanName: String
  subscriptionIncluded: Boolean
  durationMonths: Float
  costPerMonth: Float
  installer: InstallerRelateToOneForCreateInput
  installerPanel: InstallerSolarPanelRelateToOneForCreateInput
  installerInverter: InstallerInverterRelateToOneForCreateInput
  installerBattery: InstallerBatteryRelateToOneForCreateInput
  totalCost: Float
  stcRebate: Float
  capacity: Float
  numberOfPanels: Int
  areaNeeded: Float
  features: BundleFeatureRelateToManyForCreateInput
}

input InstallerSolarPanelRelateToOneForCreateInput {
  create: InstallerSolarPanelCreateInput
  connect: InstallerSolarPanelWhereUniqueInput
}

input InstallerInverterRelateToOneForCreateInput {
  create: InstallerInverterCreateInput
  connect: InstallerInverterWhereUniqueInput
}

input InstallerBatteryRelateToOneForCreateInput {
  create: InstallerBatteryCreateInput
  connect: InstallerBatteryWhereUniqueInput
}

input BundleFeatureRelateToManyForCreateInput {
  create: [BundleFeatureCreateInput!]
  connect: [BundleFeatureWhereUniqueInput!]
}

type SolarAddon {
  id: ID!
  name: String
  detailsType: String
  details: String
  detailsDoc: Media
  features(where: AddonFeatureWhereInput! = {}, orderBy: [AddonFeatureOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddonFeatureWhereUniqueInput): [AddonFeature!]
  featuresCount(where: AddonFeatureWhereInput! = {}): Int
}

input SolarAddonWhereUniqueInput {
  id: ID
  name: String
}

input SolarAddonWhereInput {
  AND: [SolarAddonWhereInput!]
  OR: [SolarAddonWhereInput!]
  NOT: [SolarAddonWhereInput!]
  id: IDFilter
  name: StringFilter
  detailsType: StringNullableFilter
  details: StringFilter
  detailsDoc: MediaWhereInput
  features: AddonFeatureManyRelationFilter
}

input AddonFeatureManyRelationFilter {
  every: AddonFeatureWhereInput
  some: AddonFeatureWhereInput
  none: AddonFeatureWhereInput
}

input SolarAddonOrderByInput {
  id: OrderDirection
  name: OrderDirection
  detailsType: OrderDirection
  details: OrderDirection
}

input SolarAddonUpdateInput {
  name: String
  detailsType: String
  details: String
  detailsDoc: MediaRelateToOneForUpdateInput
  features: AddonFeatureRelateToManyForUpdateInput
}

input AddonFeatureRelateToManyForUpdateInput {
  disconnect: [AddonFeatureWhereUniqueInput!]
  set: [AddonFeatureWhereUniqueInput!]
  create: [AddonFeatureCreateInput!]
  connect: [AddonFeatureWhereUniqueInput!]
}

input SolarAddonUpdateArgs {
  where: SolarAddonWhereUniqueInput!
  data: SolarAddonUpdateInput!
}

input SolarAddonCreateInput {
  name: String
  detailsType: String
  details: String
  detailsDoc: MediaRelateToOneForCreateInput
  features: AddonFeatureRelateToManyForCreateInput
}

input AddonFeatureRelateToManyForCreateInput {
  create: [AddonFeatureCreateInput!]
  connect: [AddonFeatureWhereUniqueInput!]
}

type SolarAffiliate {
  id: ID!
  capacityRangeDiff: Decimal
  affiliate: Affiliate
}

input SolarAffiliateWhereUniqueInput {
  id: ID
}

input SolarAffiliateWhereInput {
  AND: [SolarAffiliateWhereInput!]
  OR: [SolarAffiliateWhereInput!]
  NOT: [SolarAffiliateWhereInput!]
  id: IDFilter
  capacityRangeDiff: DecimalFilter
  affiliate: AffiliateWhereInput
}

input SolarAffiliateOrderByInput {
  id: OrderDirection
  capacityRangeDiff: OrderDirection
}

input SolarAffiliateUpdateInput {
  capacityRangeDiff: Decimal
  affiliate: AffiliateRelateToOneForUpdateInput
}

input SolarAffiliateUpdateArgs {
  where: SolarAffiliateWhereUniqueInput!
  data: SolarAffiliateUpdateInput!
}

input SolarAffiliateCreateInput {
  capacityRangeDiff: Decimal
  affiliate: AffiliateRelateToOneForCreateInput
}

type SolarPanel {
  id: ID!
  manufacturer: Manufacturer
  modelNumber: String
  series: String
  solarCellType: String
  capacity: Float
  efficiency: Float
  outerDimensions: String
  weight: Float
  countryOfManufacturing: String
  warranty: Int
  warrantyClaims: Float
  totalPanels: Int
  ipRating: Float
  detailsType: String
  details: String
  detailsDoc: Media
  approveDate: CalendarDay
  expiryDate: CalendarDay
}

input SolarPanelWhereUniqueInput {
  id: ID
  modelNumber: String
}

input SolarPanelWhereInput {
  AND: [SolarPanelWhereInput!]
  OR: [SolarPanelWhereInput!]
  NOT: [SolarPanelWhereInput!]
  id: IDFilter
  manufacturer: ManufacturerWhereInput
  modelNumber: StringFilter
  series: StringFilter
  solarCellType: StringFilter
  capacity: FloatNullableFilter
  efficiency: FloatNullableFilter
  outerDimensions: StringFilter
  weight: FloatNullableFilter
  countryOfManufacturing: StringFilter
  warranty: IntNullableFilter
  warrantyClaims: FloatNullableFilter
  totalPanels: IntNullableFilter
  ipRating: FloatNullableFilter
  detailsType: StringNullableFilter
  details: StringFilter
  detailsDoc: MediaWhereInput
  approveDate: CalendarDayFilter
  expiryDate: CalendarDayFilter
}

input SolarPanelOrderByInput {
  id: OrderDirection
  modelNumber: OrderDirection
  series: OrderDirection
  solarCellType: OrderDirection
  capacity: OrderDirection
  efficiency: OrderDirection
  outerDimensions: OrderDirection
  weight: OrderDirection
  countryOfManufacturing: OrderDirection
  warranty: OrderDirection
  warrantyClaims: OrderDirection
  totalPanels: OrderDirection
  ipRating: OrderDirection
  detailsType: OrderDirection
  details: OrderDirection
  approveDate: OrderDirection
  expiryDate: OrderDirection
}

input SolarPanelUpdateInput {
  manufacturer: ManufacturerRelateToOneForUpdateInput
  modelNumber: String
  series: String
  solarCellType: String
  capacity: Float
  efficiency: Float
  outerDimensions: String
  weight: Float
  countryOfManufacturing: String
  warranty: Int
  warrantyClaims: Float
  totalPanels: Int
  ipRating: Float
  detailsType: String
  details: String
  detailsDoc: MediaRelateToOneForUpdateInput
  approveDate: CalendarDay
  expiryDate: CalendarDay
}

input SolarPanelUpdateArgs {
  where: SolarPanelWhereUniqueInput!
  data: SolarPanelUpdateInput!
}

input SolarPanelCreateInput {
  manufacturer: ManufacturerRelateToOneForCreateInput
  modelNumber: String
  series: String
  solarCellType: String
  capacity: Float
  efficiency: Float
  outerDimensions: String
  weight: Float
  countryOfManufacturing: String
  warranty: Int
  warrantyClaims: Float
  totalPanels: Int
  ipRating: Float
  detailsType: String
  details: String
  detailsDoc: MediaRelateToOneForCreateInput
  approveDate: CalendarDay
  expiryDate: CalendarDay
}

type BundleFeature {
  id: ID!
  description: String
}

input BundleFeatureWhereUniqueInput {
  id: ID
  description: String
}

input BundleFeatureWhereInput {
  AND: [BundleFeatureWhereInput!]
  OR: [BundleFeatureWhereInput!]
  NOT: [BundleFeatureWhereInput!]
  id: IDFilter
  description: StringFilter
}

input BundleFeatureOrderByInput {
  id: OrderDirection
  description: OrderDirection
}

input BundleFeatureUpdateInput {
  description: String
}

input BundleFeatureUpdateArgs {
  where: BundleFeatureWhereUniqueInput!
  data: BundleFeatureUpdateInput!
}

input BundleFeatureCreateInput {
  description: String
}

type InstallerAddon {
  id: ID!
  name: String
  cost: Float
  addon: SolarAddon
  image: Media
  installer: Installer
}

input InstallerAddonWhereUniqueInput {
  id: ID
}

input InstallerAddonWhereInput {
  AND: [InstallerAddonWhereInput!]
  OR: [InstallerAddonWhereInput!]
  NOT: [InstallerAddonWhereInput!]
  id: IDFilter
  name: StringFilter
  cost: FloatNullableFilter
  addon: SolarAddonWhereInput
  image: MediaWhereInput
  installer: InstallerWhereInput
}

input InstallerAddonOrderByInput {
  id: OrderDirection
  name: OrderDirection
  cost: OrderDirection
}

input InstallerAddonUpdateInput {
  name: String
  cost: Float
  addon: SolarAddonRelateToOneForUpdateInput
  image: MediaRelateToOneForUpdateInput
  installer: InstallerRelateToOneForUpdateInput
}

input SolarAddonRelateToOneForUpdateInput {
  create: SolarAddonCreateInput
  connect: SolarAddonWhereUniqueInput
  disconnect: Boolean
}

input InstallerAddonUpdateArgs {
  where: InstallerAddonWhereUniqueInput!
  data: InstallerAddonUpdateInput!
}

input InstallerAddonCreateInput {
  name: String
  cost: Float
  addon: SolarAddonRelateToOneForCreateInput
  image: MediaRelateToOneForCreateInput
  installer: InstallerRelateToOneForCreateInput
}

input SolarAddonRelateToOneForCreateInput {
  create: SolarAddonCreateInput
  connect: SolarAddonWhereUniqueInput
}

type StateWiseRebate {
  id: ID!
  name: String
  state: State
  rebateType: String
  amount: Float
  condition: String
}

input StateWiseRebateWhereUniqueInput {
  id: ID
}

input StateWiseRebateWhereInput {
  AND: [StateWiseRebateWhereInput!]
  OR: [StateWiseRebateWhereInput!]
  NOT: [StateWiseRebateWhereInput!]
  id: IDFilter
  name: StringFilter
  state: StateWhereInput
  rebateType: StringFilter
  amount: FloatFilter
  condition: StringFilter
}

input StateWiseRebateOrderByInput {
  id: OrderDirection
  name: OrderDirection
  rebateType: OrderDirection
  amount: OrderDirection
  condition: OrderDirection
}

input StateWiseRebateUpdateInput {
  name: String
  state: StateRelateToOneForUpdateInput
  rebateType: String
  amount: Float
  condition: String
}

input StateWiseRebateUpdateArgs {
  where: StateWiseRebateWhereUniqueInput!
  data: StateWiseRebateUpdateInput!
}

input StateWiseRebateCreateInput {
  name: String
  state: StateRelateToOneForCreateInput
  rebateType: String
  amount: Float
  condition: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAffiliate(data: AffiliateCreateInput!): Affiliate
  createAffiliates(data: [AffiliateCreateInput!]!): [Affiliate]
  updateAffiliate(where: AffiliateWhereUniqueInput!, data: AffiliateUpdateInput!): Affiliate
  updateAffiliates(data: [AffiliateUpdateArgs!]!): [Affiliate]
  deleteAffiliate(where: AffiliateWhereUniqueInput!): Affiliate
  deleteAffiliates(where: [AffiliateWhereUniqueInput!]!): [Affiliate]
  createAuditLog(data: AuditLogCreateInput!): AuditLog
  createAuditLogs(data: [AuditLogCreateInput!]!): [AuditLog]
  updateAuditLog(where: AuditLogWhereUniqueInput!, data: AuditLogUpdateInput!): AuditLog
  updateAuditLogs(data: [AuditLogUpdateArgs!]!): [AuditLog]
  deleteAuditLog(where: AuditLogWhereUniqueInput!): AuditLog
  deleteAuditLogs(where: [AuditLogWhereUniqueInput!]!): [AuditLog]
  createCsSite(data: CsSiteCreateInput!): CsSite
  createCsSites(data: [CsSiteCreateInput!]!): [CsSite]
  updateCsSite(where: CsSiteWhereUniqueInput!, data: CsSiteUpdateInput!): CsSite
  updateCsSites(data: [CsSiteUpdateArgs!]!): [CsSite]
  deleteCsSite(where: CsSiteWhereUniqueInput!): CsSite
  deleteCsSites(where: [CsSiteWhereUniqueInput!]!): [CsSite]
  createDialerList(data: DialerListCreateInput!): DialerList
  createDialerLists(data: [DialerListCreateInput!]!): [DialerList]
  updateDialerList(where: DialerListWhereUniqueInput!, data: DialerListUpdateInput!): DialerList
  updateDialerLists(data: [DialerListUpdateArgs!]!): [DialerList]
  deleteDialerList(where: DialerListWhereUniqueInput!): DialerList
  deleteDialerLists(where: [DialerListWhereUniqueInput!]!): [DialerList]
  createMedia(data: MediaCreateInput!): Media
  createMediaFiles(data: [MediaCreateInput!]!): [Media]
  updateMedia(where: MediaWhereUniqueInput!, data: MediaUpdateInput!): Media
  updateMediaFiles(data: [MediaUpdateArgs!]!): [Media]
  deleteMedia(where: MediaWhereUniqueInput!): Media
  deleteMediaFiles(where: [MediaWhereUniqueInput!]!): [Media]
  createMember(data: MemberCreateInput!): Member
  createMembers(data: [MemberCreateInput!]!): [Member]
  updateMember(where: MemberWhereUniqueInput!, data: MemberUpdateInput!): Member
  updateMembers(data: [MemberUpdateArgs!]!): [Member]
  deleteMember(where: MemberWhereUniqueInput!): Member
  deleteMembers(where: [MemberWhereUniqueInput!]!): [Member]
  createPasswordSetting(data: PasswordSettingCreateInput!): PasswordSetting
  createPasswordSettings(data: [PasswordSettingCreateInput!]!): [PasswordSetting]
  updatePasswordSetting(where: PasswordSettingWhereUniqueInput!, data: PasswordSettingUpdateInput!): PasswordSetting
  updatePasswordSettings(data: [PasswordSettingUpdateArgs!]!): [PasswordSetting]
  deletePasswordSetting(where: PasswordSettingWhereUniqueInput!): PasswordSetting
  deletePasswordSettings(where: [PasswordSettingWhereUniqueInput!]!): [PasswordSetting]
  createScript(data: ScriptCreateInput!): Script
  createScripts(data: [ScriptCreateInput!]!): [Script]
  updateScript(where: ScriptWhereUniqueInput!, data: ScriptUpdateInput!): Script
  updateScripts(data: [ScriptUpdateArgs!]!): [Script]
  deleteScript(where: ScriptWhereUniqueInput!): Script
  deleteScripts(where: [ScriptWhereUniqueInput!]!): [Script]
  createState(data: StateCreateInput!): State
  createStates(data: [StateCreateInput!]!): [State]
  updateState(where: StateWhereUniqueInput!, data: StateUpdateInput!): State
  updateStates(data: [StateUpdateArgs!]!): [State]
  deleteState(where: StateWhereUniqueInput!): State
  deleteStates(where: [StateWhereUniqueInput!]!): [State]
  createSubAffiliate(data: SubAffiliateCreateInput!): SubAffiliate
  createSubAffiliates(data: [SubAffiliateCreateInput!]!): [SubAffiliate]
  updateSubAffiliate(where: SubAffiliateWhereUniqueInput!, data: SubAffiliateUpdateInput!): SubAffiliate
  updateSubAffiliates(data: [SubAffiliateUpdateArgs!]!): [SubAffiliate]
  deleteSubAffiliate(where: SubAffiliateWhereUniqueInput!): SubAffiliate
  deleteSubAffiliates(where: [SubAffiliateWhereUniqueInput!]!): [SubAffiliate]
  createVertical(data: VerticalCreateInput!): Vertical
  createVerticals(data: [VerticalCreateInput!]!): [Vertical]
  updateVertical(where: VerticalWhereUniqueInput!, data: VerticalUpdateInput!): Vertical
  updateVerticals(data: [VerticalUpdateArgs!]!): [Vertical]
  deleteVertical(where: VerticalWhereUniqueInput!): Vertical
  deleteVerticals(where: [VerticalWhereUniqueInput!]!): [Vertical]
  createBundleFormContainer(data: BundleFormContainerCreateInput!): BundleFormContainer
  createBundleFormContainers(data: [BundleFormContainerCreateInput!]!): [BundleFormContainer]
  updateBundleFormContainer(where: BundleFormContainerWhereUniqueInput!, data: BundleFormContainerUpdateInput!): BundleFormContainer
  updateBundleFormContainers(data: [BundleFormContainerUpdateArgs!]!): [BundleFormContainer]
  deleteBundleFormContainer(where: BundleFormContainerWhereUniqueInput!): BundleFormContainer
  deleteBundleFormContainers(where: [BundleFormContainerWhereUniqueInput!]!): [BundleFormContainer]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRetailerMatrix(data: RetailerMatrixCreateInput!): RetailerMatrix
  createRetailerMatrices(data: [RetailerMatrixCreateInput!]!): [RetailerMatrix]
  updateRetailerMatrix(where: RetailerMatrixWhereUniqueInput!, data: RetailerMatrixUpdateInput!): RetailerMatrix
  updateRetailerMatrices(data: [RetailerMatrixUpdateArgs!]!): [RetailerMatrix]
  deleteRetailerMatrix(where: RetailerMatrixWhereUniqueInput!): RetailerMatrix
  deleteRetailerMatrices(where: [RetailerMatrixWhereUniqueInput!]!): [RetailerMatrix]
  createCheckBoxContent(data: CheckBoxContentCreateInput!): CheckBoxContent
  createCheckBoxContents(data: [CheckBoxContentCreateInput!]!): [CheckBoxContent]
  updateCheckBoxContent(where: CheckBoxContentWhereUniqueInput!, data: CheckBoxContentUpdateInput!): CheckBoxContent
  updateCheckBoxContents(data: [CheckBoxContentUpdateArgs!]!): [CheckBoxContent]
  deleteCheckBoxContent(where: CheckBoxContentWhereUniqueInput!): CheckBoxContent
  deleteCheckBoxContents(where: [CheckBoxContentWhereUniqueInput!]!): [CheckBoxContent]
  createCreditScore(data: CreditScoreCreateInput!): CreditScore
  createCreditScores(data: [CreditScoreCreateInput!]!): [CreditScore]
  updateCreditScore(where: CreditScoreWhereUniqueInput!, data: CreditScoreUpdateInput!): CreditScore
  updateCreditScores(data: [CreditScoreUpdateArgs!]!): [CreditScore]
  deleteCreditScore(where: CreditScoreWhereUniqueInput!): CreditScore
  deleteCreditScores(where: [CreditScoreWhereUniqueInput!]!): [CreditScore]
  createLogo(data: LogoCreateInput!): Logo
  createLogos(data: [LogoCreateInput!]!): [Logo]
  updateLogo(where: LogoWhereUniqueInput!, data: LogoUpdateInput!): Logo
  updateLogos(data: [LogoUpdateArgs!]!): [Logo]
  deleteLogo(where: LogoWhereUniqueInput!): Logo
  deleteLogos(where: [LogoWhereUniqueInput!]!): [Logo]
  createFormComponent(data: FormComponentCreateInput!): FormComponent
  createFormComponents(data: [FormComponentCreateInput!]!): [FormComponent]
  updateFormComponent(where: FormComponentWhereUniqueInput!, data: FormComponentUpdateInput!): FormComponent
  updateFormComponents(data: [FormComponentUpdateArgs!]!): [FormComponent]
  deleteFormComponent(where: FormComponentWhereUniqueInput!): FormComponent
  deleteFormComponents(where: [FormComponentWhereUniqueInput!]!): [FormComponent]
  createFormField(data: FormFieldCreateInput!): FormField
  createFormFields(data: [FormFieldCreateInput!]!): [FormField]
  updateFormField(where: FormFieldWhereUniqueInput!, data: FormFieldUpdateInput!): FormField
  updateFormFields(data: [FormFieldUpdateArgs!]!): [FormField]
  deleteFormField(where: FormFieldWhereUniqueInput!): FormField
  deleteFormFields(where: [FormFieldWhereUniqueInput!]!): [FormField]
  createFormOption(data: FormOptionCreateInput!): FormOption
  createFormOptions(data: [FormOptionCreateInput!]!): [FormOption]
  updateFormOption(where: FormOptionWhereUniqueInput!, data: FormOptionUpdateInput!): FormOption
  updateFormOptions(data: [FormOptionUpdateArgs!]!): [FormOption]
  deleteFormOption(where: FormOptionWhereUniqueInput!): FormOption
  deleteFormOptions(where: [FormOptionWhereUniqueInput!]!): [FormOption]
  createFormValidation(data: FormValidationCreateInput!): FormValidation
  createFormValidations(data: [FormValidationCreateInput!]!): [FormValidation]
  updateFormValidation(where: FormValidationWhereUniqueInput!, data: FormValidationUpdateInput!): FormValidation
  updateFormValidations(data: [FormValidationUpdateArgs!]!): [FormValidation]
  deleteFormValidation(where: FormValidationWhereUniqueInput!): FormValidation
  deleteFormValidations(where: [FormValidationWhereUniqueInput!]!): [FormValidation]
  createIgnoreList(data: IgnoreListCreateInput!): IgnoreList
  createIgnoreLists(data: [IgnoreListCreateInput!]!): [IgnoreList]
  updateIgnoreList(where: IgnoreListWhereUniqueInput!, data: IgnoreListUpdateInput!): IgnoreList
  updateIgnoreLists(data: [IgnoreListUpdateArgs!]!): [IgnoreList]
  deleteIgnoreList(where: IgnoreListWhereUniqueInput!): IgnoreList
  deleteIgnoreLists(where: [IgnoreListWhereUniqueInput!]!): [IgnoreList]
  createIgnoreParameter(data: IgnoreParameterCreateInput!): IgnoreParameter
  createIgnoreParameters(data: [IgnoreParameterCreateInput!]!): [IgnoreParameter]
  updateIgnoreParameter(where: IgnoreParameterWhereUniqueInput!, data: IgnoreParameterUpdateInput!): IgnoreParameter
  updateIgnoreParameters(data: [IgnoreParameterUpdateArgs!]!): [IgnoreParameter]
  deleteIgnoreParameter(where: IgnoreParameterWhereUniqueInput!): IgnoreParameter
  deleteIgnoreParameters(where: [IgnoreParameterWhereUniqueInput!]!): [IgnoreParameter]
  createIgnoreType(data: IgnoreTypeCreateInput!): IgnoreType
  createIgnoreTypes(data: [IgnoreTypeCreateInput!]!): [IgnoreType]
  updateIgnoreType(where: IgnoreTypeWhereUniqueInput!, data: IgnoreTypeUpdateInput!): IgnoreType
  updateIgnoreTypes(data: [IgnoreTypeUpdateArgs!]!): [IgnoreType]
  deleteIgnoreType(where: IgnoreTypeWhereUniqueInput!): IgnoreType
  deleteIgnoreTypes(where: [IgnoreTypeWhereUniqueInput!]!): [IgnoreType]
  createIgnoreDataContent(data: IgnoreDataContentCreateInput!): IgnoreDataContent
  createIgnoreDataContents(data: [IgnoreDataContentCreateInput!]!): [IgnoreDataContent]
  updateIgnoreDataContent(where: IgnoreDataContentWhereUniqueInput!, data: IgnoreDataContentUpdateInput!): IgnoreDataContent
  updateIgnoreDataContents(data: [IgnoreDataContentUpdateArgs!]!): [IgnoreDataContent]
  deleteIgnoreDataContent(where: IgnoreDataContentWhereUniqueInput!): IgnoreDataContent
  deleteIgnoreDataContents(where: [IgnoreDataContentWhereUniqueInput!]!): [IgnoreDataContent]
  createDomain(data: DomainCreateInput!): Domain
  createDomains(data: [DomainCreateInput!]!): [Domain]
  updateDomain(where: DomainWhereUniqueInput!, data: DomainUpdateInput!): Domain
  updateDomains(data: [DomainUpdateArgs!]!): [Domain]
  deleteDomain(where: DomainWhereUniqueInput!): Domain
  deleteDomains(where: [DomainWhereUniqueInput!]!): [Domain]
  createDomainConfig(data: DomainConfigCreateInput!): DomainConfig
  createDomainConfigs(data: [DomainConfigCreateInput!]!): [DomainConfig]
  updateDomainConfig(where: DomainConfigWhereUniqueInput!, data: DomainConfigUpdateInput!): DomainConfig
  updateDomainConfigs(data: [DomainConfigUpdateArgs!]!): [DomainConfig]
  deleteDomainConfig(where: DomainConfigWhereUniqueInput!): DomainConfig
  deleteDomainConfigs(where: [DomainConfigWhereUniqueInput!]!): [DomainConfig]
  createLink(data: LinkCreateInput!): Link
  createLinks(data: [LinkCreateInput!]!): [Link]
  updateLink(where: LinkWhereUniqueInput!, data: LinkUpdateInput!): Link
  updateLinks(data: [LinkUpdateArgs!]!): [Link]
  deleteLink(where: LinkWhereUniqueInput!): Link
  deleteLinks(where: [LinkWhereUniqueInput!]!): [Link]
  createLinkGroup(data: LinkGroupCreateInput!): LinkGroup
  createLinkGroups(data: [LinkGroupCreateInput!]!): [LinkGroup]
  updateLinkGroup(where: LinkGroupWhereUniqueInput!, data: LinkGroupUpdateInput!): LinkGroup
  updateLinkGroups(data: [LinkGroupUpdateArgs!]!): [LinkGroup]
  deleteLinkGroup(where: LinkGroupWhereUniqueInput!): LinkGroup
  deleteLinkGroups(where: [LinkGroupWhereUniqueInput!]!): [LinkGroup]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createPageConfig(data: PageConfigCreateInput!): PageConfig
  createPageConfigs(data: [PageConfigCreateInput!]!): [PageConfig]
  updatePageConfig(where: PageConfigWhereUniqueInput!, data: PageConfigUpdateInput!): PageConfig
  updatePageConfigs(data: [PageConfigUpdateArgs!]!): [PageConfig]
  deletePageConfig(where: PageConfigWhereUniqueInput!): PageConfig
  deletePageConfigs(where: [PageConfigWhereUniqueInput!]!): [PageConfig]
  createRedirect(data: RedirectCreateInput!): Redirect
  createRedirects(data: [RedirectCreateInput!]!): [Redirect]
  updateRedirect(where: RedirectWhereUniqueInput!, data: RedirectUpdateInput!): Redirect
  updateRedirects(data: [RedirectUpdateArgs!]!): [Redirect]
  deleteRedirect(where: RedirectWhereUniqueInput!): Redirect
  deleteRedirects(where: [RedirectWhereUniqueInput!]!): [Redirect]
  createSection(data: SectionCreateInput!): Section
  createSections(data: [SectionCreateInput!]!): [Section]
  updateSection(where: SectionWhereUniqueInput!, data: SectionUpdateInput!): Section
  updateSections(data: [SectionUpdateArgs!]!): [Section]
  deleteSection(where: SectionWhereUniqueInput!): Section
  deleteSections(where: [SectionWhereUniqueInput!]!): [Section]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createWidget(data: WidgetCreateInput!): Widget
  createWidgets(data: [WidgetCreateInput!]!): [Widget]
  updateWidget(where: WidgetWhereUniqueInput!, data: WidgetUpdateInput!): Widget
  updateWidgets(data: [WidgetUpdateArgs!]!): [Widget]
  deleteWidget(where: WidgetWhereUniqueInput!): Widget
  deleteWidgets(where: [WidgetWhereUniqueInput!]!): [Widget]
  createAttribute(data: AttributeCreateInput!): Attribute
  createAttributes(data: [AttributeCreateInput!]!): [Attribute]
  updateAttribute(where: AttributeWhereUniqueInput!, data: AttributeUpdateInput!): Attribute
  updateAttributes(data: [AttributeUpdateArgs!]!): [Attribute]
  deleteAttribute(where: AttributeWhereUniqueInput!): Attribute
  deleteAttributes(where: [AttributeWhereUniqueInput!]!): [Attribute]
  createComponent(data: ComponentCreateInput!): Component
  createComponents(data: [ComponentCreateInput!]!): [Component]
  updateComponent(where: ComponentWhereUniqueInput!, data: ComponentUpdateInput!): Component
  updateComponents(data: [ComponentUpdateArgs!]!): [Component]
  deleteComponent(where: ComponentWhereUniqueInput!): Component
  deleteComponents(where: [ComponentWhereUniqueInput!]!): [Component]
  createContainer(data: ContainerCreateInput!): Container
  createContainers(data: [ContainerCreateInput!]!): [Container]
  updateContainer(where: ContainerWhereUniqueInput!, data: ContainerUpdateInput!): Container
  updateContainers(data: [ContainerUpdateArgs!]!): [Container]
  deleteContainer(where: ContainerWhereUniqueInput!): Container
  deleteContainers(where: [ContainerWhereUniqueInput!]!): [Container]
  createField(data: FieldCreateInput!): Field
  createFields(data: [FieldCreateInput!]!): [Field]
  updateField(where: FieldWhereUniqueInput!, data: FieldUpdateInput!): Field
  updateFields(data: [FieldUpdateArgs!]!): [Field]
  deleteField(where: FieldWhereUniqueInput!): Field
  deleteFields(where: [FieldWhereUniqueInput!]!): [Field]
  createFilter(data: FilterCreateInput!): Filter
  createFilters(data: [FilterCreateInput!]!): [Filter]
  updateFilter(where: FilterWhereUniqueInput!, data: FilterUpdateInput!): Filter
  updateFilters(data: [FilterUpdateArgs!]!): [Filter]
  deleteFilter(where: FilterWhereUniqueInput!): Filter
  deleteFilters(where: [FilterWhereUniqueInput!]!): [Filter]
  createCustomAttribute(data: CustomAttributeCreateInput!): CustomAttribute
  createCustomAttributes(data: [CustomAttributeCreateInput!]!): [CustomAttribute]
  updateCustomAttribute(where: CustomAttributeWhereUniqueInput!, data: CustomAttributeUpdateInput!): CustomAttribute
  updateCustomAttributes(data: [CustomAttributeUpdateArgs!]!): [CustomAttribute]
  deleteCustomAttribute(where: CustomAttributeWhereUniqueInput!): CustomAttribute
  deleteCustomAttributes(where: [CustomAttributeWhereUniqueInput!]!): [CustomAttribute]
  createUploadCategory(data: UploadCategoryCreateInput!): UploadCategory
  createUploadCategories(data: [UploadCategoryCreateInput!]!): [UploadCategory]
  updateUploadCategory(where: UploadCategoryWhereUniqueInput!, data: UploadCategoryUpdateInput!): UploadCategory
  updateUploadCategories(data: [UploadCategoryUpdateArgs!]!): [UploadCategory]
  deleteUploadCategory(where: UploadCategoryWhereUniqueInput!): UploadCategory
  deleteUploadCategories(where: [UploadCategoryWhereUniqueInput!]!): [UploadCategory]
  createUploadDocument(data: UploadDocumentCreateInput!): UploadDocument
  createUploadDocuments(data: [UploadDocumentCreateInput!]!): [UploadDocument]
  updateUploadDocument(where: UploadDocumentWhereUniqueInput!, data: UploadDocumentUpdateInput!): UploadDocument
  updateUploadDocuments(data: [UploadDocumentUpdateArgs!]!): [UploadDocument]
  deleteUploadDocument(where: UploadDocumentWhereUniqueInput!): UploadDocument
  deleteUploadDocuments(where: [UploadDocumentWhereUniqueInput!]!): [UploadDocument]
  createGenericProvider(data: GenericProviderCreateInput!): GenericProvider
  createGenericProviders(data: [GenericProviderCreateInput!]!): [GenericProvider]
  updateGenericProvider(where: GenericProviderWhereUniqueInput!, data: GenericProviderUpdateInput!): GenericProvider
  updateGenericProviders(data: [GenericProviderUpdateArgs!]!): [GenericProvider]
  deleteGenericProvider(where: GenericProviderWhereUniqueInput!): GenericProvider
  deleteGenericProviders(where: [GenericProviderWhereUniqueInput!]!): [GenericProvider]
  createGenericPlan(data: GenericPlanCreateInput!): GenericPlan
  createGenericPlans(data: [GenericPlanCreateInput!]!): [GenericPlan]
  updateGenericPlan(where: GenericPlanWhereUniqueInput!, data: GenericPlanUpdateInput!): GenericPlan
  updateGenericPlans(data: [GenericPlanUpdateArgs!]!): [GenericPlan]
  deleteGenericPlan(where: GenericPlanWhereUniqueInput!): GenericPlan
  deleteGenericPlans(where: [GenericPlanWhereUniqueInput!]!): [GenericPlan]
  createGenericPlanField(data: GenericPlanFieldCreateInput!): GenericPlanField
  createGenericPlanFields(data: [GenericPlanFieldCreateInput!]!): [GenericPlanField]
  updateGenericPlanField(where: GenericPlanFieldWhereUniqueInput!, data: GenericPlanFieldUpdateInput!): GenericPlanField
  updateGenericPlanFields(data: [GenericPlanFieldUpdateArgs!]!): [GenericPlanField]
  deleteGenericPlanField(where: GenericPlanFieldWhereUniqueInput!): GenericPlanField
  deleteGenericPlanFields(where: [GenericPlanFieldWhereUniqueInput!]!): [GenericPlanField]
  createGenericAddon(data: GenericAddonCreateInput!): GenericAddon
  createGenericAddons(data: [GenericAddonCreateInput!]!): [GenericAddon]
  updateGenericAddon(where: GenericAddonWhereUniqueInput!, data: GenericAddonUpdateInput!): GenericAddon
  updateGenericAddons(data: [GenericAddonUpdateArgs!]!): [GenericAddon]
  deleteGenericAddon(where: GenericAddonWhereUniqueInput!): GenericAddon
  deleteGenericAddons(where: [GenericAddonWhereUniqueInput!]!): [GenericAddon]
  createAddon(data: AddonCreateInput!): Addon
  createAddons(data: [AddonCreateInput!]!): [Addon]
  updateAddon(where: AddonWhereUniqueInput!, data: AddonUpdateInput!): Addon
  updateAddons(data: [AddonUpdateArgs!]!): [Addon]
  deleteAddon(where: AddonWhereUniqueInput!): Addon
  deleteAddons(where: [AddonWhereUniqueInput!]!): [Addon]
  createAddonField(data: AddonFieldCreateInput!): AddonField
  createAddonFields(data: [AddonFieldCreateInput!]!): [AddonField]
  updateAddonField(where: AddonFieldWhereUniqueInput!, data: AddonFieldUpdateInput!): AddonField
  updateAddonFields(data: [AddonFieldUpdateArgs!]!): [AddonField]
  deleteAddonField(where: AddonFieldWhereUniqueInput!): AddonField
  deleteAddonFields(where: [AddonFieldWhereUniqueInput!]!): [AddonField]
  createPlan(data: PlanCreateInput!): Plan
  createPlans(data: [PlanCreateInput!]!): [Plan]
  updatePlan(where: PlanWhereUniqueInput!, data: PlanUpdateInput!): Plan
  updatePlans(data: [PlanUpdateArgs!]!): [Plan]
  deletePlan(where: PlanWhereUniqueInput!): Plan
  deletePlans(where: [PlanWhereUniqueInput!]!): [Plan]
  createProvider(data: ProviderCreateInput!): Provider
  createProviders(data: [ProviderCreateInput!]!): [Provider]
  updateProvider(where: ProviderWhereUniqueInput!, data: ProviderUpdateInput!): Provider
  updateProviders(data: [ProviderUpdateArgs!]!): [Provider]
  deleteProvider(where: ProviderWhereUniqueInput!): Provider
  deleteProviders(where: [ProviderWhereUniqueInput!]!): [Provider]
  createProviderCreditCard(data: ProviderCreditCardCreateInput!): ProviderCreditCard
  createProviderCreditCards(data: [ProviderCreditCardCreateInput!]!): [ProviderCreditCard]
  updateProviderCreditCard(where: ProviderCreditCardWhereUniqueInput!, data: ProviderCreditCardUpdateInput!): ProviderCreditCard
  updateProviderCreditCards(data: [ProviderCreditCardUpdateArgs!]!): [ProviderCreditCard]
  deleteProviderCreditCard(where: ProviderCreditCardWhereUniqueInput!): ProviderCreditCard
  deleteProviderCreditCards(where: [ProviderCreditCardWhereUniqueInput!]!): [ProviderCreditCard]
  createCreditCard(data: CreditCardCreateInput!): CreditCard
  createCreditCards(data: [CreditCardCreateInput!]!): [CreditCard]
  updateCreditCard(where: CreditCardWhereUniqueInput!, data: CreditCardUpdateInput!): CreditCard
  updateCreditCards(data: [CreditCardUpdateArgs!]!): [CreditCard]
  deleteCreditCard(where: CreditCardWhereUniqueInput!): CreditCard
  deleteCreditCards(where: [CreditCardWhereUniqueInput!]!): [CreditCard]
  createCardDetail(data: CardDetailCreateInput!): CardDetail
  createCardDetails(data: [CardDetailCreateInput!]!): [CardDetail]
  updateCardDetail(where: CardDetailWhereUniqueInput!, data: CardDetailUpdateInput!): CardDetail
  updateCardDetails(data: [CardDetailUpdateArgs!]!): [CardDetail]
  deleteCardDetail(where: CardDetailWhereUniqueInput!): CardDetail
  deleteCardDetails(where: [CardDetailWhereUniqueInput!]!): [CardDetail]
  createCardFeature(data: CardFeatureCreateInput!): CardFeature
  createCardFeatures(data: [CardFeatureCreateInput!]!): [CardFeature]
  updateCardFeature(where: CardFeatureWhereUniqueInput!, data: CardFeatureUpdateInput!): CardFeature
  updateCardFeatures(data: [CardFeatureUpdateArgs!]!): [CardFeature]
  deleteCardFeature(where: CardFeatureWhereUniqueInput!): CardFeature
  deleteCardFeatures(where: [CardFeatureWhereUniqueInput!]!): [CardFeature]
  createRate(data: RateCreateInput!): Rate
  createRates(data: [RateCreateInput!]!): [Rate]
  updateRate(where: RateWhereUniqueInput!, data: RateUpdateInput!): Rate
  updateRates(data: [RateUpdateArgs!]!): [Rate]
  deleteRate(where: RateWhereUniqueInput!): Rate
  deleteRates(where: [RateWhereUniqueInput!]!): [Rate]
  createCreditCardFee(data: CreditCardFeeCreateInput!): CreditCardFee
  createCreditCardFees(data: [CreditCardFeeCreateInput!]!): [CreditCardFee]
  updateCreditCardFee(where: CreditCardFeeWhereUniqueInput!, data: CreditCardFeeUpdateInput!): CreditCardFee
  updateCreditCardFees(data: [CreditCardFeeUpdateArgs!]!): [CreditCardFee]
  deleteCreditCardFee(where: CreditCardFeeWhereUniqueInput!): CreditCardFee
  deleteCreditCardFees(where: [CreditCardFeeWhereUniqueInput!]!): [CreditCardFee]
  createCCFormContainer(data: CCFormContainerCreateInput!): CCFormContainer
  createCCFormContainers(data: [CCFormContainerCreateInput!]!): [CCFormContainer]
  updateCCFormContainer(where: CCFormContainerWhereUniqueInput!, data: CCFormContainerUpdateInput!): CCFormContainer
  updateCCFormContainers(data: [CCFormContainerUpdateArgs!]!): [CCFormContainer]
  deleteCCFormContainer(where: CCFormContainerWhereUniqueInput!): CCFormContainer
  deleteCCFormContainers(where: [CCFormContainerWhereUniqueInput!]!): [CCFormContainer]
  createCCPerk(data: CCPerkCreateInput!): CCPerk
  createCCPerks(data: [CCPerkCreateInput!]!): [CCPerk]
  updateCCPerk(where: CCPerkWhereUniqueInput!, data: CCPerkUpdateInput!): CCPerk
  updateCCPerks(data: [CCPerkUpdateArgs!]!): [CCPerk]
  deleteCCPerk(where: CCPerkWhereUniqueInput!): CCPerk
  deleteCCPerks(where: [CCPerkWhereUniqueInput!]!): [CCPerk]
  createRewardProgram(data: RewardProgramCreateInput!): RewardProgram
  createRewardPrograms(data: [RewardProgramCreateInput!]!): [RewardProgram]
  updateRewardProgram(where: RewardProgramWhereUniqueInput!, data: RewardProgramUpdateInput!): RewardProgram
  updateRewardPrograms(data: [RewardProgramUpdateArgs!]!): [RewardProgram]
  deleteRewardProgram(where: RewardProgramWhereUniqueInput!): RewardProgram
  deleteRewardPrograms(where: [RewardProgramWhereUniqueInput!]!): [RewardProgram]
  createCCDocument(data: CCDocumentCreateInput!): CCDocument
  createCCDocuments(data: [CCDocumentCreateInput!]!): [CCDocument]
  updateCCDocument(where: CCDocumentWhereUniqueInput!, data: CCDocumentUpdateInput!): CCDocument
  updateCCDocuments(data: [CCDocumentUpdateArgs!]!): [CCDocument]
  deleteCCDocument(where: CCDocumentWhereUniqueInput!): CCDocument
  deleteCCDocuments(where: [CCDocumentWhereUniqueInput!]!): [CCDocument]
  createBalanceTransfer(data: BalanceTransferCreateInput!): BalanceTransfer
  createBalanceTransfers(data: [BalanceTransferCreateInput!]!): [BalanceTransfer]
  updateBalanceTransfer(where: BalanceTransferWhereUniqueInput!, data: BalanceTransferUpdateInput!): BalanceTransfer
  updateBalanceTransfers(data: [BalanceTransferUpdateArgs!]!): [BalanceTransfer]
  deleteBalanceTransfer(where: BalanceTransferWhereUniqueInput!): BalanceTransfer
  deleteBalanceTransfers(where: [BalanceTransferWhereUniqueInput!]!): [BalanceTransfer]
  createEarnRate(data: EarnRateCreateInput!): EarnRate
  createEarnRates(data: [EarnRateCreateInput!]!): [EarnRate]
  updateEarnRate(where: EarnRateWhereUniqueInput!, data: EarnRateUpdateInput!): EarnRate
  updateEarnRates(data: [EarnRateUpdateArgs!]!): [EarnRate]
  deleteEarnRate(where: EarnRateWhereUniqueInput!): EarnRate
  deleteEarnRates(where: [EarnRateWhereUniqueInput!]!): [EarnRate]
  createOverseasSpend(data: OverseasSpendCreateInput!): OverseasSpend
  createOverseasSpends(data: [OverseasSpendCreateInput!]!): [OverseasSpend]
  updateOverseasSpend(where: OverseasSpendWhereUniqueInput!, data: OverseasSpendUpdateInput!): OverseasSpend
  updateOverseasSpends(data: [OverseasSpendUpdateArgs!]!): [OverseasSpend]
  deleteOverseasSpend(where: OverseasSpendWhereUniqueInput!): OverseasSpend
  deleteOverseasSpends(where: [OverseasSpendWhereUniqueInput!]!): [OverseasSpend]
  createCCEligibility(data: CCEligibilityCreateInput!): CCEligibility
  createCCEligibilities(data: [CCEligibilityCreateInput!]!): [CCEligibility]
  updateCCEligibility(where: CCEligibilityWhereUniqueInput!, data: CCEligibilityUpdateInput!): CCEligibility
  updateCCEligibilities(data: [CCEligibilityUpdateArgs!]!): [CCEligibility]
  deleteCCEligibility(where: CCEligibilityWhereUniqueInput!): CCEligibility
  deleteCCEligibilities(where: [CCEligibilityWhereUniqueInput!]!): [CCEligibility]
  createSpecial(data: SpecialCreateInput!): Special
  createSpecials(data: [SpecialCreateInput!]!): [Special]
  updateSpecial(where: SpecialWhereUniqueInput!, data: SpecialUpdateInput!): Special
  updateSpecials(data: [SpecialUpdateArgs!]!): [Special]
  deleteSpecial(where: SpecialWhereUniqueInput!): Special
  deleteSpecials(where: [SpecialWhereUniqueInput!]!): [Special]
  createReward(data: RewardCreateInput!): Reward
  createRewards(data: [RewardCreateInput!]!): [Reward]
  updateReward(where: RewardWhereUniqueInput!, data: RewardUpdateInput!): Reward
  updateRewards(data: [RewardUpdateArgs!]!): [Reward]
  deleteReward(where: RewardWhereUniqueInput!): Reward
  deleteRewards(where: [RewardWhereUniqueInput!]!): [Reward]
  createAdditionalQuestion(data: AdditionalQuestionCreateInput!): AdditionalQuestion
  createAdditionalQuestions(data: [AdditionalQuestionCreateInput!]!): [AdditionalQuestion]
  updateAdditionalQuestion(where: AdditionalQuestionWhereUniqueInput!, data: AdditionalQuestionUpdateInput!): AdditionalQuestion
  updateAdditionalQuestions(data: [AdditionalQuestionUpdateArgs!]!): [AdditionalQuestion]
  deleteAdditionalQuestion(where: AdditionalQuestionWhereUniqueInput!): AdditionalQuestion
  deleteAdditionalQuestions(where: [AdditionalQuestionWhereUniqueInput!]!): [AdditionalQuestion]
  createCCUploadGroup(data: CCUploadGroupCreateInput!): CCUploadGroup
  createCCUploadGroups(data: [CCUploadGroupCreateInput!]!): [CCUploadGroup]
  updateCCUploadGroup(where: CCUploadGroupWhereUniqueInput!, data: CCUploadGroupUpdateInput!): CCUploadGroup
  updateCCUploadGroups(data: [CCUploadGroupUpdateArgs!]!): [CCUploadGroup]
  deleteCCUploadGroup(where: CCUploadGroupWhereUniqueInput!): CCUploadGroup
  deleteCCUploadGroups(where: [CCUploadGroupWhereUniqueInput!]!): [CCUploadGroup]
  createMirn(data: MirnCreateInput!): Mirn
  createMirns(data: [MirnCreateInput!]!): [Mirn]
  updateMirn(where: MirnWhereUniqueInput!, data: MirnUpdateInput!): Mirn
  updateMirns(data: [MirnUpdateArgs!]!): [Mirn]
  deleteMirn(where: MirnWhereUniqueInput!): Mirn
  deleteMirns(where: [MirnWhereUniqueInput!]!): [Mirn]
  createTariffCode(data: TariffCodeCreateInput!): TariffCode
  createTariffCodes(data: [TariffCodeCreateInput!]!): [TariffCode]
  updateTariffCode(where: TariffCodeWhereUniqueInput!, data: TariffCodeUpdateInput!): TariffCode
  updateTariffCodes(data: [TariffCodeUpdateArgs!]!): [TariffCode]
  deleteTariffCode(where: TariffCodeWhereUniqueInput!): TariffCode
  deleteTariffCodes(where: [TariffCodeWhereUniqueInput!]!): [TariffCode]
  createOpenEnergyBillRule(data: OpenEnergyBillRuleCreateInput!): OpenEnergyBillRule
  createOpenEnergyBillRules(data: [OpenEnergyBillRuleCreateInput!]!): [OpenEnergyBillRule]
  updateOpenEnergyBillRule(where: OpenEnergyBillRuleWhereUniqueInput!, data: OpenEnergyBillRuleUpdateInput!): OpenEnergyBillRule
  updateOpenEnergyBillRules(data: [OpenEnergyBillRuleUpdateArgs!]!): [OpenEnergyBillRule]
  deleteOpenEnergyBillRule(where: OpenEnergyBillRuleWhereUniqueInput!): OpenEnergyBillRule
  deleteOpenEnergyBillRules(where: [OpenEnergyBillRuleWhereUniqueInput!]!): [OpenEnergyBillRule]
  createHIProvider(data: HIProviderCreateInput!): HIProvider
  createHIProviders(data: [HIProviderCreateInput!]!): [HIProvider]
  updateHIProvider(where: HIProviderWhereUniqueInput!, data: HIProviderUpdateInput!): HIProvider
  updateHIProviders(data: [HIProviderUpdateArgs!]!): [HIProvider]
  deleteHIProvider(where: HIProviderWhereUniqueInput!): HIProvider
  deleteHIProviders(where: [HIProviderWhereUniqueInput!]!): [HIProvider]
  createHIFormContainer(data: HIFormContainerCreateInput!): HIFormContainer
  createHIFormContainers(data: [HIFormContainerCreateInput!]!): [HIFormContainer]
  updateHIFormContainer(where: HIFormContainerWhereUniqueInput!, data: HIFormContainerUpdateInput!): HIFormContainer
  updateHIFormContainers(data: [HIFormContainerUpdateArgs!]!): [HIFormContainer]
  deleteHIFormContainer(where: HIFormContainerWhereUniqueInput!): HIFormContainer
  deleteHIFormContainers(where: [HIFormContainerWhereUniqueInput!]!): [HIFormContainer]
  createHIRebate(data: HIRebateCreateInput!): HIRebate
  createHIRebates(data: [HIRebateCreateInput!]!): [HIRebate]
  updateHIRebate(where: HIRebateWhereUniqueInput!, data: HIRebateUpdateInput!): HIRebate
  updateHIRebates(data: [HIRebateUpdateArgs!]!): [HIRebate]
  deleteHIRebate(where: HIRebateWhereUniqueInput!): HIRebate
  deleteHIRebates(where: [HIRebateWhereUniqueInput!]!): [HIRebate]
  createProductTier(data: ProductTierCreateInput!): ProductTier
  createProductTiers(data: [ProductTierCreateInput!]!): [ProductTier]
  updateProductTier(where: ProductTierWhereUniqueInput!, data: ProductTierUpdateInput!): ProductTier
  updateProductTiers(data: [ProductTierUpdateArgs!]!): [ProductTier]
  deleteProductTier(where: ProductTierWhereUniqueInput!): ProductTier
  deleteProductTiers(where: [ProductTierWhereUniqueInput!]!): [ProductTier]
  createHospitalCover(data: HospitalCoverCreateInput!): HospitalCover
  createHospitalCovers(data: [HospitalCoverCreateInput!]!): [HospitalCover]
  updateHospitalCover(where: HospitalCoverWhereUniqueInput!, data: HospitalCoverUpdateInput!): HospitalCover
  updateHospitalCovers(data: [HospitalCoverUpdateArgs!]!): [HospitalCover]
  deleteHospitalCover(where: HospitalCoverWhereUniqueInput!): HospitalCover
  deleteHospitalCovers(where: [HospitalCoverWhereUniqueInput!]!): [HospitalCover]
  createExtrasCover(data: ExtrasCoverCreateInput!): ExtrasCover
  createExtrasCovers(data: [ExtrasCoverCreateInput!]!): [ExtrasCover]
  updateExtrasCover(where: ExtrasCoverWhereUniqueInput!, data: ExtrasCoverUpdateInput!): ExtrasCover
  updateExtrasCovers(data: [ExtrasCoverUpdateArgs!]!): [ExtrasCover]
  deleteExtrasCover(where: ExtrasCoverWhereUniqueInput!): ExtrasCover
  deleteExtrasCovers(where: [ExtrasCoverWhereUniqueInput!]!): [ExtrasCover]
  createPaymentFrequency(data: PaymentFrequencyCreateInput!): PaymentFrequency
  createPaymentFrequencies(data: [PaymentFrequencyCreateInput!]!): [PaymentFrequency]
  updatePaymentFrequency(where: PaymentFrequencyWhereUniqueInput!, data: PaymentFrequencyUpdateInput!): PaymentFrequency
  updatePaymentFrequencies(data: [PaymentFrequencyUpdateArgs!]!): [PaymentFrequency]
  deletePaymentFrequency(where: PaymentFrequencyWhereUniqueInput!): PaymentFrequency
  deletePaymentFrequencies(where: [PaymentFrequencyWhereUniqueInput!]!): [PaymentFrequency]
  createPLProvider(data: PLProviderCreateInput!): PLProvider
  createPLProviders(data: [PLProviderCreateInput!]!): [PLProvider]
  updatePLProvider(where: PLProviderWhereUniqueInput!, data: PLProviderUpdateInput!): PLProvider
  updatePLProviders(data: [PLProviderUpdateArgs!]!): [PLProvider]
  deletePLProvider(where: PLProviderWhereUniqueInput!): PLProvider
  deletePLProviders(where: [PLProviderWhereUniqueInput!]!): [PLProvider]
  createPersonalLoan(data: PersonalLoanCreateInput!): PersonalLoan
  createPersonalLoans(data: [PersonalLoanCreateInput!]!): [PersonalLoan]
  updatePersonalLoan(where: PersonalLoanWhereUniqueInput!, data: PersonalLoanUpdateInput!): PersonalLoan
  updatePersonalLoans(data: [PersonalLoanUpdateArgs!]!): [PersonalLoan]
  deletePersonalLoan(where: PersonalLoanWhereUniqueInput!): PersonalLoan
  deletePersonalLoans(where: [PersonalLoanWhereUniqueInput!]!): [PersonalLoan]
  createPLLoanDetail(data: PLLoanDetailCreateInput!): PLLoanDetail
  createPLLoanDetails(data: [PLLoanDetailCreateInput!]!): [PLLoanDetail]
  updatePLLoanDetail(where: PLLoanDetailWhereUniqueInput!, data: PLLoanDetailUpdateInput!): PLLoanDetail
  updatePLLoanDetails(data: [PLLoanDetailUpdateArgs!]!): [PLLoanDetail]
  deletePLLoanDetail(where: PLLoanDetailWhereUniqueInput!): PLLoanDetail
  deletePLLoanDetails(where: [PLLoanDetailWhereUniqueInput!]!): [PLLoanDetail]
  createPLFeature(data: PLFeatureCreateInput!): PLFeature
  createPLFeatures(data: [PLFeatureCreateInput!]!): [PLFeature]
  updatePLFeature(where: PLFeatureWhereUniqueInput!, data: PLFeatureUpdateInput!): PLFeature
  updatePLFeatures(data: [PLFeatureUpdateArgs!]!): [PLFeature]
  deletePLFeature(where: PLFeatureWhereUniqueInput!): PLFeature
  deletePLFeatures(where: [PLFeatureWhereUniqueInput!]!): [PLFeature]
  createPLFee(data: PLFeeCreateInput!): PLFee
  createPLFees(data: [PLFeeCreateInput!]!): [PLFee]
  updatePLFee(where: PLFeeWhereUniqueInput!, data: PLFeeUpdateInput!): PLFee
  updatePLFees(data: [PLFeeUpdateArgs!]!): [PLFee]
  deletePLFee(where: PLFeeWhereUniqueInput!): PLFee
  deletePLFees(where: [PLFeeWhereUniqueInput!]!): [PLFee]
  createPLPerk(data: PLPerkCreateInput!): PLPerk
  createPLPerks(data: [PLPerkCreateInput!]!): [PLPerk]
  updatePLPerk(where: PLPerkWhereUniqueInput!, data: PLPerkUpdateInput!): PLPerk
  updatePLPerks(data: [PLPerkUpdateArgs!]!): [PLPerk]
  deletePLPerk(where: PLPerkWhereUniqueInput!): PLPerk
  deletePLPerks(where: [PLPerkWhereUniqueInput!]!): [PLPerk]
  createPLDocument(data: PLDocumentCreateInput!): PLDocument
  createPLDocuments(data: [PLDocumentCreateInput!]!): [PLDocument]
  updatePLDocument(where: PLDocumentWhereUniqueInput!, data: PLDocumentUpdateInput!): PLDocument
  updatePLDocuments(data: [PLDocumentUpdateArgs!]!): [PLDocument]
  deletePLDocument(where: PLDocumentWhereUniqueInput!): PLDocument
  deletePLDocuments(where: [PLDocumentWhereUniqueInput!]!): [PLDocument]
  createPLSpecial(data: PLSpecialCreateInput!): PLSpecial
  createPLSpecials(data: [PLSpecialCreateInput!]!): [PLSpecial]
  updatePLSpecial(where: PLSpecialWhereUniqueInput!, data: PLSpecialUpdateInput!): PLSpecial
  updatePLSpecials(data: [PLSpecialUpdateArgs!]!): [PLSpecial]
  deletePLSpecial(where: PLSpecialWhereUniqueInput!): PLSpecial
  deletePLSpecials(where: [PLSpecialWhereUniqueInput!]!): [PLSpecial]
  createPLEligibility(data: PLEligibilityCreateInput!): PLEligibility
  createPLEligibilities(data: [PLEligibilityCreateInput!]!): [PLEligibility]
  updatePLEligibility(where: PLEligibilityWhereUniqueInput!, data: PLEligibilityUpdateInput!): PLEligibility
  updatePLEligibilities(data: [PLEligibilityUpdateArgs!]!): [PLEligibility]
  deletePLEligibility(where: PLEligibilityWhereUniqueInput!): PLEligibility
  deletePLEligibilities(where: [PLEligibilityWhereUniqueInput!]!): [PLEligibility]
  createPLFormContainer(data: PLFormContainerCreateInput!): PLFormContainer
  createPLFormContainers(data: [PLFormContainerCreateInput!]!): [PLFormContainer]
  updatePLFormContainer(where: PLFormContainerWhereUniqueInput!, data: PLFormContainerUpdateInput!): PLFormContainer
  updatePLFormContainers(data: [PLFormContainerUpdateArgs!]!): [PLFormContainer]
  deletePLFormContainer(where: PLFormContainerWhereUniqueInput!): PLFormContainer
  deletePLFormContainers(where: [PLFormContainerWhereUniqueInput!]!): [PLFormContainer]
  createAddonFeature(data: AddonFeatureCreateInput!): AddonFeature
  createAddonFeatures(data: [AddonFeatureCreateInput!]!): [AddonFeature]
  updateAddonFeature(where: AddonFeatureWhereUniqueInput!, data: AddonFeatureUpdateInput!): AddonFeature
  updateAddonFeatures(data: [AddonFeatureUpdateArgs!]!): [AddonFeature]
  deleteAddonFeature(where: AddonFeatureWhereUniqueInput!): AddonFeature
  deleteAddonFeatures(where: [AddonFeatureWhereUniqueInput!]!): [AddonFeature]
  createBattery(data: BatteryCreateInput!): Battery
  createBatteries(data: [BatteryCreateInput!]!): [Battery]
  updateBattery(where: BatteryWhereUniqueInput!, data: BatteryUpdateInput!): Battery
  updateBatteries(data: [BatteryUpdateArgs!]!): [Battery]
  deleteBattery(where: BatteryWhereUniqueInput!): Battery
  deleteBatteries(where: [BatteryWhereUniqueInput!]!): [Battery]
  createManufacturer(data: ManufacturerCreateInput!): Manufacturer
  createManufacturers(data: [ManufacturerCreateInput!]!): [Manufacturer]
  updateManufacturer(where: ManufacturerWhereUniqueInput!, data: ManufacturerUpdateInput!): Manufacturer
  updateManufacturers(data: [ManufacturerUpdateArgs!]!): [Manufacturer]
  deleteManufacturer(where: ManufacturerWhereUniqueInput!): Manufacturer
  deleteManufacturers(where: [ManufacturerWhereUniqueInput!]!): [Manufacturer]
  createInstaller(data: InstallerCreateInput!): Installer
  createInstallers(data: [InstallerCreateInput!]!): [Installer]
  updateInstaller(where: InstallerWhereUniqueInput!, data: InstallerUpdateInput!): Installer
  updateInstallers(data: [InstallerUpdateArgs!]!): [Installer]
  deleteInstaller(where: InstallerWhereUniqueInput!): Installer
  deleteInstallers(where: [InstallerWhereUniqueInput!]!): [Installer]
  createInstallerContact(data: InstallerContactCreateInput!): InstallerContact
  createInstallerContacts(data: [InstallerContactCreateInput!]!): [InstallerContact]
  updateInstallerContact(where: InstallerContactWhereUniqueInput!, data: InstallerContactUpdateInput!): InstallerContact
  updateInstallerContacts(data: [InstallerContactUpdateArgs!]!): [InstallerContact]
  deleteInstallerContact(where: InstallerContactWhereUniqueInput!): InstallerContact
  deleteInstallerContacts(where: [InstallerContactWhereUniqueInput!]!): [InstallerContact]
  createInstallerLicence(data: InstallerLicenceCreateInput!): InstallerLicence
  createInstallerLicences(data: [InstallerLicenceCreateInput!]!): [InstallerLicence]
  updateInstallerLicence(where: InstallerLicenceWhereUniqueInput!, data: InstallerLicenceUpdateInput!): InstallerLicence
  updateInstallerLicences(data: [InstallerLicenceUpdateArgs!]!): [InstallerLicence]
  deleteInstallerLicence(where: InstallerLicenceWhereUniqueInput!): InstallerLicence
  deleteInstallerLicences(where: [InstallerLicenceWhereUniqueInput!]!): [InstallerLicence]
  createInstallerInverter(data: InstallerInverterCreateInput!): InstallerInverter
  createInstallerInverters(data: [InstallerInverterCreateInput!]!): [InstallerInverter]
  updateInstallerInverter(where: InstallerInverterWhereUniqueInput!, data: InstallerInverterUpdateInput!): InstallerInverter
  updateInstallerInverters(data: [InstallerInverterUpdateArgs!]!): [InstallerInverter]
  deleteInstallerInverter(where: InstallerInverterWhereUniqueInput!): InstallerInverter
  deleteInstallerInverters(where: [InstallerInverterWhereUniqueInput!]!): [InstallerInverter]
  createInstallerSolarPanel(data: InstallerSolarPanelCreateInput!): InstallerSolarPanel
  createInstallerSolarPanels(data: [InstallerSolarPanelCreateInput!]!): [InstallerSolarPanel]
  updateInstallerSolarPanel(where: InstallerSolarPanelWhereUniqueInput!, data: InstallerSolarPanelUpdateInput!): InstallerSolarPanel
  updateInstallerSolarPanels(data: [InstallerSolarPanelUpdateArgs!]!): [InstallerSolarPanel]
  deleteInstallerSolarPanel(where: InstallerSolarPanelWhereUniqueInput!): InstallerSolarPanel
  deleteInstallerSolarPanels(where: [InstallerSolarPanelWhereUniqueInput!]!): [InstallerSolarPanel]
  createInstallerBattery(data: InstallerBatteryCreateInput!): InstallerBattery
  createInstallerBatteries(data: [InstallerBatteryCreateInput!]!): [InstallerBattery]
  updateInstallerBattery(where: InstallerBatteryWhereUniqueInput!, data: InstallerBatteryUpdateInput!): InstallerBattery
  updateInstallerBatteries(data: [InstallerBatteryUpdateArgs!]!): [InstallerBattery]
  deleteInstallerBattery(where: InstallerBatteryWhereUniqueInput!): InstallerBattery
  deleteInstallerBatteries(where: [InstallerBatteryWhereUniqueInput!]!): [InstallerBattery]
  createInstallerZone(data: InstallerZoneCreateInput!): InstallerZone
  createInstallerZones(data: [InstallerZoneCreateInput!]!): [InstallerZone]
  updateInstallerZone(where: InstallerZoneWhereUniqueInput!, data: InstallerZoneUpdateInput!): InstallerZone
  updateInstallerZones(data: [InstallerZoneUpdateArgs!]!): [InstallerZone]
  deleteInstallerZone(where: InstallerZoneWhereUniqueInput!): InstallerZone
  deleteInstallerZones(where: [InstallerZoneWhereUniqueInput!]!): [InstallerZone]
  createInverter(data: InverterCreateInput!): Inverter
  createInverters(data: [InverterCreateInput!]!): [Inverter]
  updateInverter(where: InverterWhereUniqueInput!, data: InverterUpdateInput!): Inverter
  updateInverters(data: [InverterUpdateArgs!]!): [Inverter]
  deleteInverter(where: InverterWhereUniqueInput!): Inverter
  deleteInverters(where: [InverterWhereUniqueInput!]!): [Inverter]
  createSolarBundle(data: SolarBundleCreateInput!): SolarBundle
  createSolarBundles(data: [SolarBundleCreateInput!]!): [SolarBundle]
  updateSolarBundle(where: SolarBundleWhereUniqueInput!, data: SolarBundleUpdateInput!): SolarBundle
  updateSolarBundles(data: [SolarBundleUpdateArgs!]!): [SolarBundle]
  deleteSolarBundle(where: SolarBundleWhereUniqueInput!): SolarBundle
  deleteSolarBundles(where: [SolarBundleWhereUniqueInput!]!): [SolarBundle]
  createSolarAddon(data: SolarAddonCreateInput!): SolarAddon
  createSolarAddons(data: [SolarAddonCreateInput!]!): [SolarAddon]
  updateSolarAddon(where: SolarAddonWhereUniqueInput!, data: SolarAddonUpdateInput!): SolarAddon
  updateSolarAddons(data: [SolarAddonUpdateArgs!]!): [SolarAddon]
  deleteSolarAddon(where: SolarAddonWhereUniqueInput!): SolarAddon
  deleteSolarAddons(where: [SolarAddonWhereUniqueInput!]!): [SolarAddon]
  createSolarAffiliate(data: SolarAffiliateCreateInput!): SolarAffiliate
  createSolarAffiliates(data: [SolarAffiliateCreateInput!]!): [SolarAffiliate]
  updateSolarAffiliate(where: SolarAffiliateWhereUniqueInput!, data: SolarAffiliateUpdateInput!): SolarAffiliate
  updateSolarAffiliates(data: [SolarAffiliateUpdateArgs!]!): [SolarAffiliate]
  deleteSolarAffiliate(where: SolarAffiliateWhereUniqueInput!): SolarAffiliate
  deleteSolarAffiliates(where: [SolarAffiliateWhereUniqueInput!]!): [SolarAffiliate]
  createSolarPanel(data: SolarPanelCreateInput!): SolarPanel
  createSolarPanels(data: [SolarPanelCreateInput!]!): [SolarPanel]
  updateSolarPanel(where: SolarPanelWhereUniqueInput!, data: SolarPanelUpdateInput!): SolarPanel
  updateSolarPanels(data: [SolarPanelUpdateArgs!]!): [SolarPanel]
  deleteSolarPanel(where: SolarPanelWhereUniqueInput!): SolarPanel
  deleteSolarPanels(where: [SolarPanelWhereUniqueInput!]!): [SolarPanel]
  createBundleFeature(data: BundleFeatureCreateInput!): BundleFeature
  createBundleFeatures(data: [BundleFeatureCreateInput!]!): [BundleFeature]
  updateBundleFeature(where: BundleFeatureWhereUniqueInput!, data: BundleFeatureUpdateInput!): BundleFeature
  updateBundleFeatures(data: [BundleFeatureUpdateArgs!]!): [BundleFeature]
  deleteBundleFeature(where: BundleFeatureWhereUniqueInput!): BundleFeature
  deleteBundleFeatures(where: [BundleFeatureWhereUniqueInput!]!): [BundleFeature]
  createInstallerAddon(data: InstallerAddonCreateInput!): InstallerAddon
  createInstallerAddons(data: [InstallerAddonCreateInput!]!): [InstallerAddon]
  updateInstallerAddon(where: InstallerAddonWhereUniqueInput!, data: InstallerAddonUpdateInput!): InstallerAddon
  updateInstallerAddons(data: [InstallerAddonUpdateArgs!]!): [InstallerAddon]
  deleteInstallerAddon(where: InstallerAddonWhereUniqueInput!): InstallerAddon
  deleteInstallerAddons(where: [InstallerAddonWhereUniqueInput!]!): [InstallerAddon]
  createStateWiseRebate(data: StateWiseRebateCreateInput!): StateWiseRebate
  createStateWiseRebates(data: [StateWiseRebateCreateInput!]!): [StateWiseRebate]
  updateStateWiseRebate(where: StateWiseRebateWhereUniqueInput!, data: StateWiseRebateUpdateInput!): StateWiseRebate
  updateStateWiseRebates(data: [StateWiseRebateUpdateArgs!]!): [StateWiseRebate]
  deleteStateWiseRebate(where: StateWiseRebateWhereUniqueInput!): StateWiseRebate
  deleteStateWiseRebates(where: [StateWiseRebateWhereUniqueInput!]!): [StateWiseRebate]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  affiliates(where: AffiliateWhereInput! = {}, orderBy: [AffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AffiliateWhereUniqueInput): [Affiliate!]
  affiliate(where: AffiliateWhereUniqueInput!): Affiliate
  affiliatesCount(where: AffiliateWhereInput! = {}): Int
  auditLogs(where: AuditLogWhereInput! = {}, orderBy: [AuditLogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuditLogWhereUniqueInput): [AuditLog!]
  auditLog(where: AuditLogWhereUniqueInput!): AuditLog
  auditLogsCount(where: AuditLogWhereInput! = {}): Int
  csSites(where: CsSiteWhereInput! = {}, orderBy: [CsSiteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CsSiteWhereUniqueInput): [CsSite!]
  csSite(where: CsSiteWhereUniqueInput!): CsSite
  csSitesCount(where: CsSiteWhereInput! = {}): Int
  dialerLists(where: DialerListWhereInput! = {}, orderBy: [DialerListOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DialerListWhereUniqueInput): [DialerList!]
  dialerList(where: DialerListWhereUniqueInput!): DialerList
  dialerListsCount(where: DialerListWhereInput! = {}): Int
  mediaFiles(where: MediaWhereInput! = {}, orderBy: [MediaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MediaWhereUniqueInput): [Media!]
  media(where: MediaWhereUniqueInput!): Media
  mediaFilesCount(where: MediaWhereInput! = {}): Int
  members(where: MemberWhereInput! = {}, orderBy: [MemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MemberWhereUniqueInput): [Member!]
  member(where: MemberWhereUniqueInput!): Member
  membersCount(where: MemberWhereInput! = {}): Int
  passwordSettings(where: PasswordSettingWhereInput! = {}, orderBy: [PasswordSettingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PasswordSettingWhereUniqueInput): [PasswordSetting!]
  passwordSetting(where: PasswordSettingWhereUniqueInput!): PasswordSetting
  passwordSettingsCount(where: PasswordSettingWhereInput! = {}): Int
  scripts(where: ScriptWhereInput! = {}, orderBy: [ScriptOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScriptWhereUniqueInput): [Script!]
  script(where: ScriptWhereUniqueInput!): Script
  scriptsCount(where: ScriptWhereInput! = {}): Int
  states(where: StateWhereInput! = {}, orderBy: [StateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StateWhereUniqueInput): [State!]
  state(where: StateWhereUniqueInput!): State
  statesCount(where: StateWhereInput! = {}): Int
  subAffiliates(where: SubAffiliateWhereInput! = {}, orderBy: [SubAffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubAffiliateWhereUniqueInput): [SubAffiliate!]
  subAffiliate(where: SubAffiliateWhereUniqueInput!): SubAffiliate
  subAffiliatesCount(where: SubAffiliateWhereInput! = {}): Int
  verticals(where: VerticalWhereInput! = {}, orderBy: [VerticalOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VerticalWhereUniqueInput): [Vertical!]
  vertical(where: VerticalWhereUniqueInput!): Vertical
  verticalsCount(where: VerticalWhereInput! = {}): Int
  bundleFormContainers(where: BundleFormContainerWhereInput! = {}, orderBy: [BundleFormContainerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BundleFormContainerWhereUniqueInput): [BundleFormContainer!]
  bundleFormContainer(where: BundleFormContainerWhereUniqueInput!): BundleFormContainer
  bundleFormContainersCount(where: BundleFormContainerWhereInput! = {}): Int
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoleWhereUniqueInput): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  retailerMatrices(where: RetailerMatrixWhereInput! = {}, orderBy: [RetailerMatrixOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RetailerMatrixWhereUniqueInput): [RetailerMatrix!]
  retailerMatrix(where: RetailerMatrixWhereUniqueInput!): RetailerMatrix
  retailerMatricesCount(where: RetailerMatrixWhereInput! = {}): Int
  checkBoxContents(where: CheckBoxContentWhereInput! = {}, orderBy: [CheckBoxContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CheckBoxContentWhereUniqueInput): [CheckBoxContent!]
  checkBoxContent(where: CheckBoxContentWhereUniqueInput!): CheckBoxContent
  checkBoxContentsCount(where: CheckBoxContentWhereInput! = {}): Int
  creditScores(where: CreditScoreWhereInput! = {}, orderBy: [CreditScoreOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CreditScoreWhereUniqueInput): [CreditScore!]
  creditScore(where: CreditScoreWhereUniqueInput!): CreditScore
  creditScoresCount(where: CreditScoreWhereInput! = {}): Int
  logos(where: LogoWhereInput! = {}, orderBy: [LogoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LogoWhereUniqueInput): [Logo!]
  logo(where: LogoWhereUniqueInput!): Logo
  logosCount(where: LogoWhereInput! = {}): Int
  formComponents(where: FormComponentWhereInput! = {}, orderBy: [FormComponentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormComponentWhereUniqueInput): [FormComponent!]
  formComponent(where: FormComponentWhereUniqueInput!): FormComponent
  formComponentsCount(where: FormComponentWhereInput! = {}): Int
  formFields(where: FormFieldWhereInput! = {}, orderBy: [FormFieldOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormFieldWhereUniqueInput): [FormField!]
  formField(where: FormFieldWhereUniqueInput!): FormField
  formFieldsCount(where: FormFieldWhereInput! = {}): Int
  formOptions(where: FormOptionWhereInput! = {}, orderBy: [FormOptionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormOptionWhereUniqueInput): [FormOption!]
  formOption(where: FormOptionWhereUniqueInput!): FormOption
  formOptionsCount(where: FormOptionWhereInput! = {}): Int
  formValidations(where: FormValidationWhereInput! = {}, orderBy: [FormValidationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormValidationWhereUniqueInput): [FormValidation!]
  formValidation(where: FormValidationWhereUniqueInput!): FormValidation
  formValidationsCount(where: FormValidationWhereInput! = {}): Int
  ignoreLists(where: IgnoreListWhereInput! = {}, orderBy: [IgnoreListOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: IgnoreListWhereUniqueInput): [IgnoreList!]
  ignoreList(where: IgnoreListWhereUniqueInput!): IgnoreList
  ignoreListsCount(where: IgnoreListWhereInput! = {}): Int
  ignoreParameters(where: IgnoreParameterWhereInput! = {}, orderBy: [IgnoreParameterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: IgnoreParameterWhereUniqueInput): [IgnoreParameter!]
  ignoreParameter(where: IgnoreParameterWhereUniqueInput!): IgnoreParameter
  ignoreParametersCount(where: IgnoreParameterWhereInput! = {}): Int
  ignoreTypes(where: IgnoreTypeWhereInput! = {}, orderBy: [IgnoreTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: IgnoreTypeWhereUniqueInput): [IgnoreType!]
  ignoreType(where: IgnoreTypeWhereUniqueInput!): IgnoreType
  ignoreTypesCount(where: IgnoreTypeWhereInput! = {}): Int
  ignoreDataContents(where: IgnoreDataContentWhereInput! = {}, orderBy: [IgnoreDataContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: IgnoreDataContentWhereUniqueInput): [IgnoreDataContent!]
  ignoreDataContent(where: IgnoreDataContentWhereUniqueInput!): IgnoreDataContent
  ignoreDataContentsCount(where: IgnoreDataContentWhereInput! = {}): Int
  domains(where: DomainWhereInput! = {}, orderBy: [DomainOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DomainWhereUniqueInput): [Domain!]
  domain(where: DomainWhereUniqueInput!): Domain
  domainsCount(where: DomainWhereInput! = {}): Int
  domainConfigs(where: DomainConfigWhereInput! = {}, orderBy: [DomainConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DomainConfigWhereUniqueInput): [DomainConfig!]
  domainConfig(where: DomainConfigWhereUniqueInput!): DomainConfig
  domainConfigsCount(where: DomainConfigWhereInput! = {}): Int
  links(where: LinkWhereInput! = {}, orderBy: [LinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LinkWhereUniqueInput): [Link!]
  link(where: LinkWhereUniqueInput!): Link
  linksCount(where: LinkWhereInput! = {}): Int
  linkGroups(where: LinkGroupWhereInput! = {}, orderBy: [LinkGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LinkGroupWhereUniqueInput): [LinkGroup!]
  linkGroup(where: LinkGroupWhereUniqueInput!): LinkGroup
  linkGroupsCount(where: LinkGroupWhereInput! = {}): Int
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  page(where: PageWhereUniqueInput!): Page
  pagesCount(where: PageWhereInput! = {}): Int
  pageConfigs(where: PageConfigWhereInput! = {}, orderBy: [PageConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageConfigWhereUniqueInput): [PageConfig!]
  pageConfig(where: PageConfigWhereUniqueInput!): PageConfig
  pageConfigsCount(where: PageConfigWhereInput! = {}): Int
  redirects(where: RedirectWhereInput! = {}, orderBy: [RedirectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RedirectWhereUniqueInput): [Redirect!]
  redirect(where: RedirectWhereUniqueInput!): Redirect
  redirectsCount(where: RedirectWhereInput! = {}): Int
  sections(where: SectionWhereInput! = {}, orderBy: [SectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SectionWhereUniqueInput): [Section!]
  section(where: SectionWhereUniqueInput!): Section
  sectionsCount(where: SectionWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  widgets(where: WidgetWhereInput! = {}, orderBy: [WidgetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WidgetWhereUniqueInput): [Widget!]
  widget(where: WidgetWhereUniqueInput!): Widget
  widgetsCount(where: WidgetWhereInput! = {}): Int
  attributes(where: AttributeWhereInput! = {}, orderBy: [AttributeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AttributeWhereUniqueInput): [Attribute!]
  attribute(where: AttributeWhereUniqueInput!): Attribute
  attributesCount(where: AttributeWhereInput! = {}): Int
  components(where: ComponentWhereInput! = {}, orderBy: [ComponentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ComponentWhereUniqueInput): [Component!]
  component(where: ComponentWhereUniqueInput!): Component
  componentsCount(where: ComponentWhereInput! = {}): Int
  containers(where: ContainerWhereInput! = {}, orderBy: [ContainerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContainerWhereUniqueInput): [Container!]
  container(where: ContainerWhereUniqueInput!): Container
  containersCount(where: ContainerWhereInput! = {}): Int
  fields(where: FieldWhereInput! = {}, orderBy: [FieldOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FieldWhereUniqueInput): [Field!]
  field(where: FieldWhereUniqueInput!): Field
  fieldsCount(where: FieldWhereInput! = {}): Int
  filters(where: FilterWhereInput! = {}, orderBy: [FilterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FilterWhereUniqueInput): [Filter!]
  filter(where: FilterWhereUniqueInput!): Filter
  filtersCount(where: FilterWhereInput! = {}): Int
  customAttributes(where: CustomAttributeWhereInput! = {}, orderBy: [CustomAttributeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CustomAttributeWhereUniqueInput): [CustomAttribute!]
  customAttribute(where: CustomAttributeWhereUniqueInput!): CustomAttribute
  customAttributesCount(where: CustomAttributeWhereInput! = {}): Int
  uploadCategories(where: UploadCategoryWhereInput! = {}, orderBy: [UploadCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UploadCategoryWhereUniqueInput): [UploadCategory!]
  uploadCategory(where: UploadCategoryWhereUniqueInput!): UploadCategory
  uploadCategoriesCount(where: UploadCategoryWhereInput! = {}): Int
  uploadDocuments(where: UploadDocumentWhereInput! = {}, orderBy: [UploadDocumentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UploadDocumentWhereUniqueInput): [UploadDocument!]
  uploadDocument(where: UploadDocumentWhereUniqueInput!): UploadDocument
  uploadDocumentsCount(where: UploadDocumentWhereInput! = {}): Int
  genericProviders(where: GenericProviderWhereInput! = {}, orderBy: [GenericProviderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GenericProviderWhereUniqueInput): [GenericProvider!]
  genericProvider(where: GenericProviderWhereUniqueInput!): GenericProvider
  genericProvidersCount(where: GenericProviderWhereInput! = {}): Int
  genericPlans(where: GenericPlanWhereInput! = {}, orderBy: [GenericPlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GenericPlanWhereUniqueInput): [GenericPlan!]
  genericPlan(where: GenericPlanWhereUniqueInput!): GenericPlan
  genericPlansCount(where: GenericPlanWhereInput! = {}): Int
  genericPlanFields(where: GenericPlanFieldWhereInput! = {}, orderBy: [GenericPlanFieldOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GenericPlanFieldWhereUniqueInput): [GenericPlanField!]
  genericPlanField(where: GenericPlanFieldWhereUniqueInput!): GenericPlanField
  genericPlanFieldsCount(where: GenericPlanFieldWhereInput! = {}): Int
  genericAddons(where: GenericAddonWhereInput! = {}, orderBy: [GenericAddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GenericAddonWhereUniqueInput): [GenericAddon!]
  genericAddon(where: GenericAddonWhereUniqueInput!): GenericAddon
  genericAddonsCount(where: GenericAddonWhereInput! = {}): Int
  addons(where: AddonWhereInput! = {}, orderBy: [AddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddonWhereUniqueInput): [Addon!]
  addon(where: AddonWhereUniqueInput!): Addon
  addonsCount(where: AddonWhereInput! = {}): Int
  addonFields(where: AddonFieldWhereInput! = {}, orderBy: [AddonFieldOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddonFieldWhereUniqueInput): [AddonField!]
  addonField(where: AddonFieldWhereUniqueInput!): AddonField
  addonFieldsCount(where: AddonFieldWhereInput! = {}): Int
  plans(where: PlanWhereInput! = {}, orderBy: [PlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanWhereUniqueInput): [Plan!]
  plan(where: PlanWhereUniqueInput!): Plan
  plansCount(where: PlanWhereInput! = {}): Int
  providers(where: ProviderWhereInput! = {}, orderBy: [ProviderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProviderWhereUniqueInput): [Provider!]
  provider(where: ProviderWhereUniqueInput!): Provider
  providersCount(where: ProviderWhereInput! = {}): Int
  providerCreditCards(where: ProviderCreditCardWhereInput! = {}, orderBy: [ProviderCreditCardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProviderCreditCardWhereUniqueInput): [ProviderCreditCard!]
  providerCreditCard(where: ProviderCreditCardWhereUniqueInput!): ProviderCreditCard
  providerCreditCardsCount(where: ProviderCreditCardWhereInput! = {}): Int
  creditCards(where: CreditCardWhereInput! = {}, orderBy: [CreditCardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CreditCardWhereUniqueInput): [CreditCard!]
  creditCard(where: CreditCardWhereUniqueInput!): CreditCard
  creditCardsCount(where: CreditCardWhereInput! = {}): Int
  cardDetails(where: CardDetailWhereInput! = {}, orderBy: [CardDetailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CardDetailWhereUniqueInput): [CardDetail!]
  cardDetail(where: CardDetailWhereUniqueInput!): CardDetail
  cardDetailsCount(where: CardDetailWhereInput! = {}): Int
  cardFeatures(where: CardFeatureWhereInput! = {}, orderBy: [CardFeatureOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CardFeatureWhereUniqueInput): [CardFeature!]
  cardFeature(where: CardFeatureWhereUniqueInput!): CardFeature
  cardFeaturesCount(where: CardFeatureWhereInput! = {}): Int
  rates(where: RateWhereInput! = {}, orderBy: [RateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RateWhereUniqueInput): [Rate!]
  rate(where: RateWhereUniqueInput!): Rate
  ratesCount(where: RateWhereInput! = {}): Int
  creditCardFees(where: CreditCardFeeWhereInput! = {}, orderBy: [CreditCardFeeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CreditCardFeeWhereUniqueInput): [CreditCardFee!]
  creditCardFee(where: CreditCardFeeWhereUniqueInput!): CreditCardFee
  creditCardFeesCount(where: CreditCardFeeWhereInput! = {}): Int
  cCFormContainers(where: CCFormContainerWhereInput! = {}, orderBy: [CCFormContainerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CCFormContainerWhereUniqueInput): [CCFormContainer!]
  cCFormContainer(where: CCFormContainerWhereUniqueInput!): CCFormContainer
  cCFormContainersCount(where: CCFormContainerWhereInput! = {}): Int
  cCPerks(where: CCPerkWhereInput! = {}, orderBy: [CCPerkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CCPerkWhereUniqueInput): [CCPerk!]
  cCPerk(where: CCPerkWhereUniqueInput!): CCPerk
  cCPerksCount(where: CCPerkWhereInput! = {}): Int
  rewardPrograms(where: RewardProgramWhereInput! = {}, orderBy: [RewardProgramOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RewardProgramWhereUniqueInput): [RewardProgram!]
  rewardProgram(where: RewardProgramWhereUniqueInput!): RewardProgram
  rewardProgramsCount(where: RewardProgramWhereInput! = {}): Int
  cCDocuments(where: CCDocumentWhereInput! = {}, orderBy: [CCDocumentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CCDocumentWhereUniqueInput): [CCDocument!]
  cCDocument(where: CCDocumentWhereUniqueInput!): CCDocument
  cCDocumentsCount(where: CCDocumentWhereInput! = {}): Int
  balanceTransfers(where: BalanceTransferWhereInput! = {}, orderBy: [BalanceTransferOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BalanceTransferWhereUniqueInput): [BalanceTransfer!]
  balanceTransfer(where: BalanceTransferWhereUniqueInput!): BalanceTransfer
  balanceTransfersCount(where: BalanceTransferWhereInput! = {}): Int
  earnRates(where: EarnRateWhereInput! = {}, orderBy: [EarnRateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EarnRateWhereUniqueInput): [EarnRate!]
  earnRate(where: EarnRateWhereUniqueInput!): EarnRate
  earnRatesCount(where: EarnRateWhereInput! = {}): Int
  overseasSpends(where: OverseasSpendWhereInput! = {}, orderBy: [OverseasSpendOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OverseasSpendWhereUniqueInput): [OverseasSpend!]
  overseasSpend(where: OverseasSpendWhereUniqueInput!): OverseasSpend
  overseasSpendsCount(where: OverseasSpendWhereInput! = {}): Int
  cCEligibilities(where: CCEligibilityWhereInput! = {}, orderBy: [CCEligibilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CCEligibilityWhereUniqueInput): [CCEligibility!]
  cCEligibility(where: CCEligibilityWhereUniqueInput!): CCEligibility
  cCEligibilitiesCount(where: CCEligibilityWhereInput! = {}): Int
  specials(where: SpecialWhereInput! = {}, orderBy: [SpecialOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SpecialWhereUniqueInput): [Special!]
  special(where: SpecialWhereUniqueInput!): Special
  specialsCount(where: SpecialWhereInput! = {}): Int
  rewards(where: RewardWhereInput! = {}, orderBy: [RewardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RewardWhereUniqueInput): [Reward!]
  reward(where: RewardWhereUniqueInput!): Reward
  rewardsCount(where: RewardWhereInput! = {}): Int
  additionalQuestions(where: AdditionalQuestionWhereInput! = {}, orderBy: [AdditionalQuestionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AdditionalQuestionWhereUniqueInput): [AdditionalQuestion!]
  additionalQuestion(where: AdditionalQuestionWhereUniqueInput!): AdditionalQuestion
  additionalQuestionsCount(where: AdditionalQuestionWhereInput! = {}): Int
  cCUploadGroups(where: CCUploadGroupWhereInput! = {}, orderBy: [CCUploadGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CCUploadGroupWhereUniqueInput): [CCUploadGroup!]
  cCUploadGroup(where: CCUploadGroupWhereUniqueInput!): CCUploadGroup
  cCUploadGroupsCount(where: CCUploadGroupWhereInput! = {}): Int
  mirns(where: MirnWhereInput! = {}, orderBy: [MirnOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MirnWhereUniqueInput): [Mirn!]
  mirn(where: MirnWhereUniqueInput!): Mirn
  mirnsCount(where: MirnWhereInput! = {}): Int
  tariffCodes(where: TariffCodeWhereInput! = {}, orderBy: [TariffCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TariffCodeWhereUniqueInput): [TariffCode!]
  tariffCode(where: TariffCodeWhereUniqueInput!): TariffCode
  tariffCodesCount(where: TariffCodeWhereInput! = {}): Int
  openEnergyBillRules(where: OpenEnergyBillRuleWhereInput! = {}, orderBy: [OpenEnergyBillRuleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OpenEnergyBillRuleWhereUniqueInput): [OpenEnergyBillRule!]
  openEnergyBillRule(where: OpenEnergyBillRuleWhereUniqueInput!): OpenEnergyBillRule
  openEnergyBillRulesCount(where: OpenEnergyBillRuleWhereInput! = {}): Int
  hIProviders(where: HIProviderWhereInput! = {}, orderBy: [HIProviderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HIProviderWhereUniqueInput): [HIProvider!]
  hIProvider(where: HIProviderWhereUniqueInput!): HIProvider
  hIProvidersCount(where: HIProviderWhereInput! = {}): Int
  hIFormContainers(where: HIFormContainerWhereInput! = {}, orderBy: [HIFormContainerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HIFormContainerWhereUniqueInput): [HIFormContainer!]
  hIFormContainer(where: HIFormContainerWhereUniqueInput!): HIFormContainer
  hIFormContainersCount(where: HIFormContainerWhereInput! = {}): Int
  hIRebates(where: HIRebateWhereInput! = {}, orderBy: [HIRebateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HIRebateWhereUniqueInput): [HIRebate!]
  hIRebate(where: HIRebateWhereUniqueInput!): HIRebate
  hIRebatesCount(where: HIRebateWhereInput! = {}): Int
  productTiers(where: ProductTierWhereInput! = {}, orderBy: [ProductTierOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductTierWhereUniqueInput): [ProductTier!]
  productTier(where: ProductTierWhereUniqueInput!): ProductTier
  productTiersCount(where: ProductTierWhereInput! = {}): Int
  hospitalCovers(where: HospitalCoverWhereInput! = {}, orderBy: [HospitalCoverOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HospitalCoverWhereUniqueInput): [HospitalCover!]
  hospitalCover(where: HospitalCoverWhereUniqueInput!): HospitalCover
  hospitalCoversCount(where: HospitalCoverWhereInput! = {}): Int
  extrasCovers(where: ExtrasCoverWhereInput! = {}, orderBy: [ExtrasCoverOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExtrasCoverWhereUniqueInput): [ExtrasCover!]
  extrasCover(where: ExtrasCoverWhereUniqueInput!): ExtrasCover
  extrasCoversCount(where: ExtrasCoverWhereInput! = {}): Int
  paymentFrequencies(where: PaymentFrequencyWhereInput! = {}, orderBy: [PaymentFrequencyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentFrequencyWhereUniqueInput): [PaymentFrequency!]
  paymentFrequency(where: PaymentFrequencyWhereUniqueInput!): PaymentFrequency
  paymentFrequenciesCount(where: PaymentFrequencyWhereInput! = {}): Int
  pLProviders(where: PLProviderWhereInput! = {}, orderBy: [PLProviderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PLProviderWhereUniqueInput): [PLProvider!]
  pLProvider(where: PLProviderWhereUniqueInput!): PLProvider
  pLProvidersCount(where: PLProviderWhereInput! = {}): Int
  personalLoans(where: PersonalLoanWhereInput! = {}, orderBy: [PersonalLoanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonalLoanWhereUniqueInput): [PersonalLoan!]
  personalLoan(where: PersonalLoanWhereUniqueInput!): PersonalLoan
  personalLoansCount(where: PersonalLoanWhereInput! = {}): Int
  pLLoanDetails(where: PLLoanDetailWhereInput! = {}, orderBy: [PLLoanDetailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PLLoanDetailWhereUniqueInput): [PLLoanDetail!]
  pLLoanDetail(where: PLLoanDetailWhereUniqueInput!): PLLoanDetail
  pLLoanDetailsCount(where: PLLoanDetailWhereInput! = {}): Int
  pLFeatures(where: PLFeatureWhereInput! = {}, orderBy: [PLFeatureOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PLFeatureWhereUniqueInput): [PLFeature!]
  pLFeature(where: PLFeatureWhereUniqueInput!): PLFeature
  pLFeaturesCount(where: PLFeatureWhereInput! = {}): Int
  pLFees(where: PLFeeWhereInput! = {}, orderBy: [PLFeeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PLFeeWhereUniqueInput): [PLFee!]
  pLFee(where: PLFeeWhereUniqueInput!): PLFee
  pLFeesCount(where: PLFeeWhereInput! = {}): Int
  pLPerks(where: PLPerkWhereInput! = {}, orderBy: [PLPerkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PLPerkWhereUniqueInput): [PLPerk!]
  pLPerk(where: PLPerkWhereUniqueInput!): PLPerk
  pLPerksCount(where: PLPerkWhereInput! = {}): Int
  pLDocuments(where: PLDocumentWhereInput! = {}, orderBy: [PLDocumentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PLDocumentWhereUniqueInput): [PLDocument!]
  pLDocument(where: PLDocumentWhereUniqueInput!): PLDocument
  pLDocumentsCount(where: PLDocumentWhereInput! = {}): Int
  pLSpecials(where: PLSpecialWhereInput! = {}, orderBy: [PLSpecialOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PLSpecialWhereUniqueInput): [PLSpecial!]
  pLSpecial(where: PLSpecialWhereUniqueInput!): PLSpecial
  pLSpecialsCount(where: PLSpecialWhereInput! = {}): Int
  pLEligibilities(where: PLEligibilityWhereInput! = {}, orderBy: [PLEligibilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PLEligibilityWhereUniqueInput): [PLEligibility!]
  pLEligibility(where: PLEligibilityWhereUniqueInput!): PLEligibility
  pLEligibilitiesCount(where: PLEligibilityWhereInput! = {}): Int
  pLFormContainers(where: PLFormContainerWhereInput! = {}, orderBy: [PLFormContainerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PLFormContainerWhereUniqueInput): [PLFormContainer!]
  pLFormContainer(where: PLFormContainerWhereUniqueInput!): PLFormContainer
  pLFormContainersCount(where: PLFormContainerWhereInput! = {}): Int
  addonFeatures(where: AddonFeatureWhereInput! = {}, orderBy: [AddonFeatureOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddonFeatureWhereUniqueInput): [AddonFeature!]
  addonFeature(where: AddonFeatureWhereUniqueInput!): AddonFeature
  addonFeaturesCount(where: AddonFeatureWhereInput! = {}): Int
  batteries(where: BatteryWhereInput! = {}, orderBy: [BatteryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BatteryWhereUniqueInput): [Battery!]
  battery(where: BatteryWhereUniqueInput!): Battery
  batteriesCount(where: BatteryWhereInput! = {}): Int
  manufacturers(where: ManufacturerWhereInput! = {}, orderBy: [ManufacturerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ManufacturerWhereUniqueInput): [Manufacturer!]
  manufacturer(where: ManufacturerWhereUniqueInput!): Manufacturer
  manufacturersCount(where: ManufacturerWhereInput! = {}): Int
  installers(where: InstallerWhereInput! = {}, orderBy: [InstallerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstallerWhereUniqueInput): [Installer!]
  installer(where: InstallerWhereUniqueInput!): Installer
  installersCount(where: InstallerWhereInput! = {}): Int
  installerContacts(where: InstallerContactWhereInput! = {}, orderBy: [InstallerContactOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstallerContactWhereUniqueInput): [InstallerContact!]
  installerContact(where: InstallerContactWhereUniqueInput!): InstallerContact
  installerContactsCount(where: InstallerContactWhereInput! = {}): Int
  installerLicences(where: InstallerLicenceWhereInput! = {}, orderBy: [InstallerLicenceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstallerLicenceWhereUniqueInput): [InstallerLicence!]
  installerLicence(where: InstallerLicenceWhereUniqueInput!): InstallerLicence
  installerLicencesCount(where: InstallerLicenceWhereInput! = {}): Int
  installerInverters(where: InstallerInverterWhereInput! = {}, orderBy: [InstallerInverterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstallerInverterWhereUniqueInput): [InstallerInverter!]
  installerInverter(where: InstallerInverterWhereUniqueInput!): InstallerInverter
  installerInvertersCount(where: InstallerInverterWhereInput! = {}): Int
  installerSolarPanels(where: InstallerSolarPanelWhereInput! = {}, orderBy: [InstallerSolarPanelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstallerSolarPanelWhereUniqueInput): [InstallerSolarPanel!]
  installerSolarPanel(where: InstallerSolarPanelWhereUniqueInput!): InstallerSolarPanel
  installerSolarPanelsCount(where: InstallerSolarPanelWhereInput! = {}): Int
  installerBatteries(where: InstallerBatteryWhereInput! = {}, orderBy: [InstallerBatteryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstallerBatteryWhereUniqueInput): [InstallerBattery!]
  installerBattery(where: InstallerBatteryWhereUniqueInput!): InstallerBattery
  installerBatteriesCount(where: InstallerBatteryWhereInput! = {}): Int
  installerZones(where: InstallerZoneWhereInput! = {}, orderBy: [InstallerZoneOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstallerZoneWhereUniqueInput): [InstallerZone!]
  installerZone(where: InstallerZoneWhereUniqueInput!): InstallerZone
  installerZonesCount(where: InstallerZoneWhereInput! = {}): Int
  inverters(where: InverterWhereInput! = {}, orderBy: [InverterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InverterWhereUniqueInput): [Inverter!]
  inverter(where: InverterWhereUniqueInput!): Inverter
  invertersCount(where: InverterWhereInput! = {}): Int
  solarBundles(where: SolarBundleWhereInput! = {}, orderBy: [SolarBundleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SolarBundleWhereUniqueInput): [SolarBundle!]
  solarBundle(where: SolarBundleWhereUniqueInput!): SolarBundle
  solarBundlesCount(where: SolarBundleWhereInput! = {}): Int
  solarAddons(where: SolarAddonWhereInput! = {}, orderBy: [SolarAddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SolarAddonWhereUniqueInput): [SolarAddon!]
  solarAddon(where: SolarAddonWhereUniqueInput!): SolarAddon
  solarAddonsCount(where: SolarAddonWhereInput! = {}): Int
  solarAffiliates(where: SolarAffiliateWhereInput! = {}, orderBy: [SolarAffiliateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SolarAffiliateWhereUniqueInput): [SolarAffiliate!]
  solarAffiliate(where: SolarAffiliateWhereUniqueInput!): SolarAffiliate
  solarAffiliatesCount(where: SolarAffiliateWhereInput! = {}): Int
  solarPanels(where: SolarPanelWhereInput! = {}, orderBy: [SolarPanelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SolarPanelWhereUniqueInput): [SolarPanel!]
  solarPanel(where: SolarPanelWhereUniqueInput!): SolarPanel
  solarPanelsCount(where: SolarPanelWhereInput! = {}): Int
  bundleFeatures(where: BundleFeatureWhereInput! = {}, orderBy: [BundleFeatureOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BundleFeatureWhereUniqueInput): [BundleFeature!]
  bundleFeature(where: BundleFeatureWhereUniqueInput!): BundleFeature
  bundleFeaturesCount(where: BundleFeatureWhereInput! = {}): Int
  installerAddons(where: InstallerAddonWhereInput! = {}, orderBy: [InstallerAddonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstallerAddonWhereUniqueInput): [InstallerAddon!]
  installerAddon(where: InstallerAddonWhereUniqueInput!): InstallerAddon
  installerAddonsCount(where: InstallerAddonWhereInput! = {}): Int
  stateWiseRebates(where: StateWiseRebateWhereInput! = {}, orderBy: [StateWiseRebateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StateWiseRebateWhereUniqueInput): [StateWiseRebate!]
  stateWiseRebate(where: StateWiseRebateWhereUniqueInput!): StateWiseRebate
  stateWiseRebatesCount(where: StateWiseRebateWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
